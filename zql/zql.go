// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 16, col: 1, offset: 352},
			expr: &ruleRefExpr{
				pos:  position{line: 17, col: 5, offset: 432},
				name: "Sequential",
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 19, col: 1, offset: 444},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 459},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 20, col: 5, offset: 459},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 20, col: 5, offset: 459},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 20, col: 5, offset: 459},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 20, col: 11, offset: 465},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 20, col: 21, offset: 475},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 20, col: 26, offset: 480},
										expr: &ruleRefExpr{
											pos:  position{line: 20, col: 26, offset: 480},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 23, col: 5, offset: 640},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 23, col: 5, offset: 640},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 8, offset: 643},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 27, col: 1, offset: 755},
			expr: &actionExpr{
				pos: position{line: 27, col: 18, offset: 772},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 27, col: 18, offset: 772},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 27, col: 18, offset: 772},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 27, col: 21, offset: 775},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 25, offset: 779},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 27, col: 28, offset: 782},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 30, offset: 784},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 29, col: 1, offset: 813},
			expr: &choiceExpr{
				pos: position{line: 30, col: 5, offset: 826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 826},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 826},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 30, col: 5, offset: 826},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 11, offset: 832},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 30, col: 22, offset: 843},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 30, col: 27, offset: 848},
										expr: &ruleRefExpr{
											pos:  position{line: 30, col: 27, offset: 848},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 949},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 33, col: 5, offset: 949},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 11, offset: 955},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 37, col: 1, offset: 1014},
			expr: &actionExpr{
				pos: position{line: 38, col: 5, offset: 1031},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 38, col: 5, offset: 1031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 38, col: 5, offset: 1031},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 38, col: 8, offset: 1034},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 38, col: 13, offset: 1039},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 38, col: 16, offset: 1042},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 19, offset: 1045},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 40, col: 1, offset: 1076},
			expr: &choiceExpr{
				pos: position{line: 41, col: 5, offset: 1090},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 1090},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 1090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 41, col: 5, offset: 1090},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 13, offset: 1098},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 16, offset: 1101},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 20, offset: 1105},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 23, offset: 1108},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 28, offset: 1113},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 41, col: 31, offset: 1116},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 41, col: 41, offset: 1126},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 50, offset: 1135},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 53, offset: 1138},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 5, offset: 1237},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1250},
						run: (*parser).callonOperation15,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1250},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1250},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 7, offset: 1252},
										name: "Function",
									},
								},
								&notExpr{
									pos: position{line: 45, col: 16, offset: 1261},
									expr: &choiceExpr{
										pos: position{line: 45, col: 18, offset: 1263},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 45, col: 18, offset: 1263},
												name: "ExprGuard",
											},
											&seqExpr{
												pos: position{line: 45, col: 31, offset: 1276},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 45, col: 31, offset: 1276},
														name: "_",
													},
													&choiceExpr{
														pos: position{line: 45, col: 34, offset: 1279},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 45, col: 34, offset: 1279},
																val:        "by",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 45, col: 41, offset: 1286},
																val:        "with",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 45, col: 50, offset: 1295},
																val:        "where",
																ignoreCase: false,
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 45, col: 63, offset: 1308},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 45, col: 63, offset: 1308},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 45, col: 66, offset: 1311},
														val:        ",",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1339},
						run: (*parser).callonOperation31,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1339},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 46, col: 5, offset: 1339},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 7, offset: 1341},
										name: "Aggregation",
									},
								},
								&notExpr{
									pos: position{line: 46, col: 19, offset: 1353},
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 20, offset: 1354},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 1387},
						run: (*parser).callonOperation37,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 1387},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 47, col: 5, offset: 1387},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 10, offset: 1392},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 47, col: 24, offset: 1406},
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 25, offset: 1407},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 51, col: 1, offset: 1502},
			expr: &seqExpr{
				pos: position{line: 51, col: 13, offset: 1514},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 51, col: 13, offset: 1514},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 51, col: 17, offset: 1518},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 51, col: 18, offset: 1519},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 51, col: 18, offset: 1519},
										expr: &litMatcher{
											pos:        position{line: 51, col: 19, offset: 1520},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 24, offset: 1525},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 51, col: 38, offset: 1539},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 51, col: 57, offset: 1558},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 51, col: 82, offset: 1583},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 51, col: 88, offset: 1589},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 52, col: 1, offset: 1594},
			expr: &choiceExpr{
				pos: position{line: 52, col: 12, offset: 1605},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 52, col: 13, offset: 1606},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 52, col: 13, offset: 1606},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 52, col: 16, offset: 1609},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 52, col: 16, offset: 1609},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 52, col: 26, offset: 1619},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 52, col: 35, offset: 1628},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 52, col: 43, offset: 1636},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 52, col: 43, offset: 1636},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 52, col: 46, offset: 1639},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 54, col: 1, offset: 1645},
			expr: &actionExpr{
				pos: position{line: 55, col: 5, offset: 1663},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 55, col: 5, offset: 1663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 55, col: 5, offset: 1663},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 11, offset: 1669},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 21, offset: 1679},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 26, offset: 1684},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 26, offset: 1684},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 59, col: 1, offset: 1758},
			expr: &actionExpr{
				pos: position{line: 59, col: 16, offset: 1773},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 59, col: 16, offset: 1773},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 59, col: 16, offset: 1773},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 18, offset: 1775},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 26, offset: 1783},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 28, offset: 1785},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 30, offset: 1787},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 61, col: 1, offset: 1837},
			expr: &actionExpr{
				pos: position{line: 62, col: 5, offset: 1851},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 62, col: 5, offset: 1851},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1851},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 11, offset: 1857},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 63, col: 5, offset: 1874},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 63, col: 10, offset: 1879},
								expr: &actionExpr{
									pos: position{line: 63, col: 11, offset: 1880},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 63, col: 11, offset: 1880},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 63, col: 11, offset: 1880},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 63, col: 14, offset: 1883},
												expr: &seqExpr{
													pos: position{line: 63, col: 15, offset: 1884},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 63, col: 15, offset: 1884},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 63, col: 24, offset: 1893},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 63, col: 28, offset: 1897},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 63, col: 31, offset: 1900},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 63, col: 36, offset: 1905},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 67, col: 1, offset: 2021},
			expr: &choiceExpr{
				pos: position{line: 68, col: 5, offset: 2038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2038},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2038},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 68, col: 6, offset: 2039},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 68, col: 6, offset: 2039},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 68, col: 6, offset: 2039},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 68, col: 15, offset: 2048},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 68, col: 19, offset: 2052},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 68, col: 19, offset: 2052},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 68, col: 23, offset: 2056},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 68, col: 27, offset: 2060},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 29, offset: 2062},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 5, offset: 2178},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 5, offset: 2191},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2206},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 2206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 73, col: 5, offset: 2206},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 9, offset: 2210},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 73, col: 12, offset: 2213},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 17, offset: 2218},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 31, offset: 2232},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 73, col: 34, offset: 2235},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 75, col: 1, offset: 2261},
			expr: &choiceExpr{
				pos: position{line: 76, col: 5, offset: 2274},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2274},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2274},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 76, col: 5, offset: 2274},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 9, offset: 2278},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 12, offset: 2281},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 22, offset: 2291},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 36, offset: 2305},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 39, offset: 2308},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 41, offset: 2310},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 3004},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 97, col: 5, offset: 3004},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 97, col: 5, offset: 3004},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 7, offset: 3006},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 12, offset: 3011},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 97, col: 15, offset: 3014},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 20, offset: 3019},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 34, offset: 3033},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 97, col: 37, offset: 3036},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 39, offset: 3038},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 97, col: 57, offset: 3056},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 58, offset: 3057},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 100, col: 5, offset: 3175},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 100, col: 5, offset: 3175},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 100, col: 5, offset: 3175},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 7, offset: 3177},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 19, offset: 3189},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 21, offset: 3191},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 29, offset: 3199},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 100, col: 31, offset: 3201},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3888},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3888},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 121, col: 5, offset: 3888},
									expr: &seqExpr{
										pos: position{line: 121, col: 7, offset: 3890},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 121, col: 7, offset: 3890},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 121, col: 19, offset: 3902},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 121, col: 24, offset: 3907},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 26, offset: 3909},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 121, col: 44, offset: 3927},
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 45, offset: 3928},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 4043},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 4043},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 124, col: 5, offset: 4043},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 124, col: 9, offset: 4047},
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 10, offset: 4048},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 128, col: 1, offset: 4158},
			expr: &choiceExpr{
				pos: position{line: 129, col: 5, offset: 4174},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 129, col: 5, offset: 4174},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 4186},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 130, col: 5, offset: 4186},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 7, offset: 4188},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 134, col: 1, offset: 4293},
			expr: &choiceExpr{
				pos: position{line: 135, col: 5, offset: 4315},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 135, col: 5, offset: 4315},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 4327},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 136, col: 5, offset: 4327},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 7, offset: 4329},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 146, col: 1, offset: 4615},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 4630},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 147, col: 5, offset: 4630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 147, col: 5, offset: 4630},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 147, col: 10, offset: 4635},
								expr: &ruleRefExpr{
									pos:  position{line: 147, col: 10, offset: 4635},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 20, offset: 4645},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 147, col: 25, offset: 4650},
								expr: &litMatcher{
									pos:        position{line: 147, col: 26, offset: 4651},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 151, col: 1, offset: 4718},
			expr: &choiceExpr{
				pos: position{line: 152, col: 5, offset: 4731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4731},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 152, col: 5, offset: 4731},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 7, offset: 4733},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 152, col: 13, offset: 4739},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 15, offset: 4741},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 5, offset: 4791},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 155, col: 1, offset: 4800},
			expr: &actionExpr{
				pos: position{line: 155, col: 9, offset: 4808},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 9, offset: 4808},
					expr: &litMatcher{
						pos:        position{line: 155, col: 9, offset: 4808},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 157, col: 1, offset: 4845},
			expr: &choiceExpr{
				pos: position{line: 158, col: 5, offset: 4861},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 158, col: 5, offset: 4861},
						name: "SqlTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 159, col: 5, offset: 4883},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 160, col: 5, offset: 4896},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 161, col: 5, offset: 4908},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 4921},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 163, col: 5, offset: 4933},
						name: "ByToken",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 167, col: 1, offset: 4990},
			expr: &ruleRefExpr{
				pos:  position{line: 167, col: 14, offset: 5003},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 169, col: 1, offset: 5023},
			expr: &actionExpr{
				pos: position{line: 169, col: 14, offset: 5036},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 169, col: 15, offset: 5037},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 15, offset: 5037},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 169, col: 21, offset: 5043},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 169, col: 28, offset: 5050},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 169, col: 35, offset: 5057},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 169, col: 42, offset: 5064},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 169, col: 48, offset: 5070},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 169, col: 55, offset: 5077},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 171, col: 1, offset: 5114},
			expr: &actionExpr{
				pos: position{line: 172, col: 5, offset: 5137},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 172, col: 5, offset: 5137},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 172, col: 5, offset: 5137},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 11, offset: 5143},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 173, col: 5, offset: 5161},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 173, col: 10, offset: 5166},
								expr: &actionExpr{
									pos: position{line: 173, col: 11, offset: 5167},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 173, col: 11, offset: 5167},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 173, col: 11, offset: 5167},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 173, col: 14, offset: 5170},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 173, col: 17, offset: 5173},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 173, col: 28, offset: 5184},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 173, col: 31, offset: 5187},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 173, col: 36, offset: 5192},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 177, col: 1, offset: 5309},
			expr: &actionExpr{
				pos: position{line: 178, col: 5, offset: 5327},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 178, col: 5, offset: 5327},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 178, col: 5, offset: 5327},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 11, offset: 5333},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 179, col: 5, offset: 5351},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 179, col: 10, offset: 5356},
								expr: &actionExpr{
									pos: position{line: 179, col: 11, offset: 5357},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 179, col: 11, offset: 5357},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 179, col: 11, offset: 5357},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 179, col: 14, offset: 5360},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 179, col: 17, offset: 5363},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 179, col: 34, offset: 5380},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 179, col: 37, offset: 5383},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 179, col: 42, offset: 5388},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 183, col: 1, offset: 5505},
			expr: &actionExpr{
				pos: position{line: 184, col: 5, offset: 5523},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 184, col: 5, offset: 5523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 184, col: 5, offset: 5523},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 11, offset: 5529},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 5548},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 185, col: 10, offset: 5553},
								expr: &actionExpr{
									pos: position{line: 185, col: 11, offset: 5554},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 185, col: 11, offset: 5554},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 185, col: 11, offset: 5554},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 185, col: 14, offset: 5557},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 185, col: 17, offset: 5560},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 185, col: 40, offset: 5583},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 185, col: 43, offset: 5586},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 185, col: 48, offset: 5591},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 189, col: 1, offset: 5709},
			expr: &choiceExpr{
				pos: position{line: 190, col: 5, offset: 5728},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5728},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 5728},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 190, col: 5, offset: 5728},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 7, offset: 5730},
										name: "SearchExprFunc",
									},
								},
								&labeledExpr{
									pos:   position{line: 190, col: 22, offset: 5745},
									label: "typ",
									expr: &actionExpr{
										pos: position{line: 190, col: 28, offset: 5751},
										run: (*parser).callonSearchExprCast7,
										expr: &seqExpr{
											pos: position{line: 190, col: 28, offset: 5751},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 190, col: 28, offset: 5751},
													val:        ":",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 190, col: 32, offset: 5755},
													label: "typ",
													expr: &ruleRefExpr{
														pos:  position{line: 190, col: 36, offset: 5759},
														name: "PrimitiveType",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 5889},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 195, col: 1, offset: 5905},
			expr: &choiceExpr{
				pos: position{line: 196, col: 5, offset: 5924},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 5924},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5938},
						run: (*parser).callonSearchExprFunc3,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 5938},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 197, col: 5, offset: 5938},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 11, offset: 5944},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 20, offset: 5953},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 197, col: 25, offset: 5958},
										expr: &ruleRefExpr{
											pos:  position{line: 197, col: 26, offset: 5959},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6031},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6045},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 205, col: 1, offset: 6080},
			expr: &choiceExpr{
				pos: position{line: 206, col: 5, offset: 6096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 206, col: 5, offset: 6096},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 206, col: 5, offset: 6096},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 206, col: 5, offset: 6096},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 206, col: 11, offset: 6102},
										expr: &ruleRefExpr{
											pos:  position{line: 206, col: 11, offset: 6102},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 206, col: 21, offset: 6112},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 26, offset: 6117},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 206, col: 38, offset: 6129},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 44, offset: 6135},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 209, col: 5, offset: 6284},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 209, col: 5, offset: 6284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 209, col: 5, offset: 6284},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 209, col: 11, offset: 6290},
										expr: &ruleRefExpr{
											pos:  position{line: 209, col: 11, offset: 6290},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 209, col: 21, offset: 6300},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 209, col: 30, offset: 6309},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 209, col: 39, offset: 6318},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 209, col: 44, offset: 6323},
										expr: &seqExpr{
											pos: position{line: 209, col: 45, offset: 6324},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 209, col: 45, offset: 6324},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 209, col: 47, offset: 6326},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 209, col: 61, offset: 6340},
									label: "limit",
									expr: &zeroOrOneExpr{
										pos: position{line: 209, col: 67, offset: 6346},
										expr: &ruleRefExpr{
											pos:  position{line: 209, col: 67, offset: 6346},
											name: "LimitArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 217, col: 1, offset: 6588},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 6601},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 6601},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 5, offset: 6601},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 14, offset: 6610},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 16, offset: 6612},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 20, offset: 6616},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 29, offset: 6625},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 220, col: 1, offset: 6648},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 6664},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 6664},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 221, col: 5, offset: 6664},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 13, offset: 6672},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 15, offset: 6674},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 23, offset: 6682},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 223, col: 1, offset: 6723},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 6736},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 6736},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 224, col: 5, offset: 6736},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 224, col: 5, offset: 6736},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 224, col: 7, offset: 6738},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 224, col: 14, offset: 6745},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 224, col: 16, offset: 6747},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 224, col: 25, offset: 6756},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 224, col: 27, offset: 6758},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 33, offset: 6764},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 6795},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 225, col: 5, offset: 6795},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 230, col: 1, offset: 7055},
			expr: &choiceExpr{
				pos: position{line: 231, col: 5, offset: 7074},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 7074},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 7089},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 232, col: 5, offset: 7089},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 10, offset: 7094},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 234, col: 1, offset: 7184},
			expr: &actionExpr{
				pos: position{line: 235, col: 5, offset: 7204},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 235, col: 5, offset: 7204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 235, col: 5, offset: 7204},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 11, offset: 7210},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 26, offset: 7225},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 235, col: 31, offset: 7230},
								expr: &actionExpr{
									pos: position{line: 235, col: 32, offset: 7231},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 235, col: 32, offset: 7231},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 235, col: 32, offset: 7231},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 235, col: 35, offset: 7234},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 235, col: 39, offset: 7238},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 235, col: 42, offset: 7241},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 235, col: 47, offset: 7246},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 239, col: 1, offset: 7368},
			expr: &choiceExpr{
				pos: position{line: 240, col: 5, offset: 7390},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 7390},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 240, col: 5, offset: 7390},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 240, col: 5, offset: 7390},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 240, col: 10, offset: 7395},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 240, col: 15, offset: 7400},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 240, col: 18, offset: 7403},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 240, col: 22, offset: 7407},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 240, col: 25, offset: 7410},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 240, col: 33, offset: 7418},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 7528},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 243, col: 5, offset: 7528},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 13, offset: 7536},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 247, col: 1, offset: 7642},
			expr: &actionExpr{
				pos: position{line: 248, col: 5, offset: 7654},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 248, col: 5, offset: 7654},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 248, col: 5, offset: 7654},
							expr: &seqExpr{
								pos: position{line: 248, col: 7, offset: 7656},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 248, col: 7, offset: 7656},
										name: "NotReducers",
									},
									&ruleRefExpr{
										pos:  position{line: 248, col: 19, offset: 7668},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 248, col: 22, offset: 7671},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 27, offset: 7676},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 30, offset: 7679},
								name: "ReducerName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 42, offset: 7691},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 248, col: 45, offset: 7694},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 49, offset: 7698},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 52, offset: 7701},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 57, offset: 7706},
								expr: &ruleRefExpr{
									pos:  position{line: 248, col: 57, offset: 7706},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 64, offset: 7713},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 248, col: 67, offset: 7716},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 248, col: 71, offset: 7720},
							expr: &seqExpr{
								pos: position{line: 248, col: 73, offset: 7722},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 248, col: 73, offset: 7722},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 248, col: 76, offset: 7725},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 81, offset: 7730},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 87, offset: 7736},
								expr: &ruleRefExpr{
									pos:  position{line: 248, col: 87, offset: 7736},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerName",
			pos:  position{line: 256, col: 1, offset: 7932},
			expr: &choiceExpr{
				pos: position{line: 257, col: 5, offset: 7948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7948},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7967},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7980},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "NotReducers",
			pos:  position{line: 261, col: 1, offset: 7989},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 8005},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 262, col: 5, offset: 8005},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 263, col: 5, offset: 8015},
						val:        "match",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 265, col: 1, offset: 8024},
			expr: &actionExpr{
				pos: position{line: 265, col: 15, offset: 8038},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 265, col: 15, offset: 8038},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 265, col: 15, offset: 8038},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 265, col: 17, offset: 8040},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 25, offset: 8048},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 265, col: 27, offset: 8050},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 32, offset: 8055},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 267, col: 1, offset: 8091},
			expr: &actionExpr{
				pos: position{line: 268, col: 5, offset: 8104},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 268, col: 5, offset: 8104},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 268, col: 5, offset: 8104},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 11, offset: 8110},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 29, offset: 8128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 268, col: 34, offset: 8133},
								expr: &seqExpr{
									pos: position{line: 268, col: 35, offset: 8134},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 268, col: 35, offset: 8134},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 268, col: 38, offset: 8137},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 268, col: 42, offset: 8141},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 268, col: 45, offset: 8144},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 278, col: 1, offset: 8384},
			expr: &choiceExpr{
				pos: position{line: 279, col: 5, offset: 8397},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 8397},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 8410},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 8422},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 8434},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 8447},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 8460},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 8473},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 8486},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 8501},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 8514},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 8526},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 8541},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 291, col: 5, offset: 8554},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8567},
						name: "SqlProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 294, col: 1, offset: 8576},
			expr: &actionExpr{
				pos: position{line: 295, col: 5, offset: 8589},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 295, col: 5, offset: 8589},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 295, col: 5, offset: 8589},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 295, col: 13, offset: 8597},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 18, offset: 8602},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 295, col: 27, offset: 8611},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 295, col: 32, offset: 8616},
								expr: &actionExpr{
									pos: position{line: 295, col: 33, offset: 8617},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 295, col: 33, offset: 8617},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 295, col: 33, offset: 8617},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 295, col: 35, offset: 8619},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 295, col: 37, offset: 8621},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 309, col: 1, offset: 9040},
			expr: &actionExpr{
				pos: position{line: 309, col: 12, offset: 9051},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 309, col: 12, offset: 9051},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 309, col: 17, offset: 9056},
						expr: &actionExpr{
							pos: position{line: 309, col: 18, offset: 9057},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 309, col: 18, offset: 9057},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 309, col: 18, offset: 9057},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 309, col: 20, offset: 9059},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 309, col: 22, offset: 9061},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 311, col: 1, offset: 9117},
			expr: &choiceExpr{
				pos: position{line: 312, col: 5, offset: 9129},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 9129},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 312, col: 5, offset: 9129},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 313, col: 5, offset: 9204},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 313, col: 5, offset: 9204},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 313, col: 5, offset: 9204},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 313, col: 14, offset: 9213},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 313, col: 16, offset: 9215},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 313, col: 23, offset: 9222},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 313, col: 24, offset: 9223},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 313, col: 24, offset: 9223},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 313, col: 34, offset: 9233},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 315, col: 1, offset: 9347},
			expr: &actionExpr{
				pos: position{line: 316, col: 5, offset: 9359},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 316, col: 5, offset: 9359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 316, col: 5, offset: 9359},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 316, col: 12, offset: 9366},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 18, offset: 9372},
								expr: &actionExpr{
									pos: position{line: 316, col: 19, offset: 9373},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 316, col: 19, offset: 9373},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 316, col: 19, offset: 9373},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 316, col: 21, offset: 9375},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 316, col: 23, offset: 9377},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 47, offset: 9401},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 53, offset: 9407},
								expr: &seqExpr{
									pos: position{line: 316, col: 54, offset: 9408},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 316, col: 54, offset: 9408},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 316, col: 56, offset: 9410},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 67, offset: 9421},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 74, offset: 9428},
								expr: &actionExpr{
									pos: position{line: 316, col: 75, offset: 9429},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 316, col: 75, offset: 9429},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 316, col: 75, offset: 9429},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 316, col: 77, offset: 9431},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 316, col: 79, offset: 9433},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 330, col: 1, offset: 9784},
			expr: &actionExpr{
				pos: position{line: 331, col: 5, offset: 9796},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 331, col: 5, offset: 9796},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 9796},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 12, offset: 9803},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 14, offset: 9805},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 22, offset: 9813},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 335, col: 1, offset: 9915},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 9928},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 336, col: 5, offset: 9928},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 336, col: 5, offset: 9928},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 13, offset: 9936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 336, col: 15, offset: 9938},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 23, offset: 9946},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 340, col: 1, offset: 10049},
			expr: &actionExpr{
				pos: position{line: 341, col: 5, offset: 10062},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 341, col: 5, offset: 10062},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 5, offset: 10062},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 13, offset: 10070},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 15, offset: 10072},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 23, offset: 10080},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 345, col: 1, offset: 10178},
			expr: &choiceExpr{
				pos: position{line: 346, col: 5, offset: 10191},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 346, col: 5, offset: 10191},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 346, col: 5, offset: 10191},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 346, col: 5, offset: 10191},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 346, col: 13, offset: 10199},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 346, col: 15, offset: 10201},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 346, col: 21, offset: 10207},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 347, col: 5, offset: 10289},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 347, col: 5, offset: 10289},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 349, col: 1, offset: 10367},
			expr: &choiceExpr{
				pos: position{line: 350, col: 5, offset: 10380},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 350, col: 5, offset: 10380},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 350, col: 5, offset: 10380},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 350, col: 5, offset: 10380},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 350, col: 13, offset: 10388},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 350, col: 15, offset: 10390},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 350, col: 21, offset: 10396},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10478},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 351, col: 5, offset: 10478},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 353, col: 1, offset: 10556},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 10571},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 10571},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 5, offset: 10571},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 15, offset: 10581},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 354, col: 17, offset: 10583},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 20, offset: 10586},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 358, col: 1, offset: 10623},
			expr: &actionExpr{
				pos: position{line: 359, col: 5, offset: 10634},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 359, col: 5, offset: 10634},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 359, col: 10, offset: 10639},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 363, col: 1, offset: 10739},
			expr: &choiceExpr{
				pos: position{line: 364, col: 5, offset: 10752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 10752},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 364, col: 5, offset: 10752},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 364, col: 5, offset: 10752},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 364, col: 13, offset: 10760},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 364, col: 15, offset: 10762},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10853},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 367, col: 5, offset: 10853},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 371, col: 1, offset: 10945},
			expr: &actionExpr{
				pos: position{line: 372, col: 5, offset: 10957},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 372, col: 5, offset: 10957},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 5, offset: 10957},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 372, col: 12, offset: 10964},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 14, offset: 10966},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 22, offset: 10974},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 376, col: 1, offset: 11077},
			expr: &actionExpr{
				pos: position{line: 377, col: 5, offset: 11092},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 377, col: 5, offset: 11092},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 5, offset: 11092},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 377, col: 15, offset: 11102},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 17, offset: 11104},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 23, offset: 11110},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 34, offset: 11121},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 377, col: 39, offset: 11126},
								expr: &actionExpr{
									pos: position{line: 377, col: 40, offset: 11127},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 377, col: 40, offset: 11127},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 377, col: 40, offset: 11127},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 377, col: 43, offset: 11130},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 377, col: 47, offset: 11134},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 377, col: 50, offset: 11137},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 377, col: 53, offset: 11140},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 381, col: 1, offset: 11310},
			expr: &actionExpr{
				pos: position{line: 382, col: 5, offset: 11323},
				run: (*parser).callonFuseProc1,
				expr: &litMatcher{
					pos:        position{line: 382, col: 5, offset: 11323},
					val:        "fuse",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 386, col: 1, offset: 11399},
			expr: &choiceExpr{
				pos: position{line: 387, col: 5, offset: 11412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 387, col: 5, offset: 11412},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 387, col: 5, offset: 11412},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 387, col: 5, offset: 11412},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 387, col: 13, offset: 11420},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 387, col: 15, offset: 11422},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 387, col: 23, offset: 11430},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 387, col: 31, offset: 11438},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 387, col: 34, offset: 11441},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 387, col: 38, offset: 11445},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 387, col: 41, offset: 11448},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 387, col: 50, offset: 11457},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 387, col: 58, offset: 11465},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 387, col: 66, offset: 11473},
										expr: &seqExpr{
											pos: position{line: 387, col: 67, offset: 11474},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 387, col: 67, offset: 11474},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 387, col: 69, offset: 11476},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 5, offset: 11734},
						run: (*parser).callonJoinProc18,
						expr: &seqExpr{
							pos: position{line: 394, col: 5, offset: 11734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 394, col: 5, offset: 11734},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 394, col: 13, offset: 11742},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 394, col: 15, offset: 11744},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 394, col: 19, offset: 11748},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 394, col: 27, offset: 11756},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 394, col: 35, offset: 11764},
										expr: &seqExpr{
											pos: position{line: 394, col: 36, offset: 11765},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 394, col: 36, offset: 11765},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 394, col: 38, offset: 11767},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 402, col: 1, offset: 12013},
			expr: &choiceExpr{
				pos: position{line: 403, col: 5, offset: 12025},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 403, col: 5, offset: 12025},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 12034},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 404, col: 5, offset: 12034},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 404, col: 5, offset: 12034},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 404, col: 9, offset: 12038},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 404, col: 14, offset: 12043},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 404, col: 19, offset: 12048},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 408, col: 1, offset: 12099},
			expr: &ruleRefExpr{
				pos:  position{line: 408, col: 8, offset: 12106},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 410, col: 1, offset: 12117},
			expr: &ruleRefExpr{
				pos:  position{line: 410, col: 13, offset: 12129},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 412, col: 1, offset: 12135},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12150},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 413, col: 5, offset: 12150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 413, col: 5, offset: 12150},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 11, offset: 12156},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 413, col: 21, offset: 12166},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 413, col: 26, offset: 12171},
								expr: &seqExpr{
									pos: position{line: 413, col: 27, offset: 12172},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 413, col: 27, offset: 12172},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 413, col: 30, offset: 12175},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 413, col: 34, offset: 12179},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 413, col: 37, offset: 12182},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 423, col: 1, offset: 12381},
			expr: &actionExpr{
				pos: position{line: 424, col: 5, offset: 12391},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 424, col: 5, offset: 12391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 424, col: 5, offset: 12391},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 12397},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 424, col: 16, offset: 12402},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 424, col: 21, offset: 12407},
								expr: &seqExpr{
									pos: position{line: 424, col: 22, offset: 12408},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 424, col: 22, offset: 12408},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 424, col: 25, offset: 12411},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 424, col: 29, offset: 12415},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 424, col: 32, offset: 12418},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 434, col: 1, offset: 12612},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 12627},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 435, col: 5, offset: 12627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 435, col: 5, offset: 12627},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 9, offset: 12631},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 14, offset: 12636},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 435, col: 17, offset: 12639},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 21, offset: 12643},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 435, col: 24, offset: 12646},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 28, offset: 12650},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 437, col: 1, offset: 12739},
			expr: &ruleRefExpr{
				pos:  position{line: 437, col: 8, offset: 12746},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 439, col: 1, offset: 12763},
			expr: &choiceExpr{
				pos: position{line: 440, col: 5, offset: 12783},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 12783},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 12783},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 440, col: 5, offset: 12783},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 15, offset: 12793},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 29, offset: 12807},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 440, col: 32, offset: 12810},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 36, offset: 12814},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 440, col: 39, offset: 12817},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 50, offset: 12828},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 55, offset: 12833},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 440, col: 58, offset: 12836},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 62, offset: 12840},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 440, col: 65, offset: 12843},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 76, offset: 12854},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 5, offset: 13001},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 445, col: 1, offset: 13016},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13034},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13034},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 446, col: 5, offset: 13034},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 11, offset: 13040},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 447, col: 5, offset: 13059},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 447, col: 10, offset: 13064},
								expr: &actionExpr{
									pos: position{line: 447, col: 11, offset: 13065},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 447, col: 11, offset: 13065},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 447, col: 11, offset: 13065},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 447, col: 14, offset: 13068},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 447, col: 17, offset: 13071},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 447, col: 25, offset: 13079},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 447, col: 28, offset: 13082},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 447, col: 33, offset: 13087},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 451, col: 1, offset: 13205},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 13224},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 452, col: 5, offset: 13224},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 13224},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 11, offset: 13230},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 5, offset: 13254},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 10, offset: 13259},
								expr: &actionExpr{
									pos: position{line: 453, col: 11, offset: 13260},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 453, col: 11, offset: 13260},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 453, col: 11, offset: 13260},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 453, col: 14, offset: 13263},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 453, col: 17, offset: 13266},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 453, col: 26, offset: 13275},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 453, col: 29, offset: 13278},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 453, col: 34, offset: 13283},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 457, col: 1, offset: 13406},
			expr: &actionExpr{
				pos: position{line: 458, col: 5, offset: 13430},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 458, col: 5, offset: 13430},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 458, col: 5, offset: 13430},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 11, offset: 13436},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 5, offset: 13453},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 459, col: 10, offset: 13458},
								expr: &actionExpr{
									pos: position{line: 459, col: 11, offset: 13459},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 459, col: 11, offset: 13459},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 459, col: 11, offset: 13459},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 459, col: 14, offset: 13462},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 459, col: 19, offset: 13467},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 459, col: 38, offset: 13486},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 459, col: 41, offset: 13489},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 459, col: 46, offset: 13494},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 463, col: 1, offset: 13612},
			expr: &actionExpr{
				pos: position{line: 464, col: 5, offset: 13633},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 464, col: 6, offset: 13634},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 464, col: 6, offset: 13634},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 464, col: 12, offset: 13640},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 466, col: 1, offset: 13678},
			expr: &choiceExpr{
				pos: position{line: 467, col: 5, offset: 13701},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 467, col: 5, offset: 13701},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 468, col: 5, offset: 13722},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 468, col: 5, offset: 13722},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 470, col: 1, offset: 13759},
			expr: &actionExpr{
				pos: position{line: 471, col: 5, offset: 13776},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 471, col: 5, offset: 13776},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 13776},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 13782},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 472, col: 5, offset: 13799},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 472, col: 10, offset: 13804},
								expr: &actionExpr{
									pos: position{line: 472, col: 11, offset: 13805},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 472, col: 11, offset: 13805},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 472, col: 11, offset: 13805},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 14, offset: 13808},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 17, offset: 13811},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 472, col: 34, offset: 13828},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 37, offset: 13831},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 42, offset: 13836},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 476, col: 1, offset: 13952},
			expr: &actionExpr{
				pos: position{line: 476, col: 20, offset: 13971},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 476, col: 21, offset: 13972},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 476, col: 21, offset: 13972},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 476, col: 28, offset: 13979},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 476, col: 34, offset: 13985},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 476, col: 41, offset: 13992},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 478, col: 1, offset: 14029},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 14046},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 479, col: 5, offset: 14046},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 479, col: 5, offset: 14046},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 11, offset: 14052},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 480, col: 5, offset: 14075},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 480, col: 10, offset: 14080},
								expr: &actionExpr{
									pos: position{line: 480, col: 11, offset: 14081},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 480, col: 11, offset: 14081},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 480, col: 11, offset: 14081},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 480, col: 14, offset: 14084},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 480, col: 17, offset: 14087},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 480, col: 34, offset: 14104},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 480, col: 37, offset: 14107},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 480, col: 42, offset: 14112},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 484, col: 1, offset: 14234},
			expr: &actionExpr{
				pos: position{line: 484, col: 20, offset: 14253},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 484, col: 21, offset: 14254},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 484, col: 21, offset: 14254},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 484, col: 27, offset: 14260},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 486, col: 1, offset: 14297},
			expr: &actionExpr{
				pos: position{line: 487, col: 5, offset: 14320},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 487, col: 5, offset: 14320},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 14320},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 11, offset: 14326},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 488, col: 5, offset: 14338},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 488, col: 10, offset: 14343},
								expr: &actionExpr{
									pos: position{line: 488, col: 11, offset: 14344},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 488, col: 11, offset: 14344},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 488, col: 11, offset: 14344},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 488, col: 14, offset: 14347},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 17, offset: 14350},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 488, col: 40, offset: 14373},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 488, col: 43, offset: 14376},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 48, offset: 14381},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 492, col: 1, offset: 14492},
			expr: &actionExpr{
				pos: position{line: 492, col: 26, offset: 14517},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 492, col: 27, offset: 14518},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 492, col: 27, offset: 14518},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 492, col: 33, offset: 14524},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 494, col: 1, offset: 14561},
			expr: &choiceExpr{
				pos: position{line: 495, col: 5, offset: 14573},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 495, col: 5, offset: 14573},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 495, col: 5, offset: 14573},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 495, col: 5, offset: 14573},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 495, col: 9, offset: 14577},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 495, col: 12, offset: 14580},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 495, col: 14, offset: 14582},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 498, col: 5, offset: 14695},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 500, col: 1, offset: 14705},
			expr: &choiceExpr{
				pos: position{line: 501, col: 5, offset: 14718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 14718},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 501, col: 5, offset: 14718},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 501, col: 5, offset: 14718},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 501, col: 7, offset: 14720},
										name: "FuncExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 501, col: 16, offset: 14729},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 501, col: 20, offset: 14733},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 501, col: 24, offset: 14737},
										name: "PrimitiveType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 5, offset: 14846},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 506, col: 1, offset: 14856},
			expr: &actionExpr{
				pos: position{line: 507, col: 5, offset: 14874},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 507, col: 9, offset: 14878},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 507, col: 9, offset: 14878},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 507, col: 19, offset: 14888},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 507, col: 29, offset: 14898},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 507, col: 40, offset: 14909},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 507, col: 51, offset: 14920},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 508, col: 9, offset: 14937},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 508, col: 18, offset: 14946},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 508, col: 28, offset: 14956},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 508, col: 38, offset: 14966},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 509, col: 9, offset: 14982},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 509, col: 22, offset: 14995},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 510, col: 9, offset: 15010},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 511, col: 9, offset: 15028},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 511, col: 18, offset: 15037},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 511, col: 28, offset: 15047},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 511, col: 39, offset: 15058},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 9, offset: 15076},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 16, offset: 15083},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 9, offset: 15097},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 18, offset: 15106},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 513, col: 28, offset: 15116},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 515, col: 1, offset: 15157},
			expr: &choiceExpr{
				pos: position{line: 516, col: 5, offset: 15170},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 516, col: 5, offset: 15170},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 5, offset: 15185},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 518, col: 5, offset: 15199},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 518, col: 5, offset: 15199},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 518, col: 5, offset: 15199},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 518, col: 11, offset: 15205},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 518, col: 20, offset: 15214},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 518, col: 25, offset: 15219},
										expr: &ruleRefExpr{
											pos:  position{line: 518, col: 26, offset: 15220},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 521, col: 5, offset: 15291},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 5, offset: 15305},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 524, col: 1, offset: 15314},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 15328},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 15328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 5, offset: 15328},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 13, offset: 15336},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 525, col: 16, offset: 15339},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 525, col: 20, offset: 15343},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 25, offset: 15348},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 525, col: 39, offset: 15362},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 527, col: 1, offset: 15388},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 15403},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 528, col: 5, offset: 15403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 528, col: 5, offset: 15403},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 14, offset: 15412},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 528, col: 17, offset: 15415},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 21, offset: 15419},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 24, offset: 15422},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 29, offset: 15427},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 42, offset: 15440},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 528, col: 45, offset: 15443},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 528, col: 49, offset: 15447},
							label: "methods",
							expr: &zeroOrMoreExpr{
								pos: position{line: 528, col: 57, offset: 15455},
								expr: &actionExpr{
									pos: position{line: 528, col: 58, offset: 15456},
									run: (*parser).callonSelectExpr13,
									expr: &seqExpr{
										pos: position{line: 528, col: 58, offset: 15456},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 528, col: 58, offset: 15456},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 528, col: 61, offset: 15459},
												val:        ".",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 528, col: 65, offset: 15463},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 528, col: 68, offset: 15466},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 528, col: 70, offset: 15468},
													name: "Function",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 532, col: 1, offset: 15634},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15647},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15647},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 533, col: 5, offset: 15647},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 8, offset: 15650},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 23, offset: 15665},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 533, col: 26, offset: 15668},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 30, offset: 15672},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 33, offset: 15675},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 38, offset: 15680},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 51, offset: 15693},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 533, col: 54, offset: 15696},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 537, col: 1, offset: 15802},
			expr: &choiceExpr{
				pos: position{line: 538, col: 5, offset: 15819},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 15819},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 15819},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 538, col: 5, offset: 15819},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 11, offset: 15825},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 538, col: 16, offset: 15830},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 538, col: 21, offset: 15835},
										expr: &actionExpr{
											pos: position{line: 538, col: 22, offset: 15836},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 538, col: 22, offset: 15836},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 538, col: 22, offset: 15836},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 538, col: 25, offset: 15839},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 538, col: 29, offset: 15843},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 538, col: 32, offset: 15846},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 538, col: 34, offset: 15848},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 15960},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 541, col: 5, offset: 15960},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 543, col: 1, offset: 15996},
			expr: &choiceExpr{
				pos: position{line: 544, col: 5, offset: 16010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 544, col: 5, offset: 16010},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 544, col: 5, offset: 16010},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 544, col: 5, offset: 16010},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 544, col: 11, offset: 16016},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 544, col: 17, offset: 16022},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 544, col: 22, offset: 16027},
										expr: &ruleRefExpr{
											pos:  position{line: 544, col: 23, offset: 16028},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16099},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 547, col: 5, offset: 16099},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 547, col: 5, offset: 16099},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 11, offset: 16105},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 547, col: 22, offset: 16116},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 547, col: 27, offset: 16121},
										expr: &ruleRefExpr{
											pos:  position{line: 547, col: 28, offset: 16122},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 550, col: 5, offset: 16193},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 550, col: 5, offset: 16193},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 554, col: 1, offset: 16266},
			expr: &choiceExpr{
				pos: position{line: 555, col: 5, offset: 16276},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 16276},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 555, col: 5, offset: 16276},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 555, col: 5, offset: 16276},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 555, col: 9, offset: 16280},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 555, col: 15, offset: 16286},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 564, col: 5, offset: 16510},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 564, col: 5, offset: 16510},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 564, col: 5, offset: 16510},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 564, col: 9, offset: 16514},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 564, col: 13, offset: 16518},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 564, col: 18, offset: 16523},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 564, col: 23, offset: 16528},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 574, col: 1, offset: 16741},
			expr: &choiceExpr{
				pos: position{line: 575, col: 5, offset: 16751},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 16751},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 575, col: 5, offset: 16751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 575, col: 5, offset: 16751},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 575, col: 9, offset: 16755},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 14, offset: 16760},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 27, offset: 16773},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 575, col: 30, offset: 16776},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 34, offset: 16780},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 575, col: 37, offset: 16783},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 40, offset: 16786},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 575, col: 53, offset: 16799},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 581, col: 5, offset: 16974},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 581, col: 5, offset: 16974},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 581, col: 5, offset: 16974},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 581, col: 9, offset: 16978},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 581, col: 12, offset: 16981},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 581, col: 16, offset: 16985},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 581, col: 19, offset: 16988},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 581, col: 22, offset: 16991},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 581, col: 35, offset: 17004},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 587, col: 5, offset: 17211},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 587, col: 5, offset: 17211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 587, col: 5, offset: 17211},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 587, col: 9, offset: 17215},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 587, col: 14, offset: 17220},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 587, col: 27, offset: 17233},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 587, col: 30, offset: 17236},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 587, col: 34, offset: 17240},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 587, col: 37, offset: 17243},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17452},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 593, col: 5, offset: 17452},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 593, col: 5, offset: 17452},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 593, col: 9, offset: 17456},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 593, col: 14, offset: 17461},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 593, col: 19, offset: 17466},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 594, col: 5, offset: 17515},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 594, col: 5, offset: 17515},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 594, col: 5, offset: 17515},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 594, col: 9, offset: 17519},
									expr: &litMatcher{
										pos:        position{line: 594, col: 11, offset: 17521},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 594, col: 16, offset: 17526},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 19, offset: 17529},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 596, col: 1, offset: 17580},
			expr: &choiceExpr{
				pos: position{line: 597, col: 5, offset: 17592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 597, col: 5, offset: 17592},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 17604},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 598, col: 5, offset: 17604},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 598, col: 5, offset: 17604},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 598, col: 9, offset: 17608},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 598, col: 12, offset: 17611},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 598, col: 17, offset: 17616},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 598, col: 22, offset: 17621},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 598, col: 25, offset: 17624},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SqlProc",
			pos:  position{line: 603, col: 1, offset: 17675},
			expr: &actionExpr{
				pos: position{line: 604, col: 5, offset: 17687},
				run: (*parser).callonSqlProc1,
				expr: &seqExpr{
					pos: position{line: 604, col: 5, offset: 17687},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 604, col: 5, offset: 17687},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 15, offset: 17697},
								name: "SqlSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 5, offset: 17711},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 10, offset: 17716},
								name: "SqlFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17728},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 11, offset: 17734},
								name: "SqlJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 17747},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 11, offset: 17753},
								name: "SqlWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 608, col: 5, offset: 17766},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 13, offset: 17774},
								name: "SqlGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 17789},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 12, offset: 17796},
								name: "SqlHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 17810},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 13, offset: 17818},
								name: "SqlOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 5, offset: 17833},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 11, offset: 17839},
								name: "SqlLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SqlSelect",
			pos:  position{line: 640, col: 1, offset: 18486},
			expr: &choiceExpr{
				pos: position{line: 641, col: 5, offset: 18500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 18500},
						run: (*parser).callonSqlSelect2,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 18500},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 641, col: 5, offset: 18500},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 641, col: 12, offset: 18507},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 641, col: 14, offset: 18509},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 642, col: 5, offset: 18537},
						run: (*parser).callonSqlSelect7,
						expr: &seqExpr{
							pos: position{line: 642, col: 5, offset: 18537},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 642, col: 5, offset: 18537},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 642, col: 12, offset: 18544},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 642, col: 14, offset: 18546},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 642, col: 26, offset: 18558},
										name: "SqlAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SqlAssignment",
			pos:  position{line: 644, col: 1, offset: 18602},
			expr: &choiceExpr{
				pos: position{line: 645, col: 5, offset: 18620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 18620},
						run: (*parser).callonSqlAssignment2,
						expr: &seqExpr{
							pos: position{line: 645, col: 5, offset: 18620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 645, col: 5, offset: 18620},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 645, col: 9, offset: 18624},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 645, col: 14, offset: 18629},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 645, col: 16, offset: 18631},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 645, col: 19, offset: 18634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 645, col: 21, offset: 18636},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 645, col: 25, offset: 18640},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 5, offset: 18732},
						run: (*parser).callonSqlAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 646, col: 5, offset: 18732},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 10, offset: 18737},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SqlAssignments",
			pos:  position{line: 648, col: 1, offset: 18827},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 18846},
				run: (*parser).callonSqlAssignments1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 18846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 18846},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 11, offset: 18852},
								name: "SqlAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 25, offset: 18866},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 649, col: 30, offset: 18871},
								expr: &actionExpr{
									pos: position{line: 649, col: 31, offset: 18872},
									run: (*parser).callonSqlAssignments7,
									expr: &seqExpr{
										pos: position{line: 649, col: 31, offset: 18872},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 649, col: 31, offset: 18872},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 649, col: 34, offset: 18875},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 649, col: 38, offset: 18879},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 649, col: 41, offset: 18882},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 649, col: 46, offset: 18887},
													name: "SqlAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SqlFrom",
			pos:  position{line: 653, col: 1, offset: 19008},
			expr: &choiceExpr{
				pos: position{line: 654, col: 5, offset: 19020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 654, col: 5, offset: 19020},
						run: (*parser).callonSqlFrom2,
						expr: &seqExpr{
							pos: position{line: 654, col: 5, offset: 19020},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 654, col: 5, offset: 19020},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 654, col: 7, offset: 19022},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 654, col: 12, offset: 19027},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 654, col: 14, offset: 19029},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 654, col: 20, offset: 19035},
										name: "SqlTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 654, col: 29, offset: 19044},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 654, col: 35, offset: 19050},
										name: "SqlAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 657, col: 5, offset: 19144},
						run: (*parser).callonSqlFrom11,
						expr: &litMatcher{
							pos:        position{line: 657, col: 5, offset: 19144},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlAlias",
			pos:  position{line: 659, col: 1, offset: 19168},
			expr: &choiceExpr{
				pos: position{line: 660, col: 5, offset: 19181},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 660, col: 5, offset: 19181},
						run: (*parser).callonSqlAlias2,
						expr: &seqExpr{
							pos: position{line: 660, col: 5, offset: 19181},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 660, col: 5, offset: 19181},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 660, col: 7, offset: 19183},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 660, col: 10, offset: 19186},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 661, col: 5, offset: 19214},
						run: (*parser).callonSqlAlias7,
						expr: &litMatcher{
							pos:        position{line: 661, col: 5, offset: 19214},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlTable",
			pos:  position{line: 667, col: 1, offset: 19561},
			expr: &ruleRefExpr{
				pos:  position{line: 668, col: 5, offset: 19574},
				name: "Expr",
			},
		},
		{
			name: "SqlJoins",
			pos:  position{line: 670, col: 1, offset: 19580},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 19593},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 19593},
						run: (*parser).callonSqlJoins2,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 19593},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 671, col: 5, offset: 19593},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 19599},
										name: "SqlJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 671, col: 19, offset: 19607},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 671, col: 24, offset: 19612},
										expr: &actionExpr{
											pos: position{line: 671, col: 25, offset: 19613},
											run: (*parser).callonSqlJoins8,
											expr: &seqExpr{
												pos: position{line: 671, col: 25, offset: 19613},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 671, col: 25, offset: 19613},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 671, col: 28, offset: 19616},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 671, col: 32, offset: 19620},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 671, col: 35, offset: 19623},
														label: "join",
														expr: &ruleRefExpr{
															pos:  position{line: 671, col: 40, offset: 19628},
															name: "SqlJoin",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19746},
						run: (*parser).callonSqlJoins15,
						expr: &litMatcher{
							pos:        position{line: 674, col: 5, offset: 19746},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlJoin",
			pos:  position{line: 678, col: 1, offset: 19893},
			expr: &actionExpr{
				pos: position{line: 679, col: 5, offset: 19905},
				run: (*parser).callonSqlJoin1,
				expr: &seqExpr{
					pos: position{line: 679, col: 5, offset: 19905},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 679, col: 5, offset: 19905},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 7, offset: 19907},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 12, offset: 19912},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 14, offset: 19914},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 20, offset: 19920},
								name: "SqlTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 29, offset: 19929},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 35, offset: 19935},
								name: "SqlAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 44, offset: 19944},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 46, offset: 19946},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 49, offset: 19949},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 51, offset: 19951},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 59, offset: 19959},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 67, offset: 19967},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 679, col: 70, offset: 19970},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 74, offset: 19974},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 77, offset: 19977},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 86, offset: 19986},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SqlWhere",
			pos:  position{line: 702, col: 1, offset: 20421},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 20434},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 20434},
						run: (*parser).callonSqlWhere2,
						expr: &seqExpr{
							pos: position{line: 703, col: 5, offset: 20434},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 703, col: 5, offset: 20434},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 7, offset: 20436},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 13, offset: 20442},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 703, col: 15, offset: 20444},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 703, col: 20, offset: 20449},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 20488},
						run: (*parser).callonSqlWhere9,
						expr: &litMatcher{
							pos:        position{line: 704, col: 5, offset: 20488},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlGroupBy",
			pos:  position{line: 706, col: 1, offset: 20512},
			expr: &choiceExpr{
				pos: position{line: 707, col: 5, offset: 20527},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20527},
						run: (*parser).callonSqlGroupBy2,
						expr: &seqExpr{
							pos: position{line: 707, col: 5, offset: 20527},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 707, col: 5, offset: 20527},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 7, offset: 20529},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 13, offset: 20535},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 15, offset: 20537},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 18, offset: 20540},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 707, col: 20, offset: 20542},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 28, offset: 20550},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 20589},
						run: (*parser).callonSqlGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 708, col: 5, offset: 20589},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlHaving",
			pos:  position{line: 710, col: 1, offset: 20613},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20627},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20627},
						run: (*parser).callonSqlHaving2,
						expr: &seqExpr{
							pos: position{line: 711, col: 5, offset: 20627},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 711, col: 5, offset: 20627},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 711, col: 7, offset: 20629},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 711, col: 14, offset: 20636},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 711, col: 16, offset: 20638},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 21, offset: 20643},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20682},
						run: (*parser).callonSqlHaving9,
						expr: &litMatcher{
							pos:        position{line: 712, col: 5, offset: 20682},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlOrderBy",
			pos:  position{line: 714, col: 1, offset: 20706},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20721},
						run: (*parser).callonSqlOrderBy2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 20721},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 715, col: 5, offset: 20721},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 7, offset: 20723},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 13, offset: 20729},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 15, offset: 20731},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 18, offset: 20734},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 715, col: 20, offset: 20736},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 25, offset: 20741},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 715, col: 31, offset: 20747},
									label: "direction",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 41, offset: 20757},
										name: "SqlDirection",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 20860},
						run: (*parser).callonSqlOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 718, col: 5, offset: 20860},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlDirection",
			pos:  position{line: 720, col: 1, offset: 20884},
			expr: &choiceExpr{
				pos: position{line: 721, col: 5, offset: 20901},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 20901},
						run: (*parser).callonSqlDirection2,
						expr: &litMatcher{
							pos:        position{line: 721, col: 5, offset: 20901},
							val:        "desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 20935},
						run: (*parser).callonSqlDirection4,
						expr: &choiceExpr{
							pos: position{line: 722, col: 6, offset: 20936},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 722, col: 6, offset: 20936},
									val:        "asc",
									ignoreCase: true,
								},
								&litMatcher{
									pos:        position{line: 722, col: 15, offset: 20945},
									val:        "",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SqlLimit",
			pos:  position{line: 724, col: 1, offset: 20972},
			expr: &choiceExpr{
				pos: position{line: 725, col: 5, offset: 20985},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 725, col: 5, offset: 20985},
						run: (*parser).callonSqlLimit2,
						expr: &seqExpr{
							pos: position{line: 725, col: 5, offset: 20985},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 725, col: 5, offset: 20985},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 725, col: 7, offset: 20987},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 725, col: 13, offset: 20993},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 725, col: 15, offset: 20995},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 21, offset: 21001},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 726, col: 5, offset: 21032},
						run: (*parser).callonSqlLimit9,
						expr: &litMatcher{
							pos:        position{line: 726, col: 5, offset: 21032},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 728, col: 1, offset: 21054},
			expr: &actionExpr{
				pos: position{line: 728, col: 10, offset: 21063},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 728, col: 10, offset: 21063},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 729, col: 1, offset: 21098},
			expr: &actionExpr{
				pos: position{line: 729, col: 6, offset: 21103},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 729, col: 6, offset: 21103},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 730, col: 1, offset: 21130},
			expr: &actionExpr{
				pos: position{line: 730, col: 8, offset: 21137},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 730, col: 8, offset: 21137},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 731, col: 1, offset: 21168},
			expr: &actionExpr{
				pos: position{line: 731, col: 8, offset: 21175},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 731, col: 8, offset: 21175},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 732, col: 1, offset: 21206},
			expr: &actionExpr{
				pos: position{line: 732, col: 9, offset: 21214},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 732, col: 9, offset: 21214},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 733, col: 1, offset: 21247},
			expr: &actionExpr{
				pos: position{line: 733, col: 9, offset: 21255},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 733, col: 9, offset: 21255},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 734, col: 1, offset: 21288},
			expr: &ruleRefExpr{
				pos:  position{line: 734, col: 6, offset: 21293},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 735, col: 1, offset: 21301},
			expr: &actionExpr{
				pos: position{line: 735, col: 10, offset: 21310},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 735, col: 10, offset: 21310},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 736, col: 1, offset: 21345},
			expr: &actionExpr{
				pos: position{line: 736, col: 9, offset: 21353},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 736, col: 9, offset: 21353},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 737, col: 1, offset: 21386},
			expr: &actionExpr{
				pos: position{line: 737, col: 6, offset: 21391},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 737, col: 6, offset: 21391},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 738, col: 1, offset: 21418},
			expr: &actionExpr{
				pos: position{line: 738, col: 9, offset: 21426},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 738, col: 9, offset: 21426},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SqlTokenSentinels",
			pos:  position{line: 740, col: 1, offset: 21460},
			expr: &choiceExpr{
				pos: position{line: 741, col: 5, offset: 21482},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 741, col: 5, offset: 21482},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 14, offset: 21491},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 19, offset: 21496},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 27, offset: 21504},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 35, offset: 21512},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 43, offset: 21520},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 52, offset: 21529},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 60, offset: 21537},
						name: "LIMIT",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 745, col: 1, offset: 21566},
			expr: &choiceExpr{
				pos: position{line: 746, col: 5, offset: 21578},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21578},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 747, col: 5, offset: 21596},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 748, col: 5, offset: 21614},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 749, col: 5, offset: 21632},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 21651},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 751, col: 5, offset: 21668},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 752, col: 5, offset: 21687},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 753, col: 5, offset: 21706},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 755, col: 1, offset: 21719},
			expr: &actionExpr{
				pos: position{line: 756, col: 5, offset: 21737},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 756, col: 5, offset: 21737},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 756, col: 7, offset: 21739},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 760, col: 1, offset: 21849},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 21867},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 761, col: 5, offset: 21867},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 761, col: 5, offset: 21867},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 7, offset: 21869},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 761, col: 14, offset: 21876},
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 15, offset: 21877},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 765, col: 1, offset: 21987},
			expr: &choiceExpr{
				pos: position{line: 766, col: 5, offset: 22005},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 22005},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 766, col: 5, offset: 22005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 766, col: 5, offset: 22005},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 7, offset: 22007},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 766, col: 14, offset: 22014},
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 15, offset: 22015},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22127},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 769, col: 5, offset: 22127},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 7, offset: 22129},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 773, col: 1, offset: 22230},
			expr: &choiceExpr{
				pos: position{line: 774, col: 5, offset: 22249},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 774, col: 5, offset: 22249},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 774, col: 5, offset: 22249},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 774, col: 5, offset: 22249},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 774, col: 7, offset: 22251},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 774, col: 11, offset: 22255},
									expr: &ruleRefExpr{
										pos:  position{line: 774, col: 12, offset: 22256},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 777, col: 5, offset: 22367},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 777, col: 5, offset: 22367},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 7, offset: 22369},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 781, col: 1, offset: 22465},
			expr: &actionExpr{
				pos: position{line: 782, col: 5, offset: 22482},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 782, col: 5, offset: 22482},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 782, col: 7, offset: 22484},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 786, col: 1, offset: 22594},
			expr: &actionExpr{
				pos: position{line: 787, col: 5, offset: 22613},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 787, col: 5, offset: 22613},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 787, col: 7, offset: 22615},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 791, col: 1, offset: 22721},
			expr: &choiceExpr{
				pos: position{line: 792, col: 5, offset: 22740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 792, col: 5, offset: 22740},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 792, col: 5, offset: 22740},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 793, col: 5, offset: 22850},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 793, col: 5, offset: 22850},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 795, col: 1, offset: 22958},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 22974},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 796, col: 5, offset: 22974},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 798, col: 1, offset: 23077},
			expr: &choiceExpr{
				pos: position{line: 799, col: 5, offset: 23095},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 5, offset: 23095},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 24, offset: 23114},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 801, col: 1, offset: 23132},
			expr: &actionExpr{
				pos: position{line: 801, col: 12, offset: 23143},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 801, col: 12, offset: 23143},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 802, col: 1, offset: 23172},
			expr: &actionExpr{
				pos: position{line: 802, col: 11, offset: 23182},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 802, col: 11, offset: 23182},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 803, col: 1, offset: 23209},
			expr: &actionExpr{
				pos: position{line: 803, col: 11, offset: 23219},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 803, col: 11, offset: 23219},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 804, col: 1, offset: 23246},
			expr: &actionExpr{
				pos: position{line: 804, col: 12, offset: 23257},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 804, col: 12, offset: 23257},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 805, col: 1, offset: 23286},
			expr: &actionExpr{
				pos: position{line: 805, col: 11, offset: 23296},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 805, col: 11, offset: 23296},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 807, col: 1, offset: 23324},
			expr: &charClassMatcher{
				pos:        position{line: 807, col: 19, offset: 23342},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 808, col: 1, offset: 23353},
			expr: &choiceExpr{
				pos: position{line: 808, col: 18, offset: 23370},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 808, col: 18, offset: 23370},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 808, col: 36, offset: 23388},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 810, col: 1, offset: 23395},
			expr: &actionExpr{
				pos: position{line: 811, col: 5, offset: 23410},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 811, col: 5, offset: 23410},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 811, col: 8, offset: 23413},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 817, col: 1, offset: 23698},
			expr: &choiceExpr{
				pos: position{line: 818, col: 5, offset: 23717},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 23717},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 23717},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 818, col: 5, offset: 23717},
									expr: &seqExpr{
										pos: position{line: 818, col: 7, offset: 23719},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 818, col: 7, offset: 23719},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 818, col: 15, offset: 23727},
												expr: &ruleRefExpr{
													pos:  position{line: 818, col: 16, offset: 23728},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 818, col: 32, offset: 23744},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 818, col: 48, offset: 23760},
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 48, offset: 23760},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 23812},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 819, col: 5, offset: 23812},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 23851},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 23851},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 820, col: 5, offset: 23851},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 820, col: 10, offset: 23856},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 13, offset: 23859},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 23890},
						run: (*parser).callonIdentifierName19,
						expr: &seqExpr{
							pos: position{line: 821, col: 5, offset: 23890},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 821, col: 5, offset: 23890},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 821, col: 8, offset: 23893},
										name: "SqlTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 821, col: 26, offset: 23911},
									expr: &seqExpr{
										pos: position{line: 821, col: 28, offset: 23913},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 821, col: 28, offset: 23913},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 821, col: 31, offset: 23916},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 823, col: 1, offset: 23941},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 23953},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 824, col: 5, offset: 23953},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 825, col: 5, offset: 23972},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 826, col: 5, offset: 23988},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 828, col: 1, offset: 24001},
			expr: &choiceExpr{
				pos: position{line: 829, col: 5, offset: 24014},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 829, col: 5, offset: 24014},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 830, col: 5, offset: 24026},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 831, col: 5, offset: 24038},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 832, col: 5, offset: 24048},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 832, col: 5, offset: 24048},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 11, offset: 24054},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 832, col: 13, offset: 24056},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 19, offset: 24062},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 21, offset: 24064},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 833, col: 5, offset: 24076},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 834, col: 5, offset: 24085},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 836, col: 1, offset: 24092},
			expr: &choiceExpr{
				pos: position{line: 837, col: 5, offset: 24109},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 837, col: 5, offset: 24109},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 838, col: 5, offset: 24123},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 839, col: 5, offset: 24136},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 840, col: 5, offset: 24147},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 841, col: 5, offset: 24157},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 843, col: 1, offset: 24162},
			expr: &choiceExpr{
				pos: position{line: 844, col: 5, offset: 24179},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 844, col: 5, offset: 24179},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 845, col: 5, offset: 24193},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 846, col: 5, offset: 24206},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 847, col: 5, offset: 24217},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 848, col: 5, offset: 24227},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 850, col: 1, offset: 24232},
			expr: &choiceExpr{
				pos: position{line: 851, col: 5, offset: 24247},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 851, col: 5, offset: 24247},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 852, col: 5, offset: 24259},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 853, col: 5, offset: 24269},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 854, col: 5, offset: 24278},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 855, col: 5, offset: 24286},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 857, col: 1, offset: 24294},
			expr: &choiceExpr{
				pos: position{line: 857, col: 13, offset: 24306},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 857, col: 13, offset: 24306},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 857, col: 20, offset: 24313},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 857, col: 26, offset: 24319},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 858, col: 1, offset: 24323},
			expr: &choiceExpr{
				pos: position{line: 858, col: 14, offset: 24336},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 858, col: 14, offset: 24336},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 858, col: 22, offset: 24344},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 858, col: 29, offset: 24351},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 858, col: 35, offset: 24357},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 858, col: 40, offset: 24362},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 860, col: 1, offset: 24367},
			expr: &choiceExpr{
				pos: position{line: 861, col: 5, offset: 24379},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 24379},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 861, col: 5, offset: 24379},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 862, col: 5, offset: 24465},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 862, col: 5, offset: 24465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 862, col: 5, offset: 24465},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 9, offset: 24469},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 14, offset: 24474},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 17, offset: 24477},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 864, col: 1, offset: 24566},
			expr: &choiceExpr{
				pos: position{line: 865, col: 5, offset: 24578},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 24578},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 865, col: 5, offset: 24578},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24665},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 24665},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 24665},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 9, offset: 24669},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 14, offset: 24674},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 17, offset: 24677},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 868, col: 1, offset: 24775},
			expr: &choiceExpr{
				pos: position{line: 869, col: 5, offset: 24785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 24785},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 869, col: 5, offset: 24785},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 24872},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 870, col: 5, offset: 24872},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 870, col: 5, offset: 24872},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 9, offset: 24876},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 870, col: 14, offset: 24881},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 870, col: 17, offset: 24884},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 872, col: 1, offset: 24982},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 24991},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 24991},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 873, col: 5, offset: 24991},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 25080},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 874, col: 5, offset: 25080},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 874, col: 5, offset: 25080},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 9, offset: 25084},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 874, col: 14, offset: 25089},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 874, col: 17, offset: 25092},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 876, col: 1, offset: 25194},
			expr: &choiceExpr{
				pos: position{line: 877, col: 5, offset: 25204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 25204},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 877, col: 5, offset: 25204},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 25296},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 878, col: 5, offset: 25296},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 878, col: 5, offset: 25296},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 9, offset: 25300},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 878, col: 14, offset: 25305},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 878, col: 17, offset: 25308},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 881, col: 1, offset: 25439},
			expr: &actionExpr{
				pos: position{line: 882, col: 5, offset: 25446},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 882, col: 5, offset: 25446},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 882, col: 5, offset: 25446},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 882, col: 10, offset: 25451},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 14, offset: 25455},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 882, col: 19, offset: 25460},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 23, offset: 25464},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 882, col: 28, offset: 25469},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 32, offset: 25473},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 884, col: 1, offset: 25510},
			expr: &actionExpr{
				pos: position{line: 885, col: 5, offset: 25518},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 885, col: 5, offset: 25518},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 885, col: 5, offset: 25518},
							expr: &seqExpr{
								pos: position{line: 885, col: 8, offset: 25521},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 885, col: 8, offset: 25521},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 885, col: 12, offset: 25525},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 16, offset: 25529},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 885, col: 20, offset: 25533},
										expr: &choiceExpr{
											pos: position{line: 885, col: 22, offset: 25535},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 885, col: 22, offset: 25535},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 885, col: 33, offset: 25546},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 39, offset: 25552},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 41, offset: 25554},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 889, col: 1, offset: 25718},
			expr: &choiceExpr{
				pos: position{line: 890, col: 5, offset: 25736},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 890, col: 5, offset: 25736},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 890, col: 5, offset: 25736},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 890, col: 5, offset: 25736},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 890, col: 7, offset: 25738},
										expr: &ruleRefExpr{
											pos:  position{line: 890, col: 7, offset: 25738},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 890, col: 17, offset: 25748},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 890, col: 19, offset: 25750},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 25814},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 893, col: 5, offset: 25814},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 893, col: 5, offset: 25814},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 893, col: 7, offset: 25816},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 893, col: 11, offset: 25820},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 893, col: 13, offset: 25822},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 13, offset: 25822},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 893, col: 23, offset: 25832},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 893, col: 28, offset: 25837},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 893, col: 30, offset: 25839},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 30, offset: 25839},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 893, col: 40, offset: 25849},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 893, col: 42, offset: 25851},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25950},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25950},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 896, col: 5, offset: 25950},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 896, col: 10, offset: 25955},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 896, col: 12, offset: 25957},
										expr: &ruleRefExpr{
											pos:  position{line: 896, col: 12, offset: 25957},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 896, col: 22, offset: 25967},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 24, offset: 25969},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 26040},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 899, col: 5, offset: 26040},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 899, col: 5, offset: 26040},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 7, offset: 26042},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 899, col: 11, offset: 26046},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 899, col: 13, offset: 26048},
										expr: &ruleRefExpr{
											pos:  position{line: 899, col: 13, offset: 26048},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 23, offset: 26058},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 902, col: 5, offset: 26126},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 902, col: 5, offset: 26126},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 906, col: 1, offset: 26163},
			expr: &choiceExpr{
				pos: position{line: 907, col: 5, offset: 26175},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 907, col: 5, offset: 26175},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 908, col: 5, offset: 26182},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 910, col: 1, offset: 26187},
			expr: &actionExpr{
				pos: position{line: 910, col: 12, offset: 26198},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 910, col: 12, offset: 26198},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 910, col: 12, offset: 26198},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 910, col: 16, offset: 26202},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 18, offset: 26204},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 911, col: 1, offset: 26241},
			expr: &actionExpr{
				pos: position{line: 911, col: 12, offset: 26252},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 911, col: 12, offset: 26252},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 911, col: 12, offset: 26252},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 911, col: 14, offset: 26254},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 911, col: 18, offset: 26258},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 913, col: 1, offset: 26296},
			expr: &actionExpr{
				pos: position{line: 914, col: 5, offset: 26307},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 914, col: 5, offset: 26307},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 914, col: 5, offset: 26307},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 7, offset: 26309},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 914, col: 10, offset: 26312},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 914, col: 14, offset: 26316},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 16, offset: 26318},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 918, col: 1, offset: 26391},
			expr: &actionExpr{
				pos: position{line: 919, col: 5, offset: 26402},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 919, col: 5, offset: 26402},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 919, col: 5, offset: 26402},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 7, offset: 26404},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 919, col: 11, offset: 26408},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 919, col: 15, offset: 26412},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 17, offset: 26414},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 923, col: 1, offset: 26477},
			expr: &actionExpr{
				pos: position{line: 924, col: 4, offset: 26485},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 924, col: 4, offset: 26485},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 924, col: 6, offset: 26487},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 926, col: 1, offset: 26527},
			expr: &choiceExpr{
				pos: position{line: 927, col: 5, offset: 26541},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 927, col: 5, offset: 26541},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 928, col: 5, offset: 26556},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 930, col: 1, offset: 26572},
			expr: &actionExpr{
				pos: position{line: 930, col: 14, offset: 26585},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 930, col: 14, offset: 26585},
					expr: &charClassMatcher{
						pos:        position{line: 930, col: 14, offset: 26585},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 932, col: 1, offset: 26624},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 26643},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 26643},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 933, col: 5, offset: 26643},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 9, offset: 26647},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 935, col: 1, offset: 26690},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 26706},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 26706},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 26706},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 936, col: 5, offset: 26706},
									expr: &litMatcher{
										pos:        position{line: 936, col: 5, offset: 26706},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 936, col: 10, offset: 26711},
									expr: &charClassMatcher{
										pos:        position{line: 936, col: 10, offset: 26711},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 17, offset: 26718},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 936, col: 21, offset: 26722},
									expr: &charClassMatcher{
										pos:        position{line: 936, col: 21, offset: 26722},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 936, col: 28, offset: 26729},
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 28, offset: 26729},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 26788},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 26788},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 939, col: 5, offset: 26788},
									expr: &litMatcher{
										pos:        position{line: 939, col: 5, offset: 26788},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 10, offset: 26793},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 939, col: 14, offset: 26797},
									expr: &charClassMatcher{
										pos:        position{line: 939, col: 14, offset: 26797},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 939, col: 21, offset: 26804},
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 21, offset: 26804},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 943, col: 1, offset: 26860},
			expr: &seqExpr{
				pos: position{line: 943, col: 16, offset: 26875},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 943, col: 16, offset: 26875},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 943, col: 21, offset: 26880},
						expr: &charClassMatcher{
							pos:        position{line: 943, col: 21, offset: 26880},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 27, offset: 26886},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 945, col: 1, offset: 26898},
			expr: &actionExpr{
				pos: position{line: 945, col: 7, offset: 26904},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 945, col: 7, offset: 26904},
					expr: &ruleRefExpr{
						pos:  position{line: 945, col: 7, offset: 26904},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 947, col: 1, offset: 26946},
			expr: &charClassMatcher{
				pos:        position{line: 947, col: 12, offset: 26957},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 950, col: 1, offset: 26971},
			expr: &choiceExpr{
				pos: position{line: 951, col: 5, offset: 26988},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 951, col: 5, offset: 26988},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 951, col: 5, offset: 26988},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 951, col: 5, offset: 26988},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 951, col: 9, offset: 26992},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 951, col: 11, offset: 26994},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 11, offset: 26994},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 951, col: 29, offset: 27012},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 27049},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 952, col: 5, offset: 27049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 952, col: 5, offset: 27049},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 952, col: 9, offset: 27053},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 952, col: 11, offset: 27055},
										expr: &ruleRefExpr{
											pos:  position{line: 952, col: 11, offset: 27055},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 952, col: 29, offset: 27073},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 954, col: 1, offset: 27107},
			expr: &choiceExpr{
				pos: position{line: 955, col: 5, offset: 27128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 955, col: 5, offset: 27128},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 955, col: 5, offset: 27128},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 955, col: 5, offset: 27128},
									expr: &choiceExpr{
										pos: position{line: 955, col: 7, offset: 27130},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 955, col: 7, offset: 27130},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 955, col: 13, offset: 27136},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 955, col: 26, offset: 27149,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 27186},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 27186},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 956, col: 5, offset: 27186},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 956, col: 10, offset: 27191},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 12, offset: 27193},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 958, col: 1, offset: 27227},
			expr: &actionExpr{
				pos: position{line: 959, col: 5, offset: 27239},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 959, col: 5, offset: 27239},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 959, col: 5, offset: 27239},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 10, offset: 27244},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 959, col: 23, offset: 27257},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 959, col: 28, offset: 27262},
								expr: &ruleRefExpr{
									pos:  position{line: 959, col: 28, offset: 27262},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 961, col: 1, offset: 27324},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 27341},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 27341},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 962, col: 5, offset: 27341},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 963, col: 5, offset: 27393},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 965, col: 1, offset: 27405},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 27421},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 966, col: 5, offset: 27421},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 967, col: 5, offset: 27438},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 969, col: 1, offset: 27445},
			expr: &actionExpr{
				pos: position{line: 969, col: 14, offset: 27458},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 969, col: 14, offset: 27458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 969, col: 14, offset: 27458},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 969, col: 19, offset: 27463},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 969, col: 22, offset: 27466},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 969, col: 22, offset: 27466},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 969, col: 38, offset: 27482},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 971, col: 1, offset: 27518},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 27539},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 27539},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 27539},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 972, col: 5, offset: 27539},
									expr: &choiceExpr{
										pos: position{line: 972, col: 7, offset: 27541},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 972, col: 7, offset: 27541},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 13, offset: 27547},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 972, col: 26, offset: 27560,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 27597},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 27597},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 973, col: 5, offset: 27597},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 973, col: 10, offset: 27602},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 12, offset: 27604},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 975, col: 1, offset: 27638},
			expr: &choiceExpr{
				pos: position{line: 976, col: 5, offset: 27657},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 27657},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 27657},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 976, col: 5, offset: 27657},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 976, col: 9, offset: 27661},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 976, col: 18, offset: 27670},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 27721},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 978, col: 5, offset: 27742},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 980, col: 1, offset: 27757},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 27778},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 27778},
						run: (*parser).callonSingleCharEscape2,
						expr: &litMatcher{
							pos:        position{line: 981, col: 5, offset: 27778},
							val:        "'",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 27805},
						run: (*parser).callonSingleCharEscape4,
						expr: &litMatcher{
							pos:        position{line: 982, col: 5, offset: 27805},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 983, col: 5, offset: 27832},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 983, col: 5, offset: 27832},
							val:        "\\",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 984, col: 5, offset: 27861},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 984, col: 5, offset: 27861},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 27890},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 985, col: 5, offset: 27890},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 27919},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 986, col: 5, offset: 27919},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 27948},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 987, col: 5, offset: 27948},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 988, col: 5, offset: 27977},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 988, col: 5, offset: 27977},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 28006},
						run: (*parser).callonSingleCharEscape18,
						expr: &litMatcher{
							pos:        position{line: 989, col: 5, offset: 28006},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 991, col: 1, offset: 28032},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 28050},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 28050},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 992, col: 5, offset: 28050},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 28078},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 993, col: 5, offset: 28078},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 994, col: 5, offset: 28108},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 996, col: 1, offset: 28114},
			expr: &choiceExpr{
				pos: position{line: 997, col: 5, offset: 28132},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 997, col: 5, offset: 28132},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 997, col: 5, offset: 28132},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 997, col: 5, offset: 28132},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 997, col: 9, offset: 28136},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 997, col: 16, offset: 28143},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 997, col: 16, offset: 28143},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 997, col: 25, offset: 28152},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 997, col: 34, offset: 28161},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 997, col: 43, offset: 28170},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 28233},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1000, col: 5, offset: 28233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1000, col: 5, offset: 28233},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1000, col: 9, offset: 28237},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 13, offset: 28241},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1000, col: 20, offset: 28248},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1000, col: 20, offset: 28248},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1000, col: 29, offset: 28257},
												expr: &ruleRefExpr{
													pos:  position{line: 1000, col: 29, offset: 28257},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1000, col: 39, offset: 28267},
												expr: &ruleRefExpr{
													pos:  position{line: 1000, col: 39, offset: 28267},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1000, col: 49, offset: 28277},
												expr: &ruleRefExpr{
													pos:  position{line: 1000, col: 49, offset: 28277},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1000, col: 59, offset: 28287},
												expr: &ruleRefExpr{
													pos:  position{line: 1000, col: 59, offset: 28287},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1000, col: 69, offset: 28297},
												expr: &ruleRefExpr{
													pos:  position{line: 1000, col: 69, offset: 28297},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 80, offset: 28308},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1004, col: 1, offset: 28362},
			expr: &actionExpr{
				pos: position{line: 1005, col: 5, offset: 28373},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 5, offset: 28373},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1005, col: 5, offset: 28373},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 9, offset: 28377},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 14, offset: 28382},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1005, col: 25, offset: 28393},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1007, col: 1, offset: 28419},
			expr: &actionExpr{
				pos: position{line: 1008, col: 5, offset: 28434},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1008, col: 5, offset: 28434},
					expr: &choiceExpr{
						pos: position{line: 1008, col: 6, offset: 28435},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1008, col: 6, offset: 28435},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1008, col: 13, offset: 28442},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1010, col: 1, offset: 28482},
			expr: &charClassMatcher{
				pos:        position{line: 1011, col: 5, offset: 28498},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1013, col: 1, offset: 28513},
			expr: &oneOrMoreExpr{
				pos: position{line: 1013, col: 6, offset: 28518},
				expr: &ruleRefExpr{
					pos:  position{line: 1013, col: 6, offset: 28518},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1014, col: 1, offset: 28528},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1014, col: 6, offset: 28533},
				expr: &ruleRefExpr{
					pos:  position{line: 1014, col: 6, offset: 28533},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1016, col: 1, offset: 28544},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 28557},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1017, col: 5, offset: 28557},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 5, offset: 28572},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 5, offset: 28591},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1021, col: 1, offset: 28600},
			expr: &anyMatcher{
				line: 1022, col: 5, offset: 28620,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1024, col: 1, offset: 28623},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 28651},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1025, col: 5, offset: 28651},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1026, col: 5, offset: 28660},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1027, col: 5, offset: 28669},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1028, col: 5, offset: 28678},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1029, col: 5, offset: 28686},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1030, col: 5, offset: 28699},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1032, col: 1, offset: 28709},
			expr: &charClassMatcher{
				pos:        position{line: 1033, col: 5, offset: 28728},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1039, col: 1, offset: 29058},
			expr: &ruleRefExpr{
				pos:  position{line: 1042, col: 5, offset: 29129},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1044, col: 1, offset: 29148},
			expr: &seqExpr{
				pos: position{line: 1045, col: 5, offset: 29169},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1045, col: 5, offset: 29169},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1045, col: 10, offset: 29174},
						expr: &seqExpr{
							pos: position{line: 1045, col: 11, offset: 29175},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1045, col: 11, offset: 29175},
									expr: &litMatcher{
										pos:        position{line: 1045, col: 12, offset: 29176},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1045, col: 17, offset: 29181},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1045, col: 35, offset: 29199},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1047, col: 1, offset: 29205},
			expr: &seqExpr{
				pos: position{line: 1048, col: 5, offset: 29227},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1048, col: 5, offset: 29227},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1048, col: 10, offset: 29232},
						expr: &seqExpr{
							pos: position{line: 1048, col: 11, offset: 29233},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1048, col: 11, offset: 29233},
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 12, offset: 29234},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1048, col: 27, offset: 29249},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1050, col: 1, offset: 29268},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 7, offset: 29274},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1050, col: 7, offset: 29274},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 11, offset: 29278},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1051, col: 1, offset: 29282},
			expr: &notExpr{
				pos: position{line: 1051, col: 7, offset: 29288},
				expr: &anyMatcher{
					line: 1051, col: 8, offset: 29289,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ParallelProc", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation15(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation15(stack["f"])
}

func (c *current) onOperation31(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation31(stack["a"])
}

func (c *current) onOperation37(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonOperation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation37(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "=",

					"lhs": map[string]interface{}{"op": "Identifier", "name": "$"},

					"rhs": v}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "in",

					"lhs": v,

					"rhs": map[string]interface{}{"op": "Identifier", "name": "$"}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast7(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonSearchExprCast7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast7(stack["typ"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc3(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CutProc", "fields": columns}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["columns"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onJoinProc2(leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc18(key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc18(stack["key"], stack["columns"])
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onFuncExpr4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr13(e interface{}) (interface{}, error) {
	return []interface{}{"@", e}, nil
}

func (p *parser) callonSelectExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr13(stack["e"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return makeBinaryExprChain(map[string]interface{}{"op": "SelectExpr", "selectors": args}, methods), nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": "[",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": map[string]interface{}{"op": "Empty"}, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": map[string]interface{}{"op": "Empty"}}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onSqlProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"op": "SqlExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"groupby": groupby,

		"having": having,

		"orderby": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSqlProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSqlSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlSelect2()
}

func (c *current) onSqlSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSqlSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlSelect7(stack["assignments"])
}

func (c *current) onSqlAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSqlAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSqlAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSqlAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignment11(stack["expr"])
}

func (c *current) onSqlAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSqlAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignments7(stack["expr"])
}

func (c *current) onSqlAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSqlAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSqlFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSqlFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlFrom2(stack["table"], stack["alias"])
}

func (c *current) onSqlFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlFrom11()
}

func (c *current) onSqlAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSqlAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAlias2(stack["id"])
}

func (c *current) onSqlAlias7() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlAlias7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAlias7()
}

func (c *current) onSqlJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSqlJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoins8(stack["join"])
}

func (c *current) onSqlJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSqlJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoins2(stack["first"], stack["rest"])
}

func (c *current) onSqlJoins15() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlJoins15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoins15()
}

func (c *current) onSqlJoin1(table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"op": "JoinClause",

		"table": table,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSqlJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoin1(stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSqlWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSqlWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlWhere2(stack["expr"])
}

func (c *current) onSqlWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlWhere9()
}

func (c *current) onSqlGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSqlGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlGroupBy2(stack["columns"])
}

func (c *current) onSqlGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlGroupBy11()
}

func (c *current) onSqlHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSqlHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlHaving2(stack["expr"])
}

func (c *current) onSqlHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlHaving9()
}

func (c *current) onSqlOrderBy2(keys, direction interface{}) (interface{}, error) {
	return map[string]interface{}{"keys": keys, "direction": direction}, nil

}

func (p *parser) callonSqlOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlOrderBy2(stack["keys"], stack["direction"])
}

func (c *current) onSqlOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlOrderBy13()
}

func (c *current) onSqlDirection2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSqlDirection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlDirection2()
}

func (c *current) onSqlDirection4() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSqlDirection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlDirection4()
}

func (c *current) onSqlLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSqlLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlLimit2(stack["count"])
}

func (c *current) onSqlLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSqlLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19(stack["id"])
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape2() (interface{}, error) {
	return "'", nil
}

func (p *parser) callonSingleCharEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape2()
}

func (c *current) onSingleCharEscape4() (interface{}, error) {
	return '"', nil
}

func (p *parser) callonSingleCharEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape4()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\\", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onSingleCharEscape18() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape18()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
