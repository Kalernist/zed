// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 353},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 433},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 433},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 433},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 439},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 439},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 445},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 448},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 454},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 464},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 469},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 469},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 742},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 754},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 761},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 766},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 793},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 805},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 805},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 805},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 813},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 815},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 818},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 833},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 836},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 840},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 843},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 848},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 855},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 855},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 855},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 858},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 864},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 962},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 962},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 962},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 969},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 971},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 974},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 989},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 992},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 996},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 999},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1003},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1010},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1010},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1010},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1013},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1019},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1116},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1131},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1131},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1131},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1137},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1147},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1152},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1152},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1310},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1310},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1313},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1423},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1440},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1440},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1440},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1443},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1448},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1451},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1453},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1482},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1495},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1495},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1495},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1495},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1501},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1512},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1517},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1517},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1618},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1618},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1624},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1683},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1700},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1700},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1700},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1703},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1708},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1711},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1714},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1745},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1762},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1762},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1762},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1765},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1775},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1777},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1779},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1793},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1796},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1801},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1804},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1809},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1898},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1898},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1898},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1901},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1914},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1917},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1922},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1925},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1930},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2090},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2101},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2101},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2107},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2120},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2125},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2125},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2226},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2226},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2232},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2293},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2305},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2313},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2328},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "FromTrunks",
			pos:  position{line: 74, col: 1, offset: 2340},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2355},
						run: (*parser).callonFromTrunks2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2355},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2361},
										name: "FromTrunk",
									},
								},
								&labeledExpr{
									pos:   position{line: 75, col: 21, offset: 2371},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 75, col: 26, offset: 2376},
										expr: &ruleRefExpr{
											pos:  position{line: 75, col: 26, offset: 2376},
											name: "FromTrunkTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2478},
						run: (*parser).callonFromTrunks9,
						expr: &labeledExpr{
							pos:   position{line: 78, col: 5, offset: 2478},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2484},
								name: "FromTrunk",
							},
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 82, col: 1, offset: 2542},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2556},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 83, col: 5, offset: 2556},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 12, offset: 2563},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 83, col: 23, offset: 2574},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 27, offset: 2578},
								name: "FromTrunkSeq",
							},
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 87, col: 1, offset: 2688},
			expr: &choiceExpr{
				pos: position{line: 88, col: 5, offset: 2705},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 2705},
						run: (*parser).callonFromTrunkSeq2,
						expr: &seqExpr{
							pos: position{line: 88, col: 5, offset: 2705},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 88, col: 5, offset: 2705},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 88, col: 8, offset: 2708},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 88, col: 13, offset: 2713},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 88, col: 16, offset: 2716},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 20, offset: 2720},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2755},
						run: (*parser).callonFromTrunkSeq9,
						expr: &litMatcher{
							pos:        position{line: 89, col: 5, offset: 2755},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkTail",
			pos:  position{line: 91, col: 1, offset: 2778},
			expr: &actionExpr{
				pos: position{line: 92, col: 5, offset: 2796},
				run: (*parser).callonFromTrunkTail1,
				expr: &seqExpr{
					pos: position{line: 92, col: 5, offset: 2796},
					exprs: []interface{}{
						&seqExpr{
							pos: position{line: 92, col: 6, offset: 2797},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 92, col: 6, offset: 2797},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 92, col: 9, offset: 2800},
									val:        ";",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 13, offset: 2804},
									name: "__",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 92, col: 18, offset: 2809},
							label: "trunk",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 24, offset: 2815},
								name: "FromTrunk",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 94, col: 1, offset: 2848},
			expr: &choiceExpr{
				pos: position{line: 95, col: 5, offset: 2863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2863},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2876},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 2889},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 2902},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 100, col: 1, offset: 2912},
			expr: &choiceExpr{
				pos: position{line: 101, col: 5, offset: 2926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 101, col: 5, offset: 2926},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 101, col: 5, offset: 2926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 101, col: 5, offset: 2926},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 13, offset: 2934},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 16, offset: 2937},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 20, offset: 2941},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 23, offset: 2944},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 28, offset: 2949},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 101, col: 31, offset: 2952},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 41, offset: 2962},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 50, offset: 2971},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 53, offset: 2974},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 104, col: 5, offset: 3071},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 104, col: 5, offset: 3071},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 104, col: 5, offset: 3071},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 14, offset: 3080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 104, col: 17, offset: 3083},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 21, offset: 3087},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 104, col: 24, offset: 3090},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 34, offset: 3100},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 41, offset: 3107},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 104, col: 44, offset: 3110},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 3205},
						run: (*parser).callonOperation24,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 3205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 107, col: 5, offset: 3205},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 12, offset: 3212},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 107, col: 15, offset: 3215},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 19, offset: 3219},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 107, col: 22, offset: 3222},
									label: "trunks",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 29, offset: 3229},
										name: "FromTrunks",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 40, offset: 3240},
									name: "__",
								},
								&zeroOrOneExpr{
									pos: position{line: 107, col: 43, offset: 3243},
									expr: &litMatcher{
										pos:        position{line: 107, col: 43, offset: 3243},
										val:        ";",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 48, offset: 3248},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 107, col: 51, offset: 3251},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 5, offset: 3342},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3355},
						run: (*parser).callonOperation38,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 111, col: 5, offset: 3355},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 7, offset: 3357},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 111, col: 16, offset: 3366},
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 17, offset: 3367},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 112, col: 5, offset: 3397},
						run: (*parser).callonOperation44,
						expr: &seqExpr{
							pos: position{line: 112, col: 5, offset: 3397},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 112, col: 5, offset: 3397},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 7, offset: 3399},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 112, col: 19, offset: 3411},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 20, offset: 3412},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3443},
						run: (*parser).callonOperation50,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3443},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 113, col: 5, offset: 3443},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 10, offset: 3448},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 113, col: 24, offset: 3462},
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 25, offset: 3463},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 117, col: 1, offset: 3554},
			expr: &seqExpr{
				pos: position{line: 117, col: 11, offset: 3564},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 11, offset: 3564},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 117, col: 15, offset: 3568},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 117, col: 15, offset: 3568},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 117, col: 22, offset: 3575},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 117, col: 29, offset: 3582},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 117, col: 35, offset: 3588},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 118, col: 1, offset: 3593},
			expr: &seqExpr{
				pos: position{line: 118, col: 8, offset: 3600},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 118, col: 8, offset: 3600},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 118, col: 12, offset: 3604},
						expr: &choiceExpr{
							pos: position{line: 118, col: 14, offset: 3606},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 118, col: 14, offset: 3606},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 118, col: 20, offset: 3612},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 120, col: 1, offset: 3618},
			expr: &seqExpr{
				pos: position{line: 120, col: 13, offset: 3630},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 13, offset: 3630},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 120, col: 17, offset: 3634},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 120, col: 18, offset: 3635},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 120, col: 18, offset: 3635},
										expr: &litMatcher{
											pos:        position{line: 120, col: 19, offset: 3636},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 24, offset: 3641},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 120, col: 38, offset: 3655},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 120, col: 57, offset: 3674},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 120, col: 82, offset: 3699},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 120, col: 88, offset: 3705},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 122, col: 1, offset: 3711},
			expr: &choiceExpr{
				pos: position{line: 122, col: 12, offset: 3722},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 122, col: 13, offset: 3723},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 122, col: 13, offset: 3723},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 122, col: 16, offset: 3726},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 16, offset: 3726},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 122, col: 26, offset: 3736},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 122, col: 35, offset: 3745},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 122, col: 43, offset: 3753},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 122, col: 43, offset: 3753},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 122, col: 46, offset: 3756},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 124, col: 1, offset: 3762},
			expr: &actionExpr{
				pos: position{line: 125, col: 5, offset: 3780},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 125, col: 5, offset: 3780},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 125, col: 5, offset: 3780},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 11, offset: 3786},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 21, offset: 3796},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 125, col: 26, offset: 3801},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 26, offset: 3801},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 129, col: 1, offset: 3875},
			expr: &actionExpr{
				pos: position{line: 129, col: 16, offset: 3890},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 16, offset: 3890},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 129, col: 16, offset: 3890},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 18, offset: 3892},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 26, offset: 3900},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3902},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3904},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 131, col: 1, offset: 3954},
			expr: &actionExpr{
				pos: position{line: 132, col: 5, offset: 3968},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 132, col: 5, offset: 3968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 132, col: 5, offset: 3968},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 11, offset: 3974},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 3991},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 10, offset: 3996},
								expr: &actionExpr{
									pos: position{line: 133, col: 11, offset: 3997},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 133, col: 11, offset: 3997},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 133, col: 11, offset: 3997},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 133, col: 14, offset: 4000},
												expr: &seqExpr{
													pos: position{line: 133, col: 15, offset: 4001},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 133, col: 15, offset: 4001},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 133, col: 24, offset: 4010},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 133, col: 28, offset: 4014},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 133, col: 31, offset: 4017},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 133, col: 36, offset: 4022},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 137, col: 1, offset: 4138},
			expr: &choiceExpr{
				pos: position{line: 138, col: 5, offset: 4155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 4155},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 138, col: 5, offset: 4155},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 138, col: 6, offset: 4156},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 138, col: 6, offset: 4156},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 138, col: 6, offset: 4156},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 15, offset: 4165},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 138, col: 19, offset: 4169},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 138, col: 19, offset: 4169},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 23, offset: 4173},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 27, offset: 4177},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 29, offset: 4179},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 141, col: 5, offset: 4291},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 142, col: 5, offset: 4304},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4319},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 143, col: 5, offset: 4319},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 9, offset: 4323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 12, offset: 4326},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 17, offset: 4331},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 31, offset: 4345},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 143, col: 34, offset: 4348},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 145, col: 1, offset: 4374},
			expr: &choiceExpr{
				pos: position{line: 146, col: 5, offset: 4387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4387},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4387},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 5, offset: 4387},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 11, offset: 4393},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 146, col: 24, offset: 4406},
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 25, offset: 4407},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4443},
						run: (*parser).callonShortCut8,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 4443},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 147, col: 5, offset: 4443},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 7, offset: 4445},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 12, offset: 4450},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 147, col: 15, offset: 4453},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 20, offset: 4458},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 34, offset: 4472},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 147, col: 37, offset: 4475},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 39, offset: 4477},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 147, col: 51, offset: 4489},
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 52, offset: 4490},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4604},
						run: (*parser).callonShortCut20,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 4604},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 150, col: 5, offset: 4604},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 7, offset: 4606},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 19, offset: 4618},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 21, offset: 4620},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 29, offset: 4628},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 150, col: 31, offset: 4630},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 5312},
						run: (*parser).callonShortCut28,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 5312},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 177, col: 5, offset: 5312},
									expr: &seqExpr{
										pos: position{line: 177, col: 7, offset: 5314},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 177, col: 7, offset: 5314},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 177, col: 19, offset: 5326},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 177, col: 24, offset: 5331},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 31, offset: 5338},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5379},
						run: (*parser).callonShortCut36,
						expr: &seqExpr{
							pos: position{line: 178, col: 5, offset: 5379},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 178, col: 5, offset: 5379},
									expr: &seqExpr{
										pos: position{line: 178, col: 7, offset: 5381},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 178, col: 7, offset: 5381},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 178, col: 19, offset: 5393},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 178, col: 24, offset: 5398},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 26, offset: 5400},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 178, col: 38, offset: 5412},
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 39, offset: 5413},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5530},
						run: (*parser).callonShortCut46,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 5530},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 181, col: 9, offset: 5534},
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 10, offset: 5535},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 185, col: 1, offset: 5648},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5664},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 5664},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5676},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 187, col: 5, offset: 5676},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 187, col: 5, offset: 5676},
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 6, offset: 5677},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 187, col: 13, offset: 5684},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 15, offset: 5686},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 191, col: 1, offset: 5794},
			expr: &actionExpr{
				pos: position{line: 192, col: 5, offset: 5812},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 5, offset: 5812},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 192, col: 13, offset: 5820},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 196, col: 1, offset: 5922},
			expr: &choiceExpr{
				pos: position{line: 197, col: 5, offset: 5939},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5939},
						run: (*parser).callonPatternMatch2,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 5939},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 197, col: 5, offset: 5939},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 7, offset: 5941},
										name: "Lval",
									},
								},
								&choiceExpr{
									pos: position{line: 197, col: 13, offset: 5947},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 197, col: 14, offset: 5948},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 197, col: 14, offset: 5948},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 197, col: 17, offset: 5951},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 197, col: 21, offset: 5955},
													name: "__",
												},
											},
										},
										&seqExpr{
											pos: position{line: 197, col: 28, offset: 5962},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 197, col: 28, offset: 5962},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 197, col: 30, offset: 5964},
													val:        "in",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 197, col: 35, offset: 5969},
													name: "_",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 40, offset: 5974},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 48, offset: 5982},
										name: "Pattern",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 200, col: 5, offset: 6097},
						run: (*parser).callonPatternMatch17,
						expr: &seqExpr{
							pos: position{line: 200, col: 5, offset: 6097},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 200, col: 5, offset: 6097},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 200, col: 7, offset: 6099},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 200, col: 12, offset: 6104},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 200, col: 15, offset: 6107},
									val:        "!=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 200, col: 20, offset: 6112},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 200, col: 24, offset: 6116},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 200, col: 32, offset: 6124},
										name: "Pattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 207, col: 1, offset: 6333},
			expr: &choiceExpr{
				pos: position{line: 207, col: 11, offset: 6343},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 207, col: 11, offset: 6343},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 20, offset: 6352},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 209, col: 1, offset: 6358},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6374},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6374},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6396},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6409},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6421},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6434},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6446},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 5, offset: 6458},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 217, col: 5, offset: 6472},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 218, col: 5, offset: 6489},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 222, col: 1, offset: 6546},
			expr: &ruleRefExpr{
				pos:  position{line: 222, col: 14, offset: 6559},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 224, col: 1, offset: 6579},
			expr: &actionExpr{
				pos: position{line: 224, col: 14, offset: 6592},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 224, col: 15, offset: 6593},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 15, offset: 6593},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 21, offset: 6599},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 28, offset: 6606},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 35, offset: 6613},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 42, offset: 6620},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 48, offset: 6626},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 55, offset: 6633},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 226, col: 1, offset: 6670},
			expr: &actionExpr{
				pos: position{line: 227, col: 5, offset: 6693},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 227, col: 5, offset: 6693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6693},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 11, offset: 6699},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 5, offset: 6717},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 228, col: 10, offset: 6722},
								expr: &actionExpr{
									pos: position{line: 228, col: 11, offset: 6723},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 228, col: 11, offset: 6723},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 228, col: 11, offset: 6723},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 14, offset: 6726},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 17, offset: 6729},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 228, col: 28, offset: 6740},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 31, offset: 6743},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 36, offset: 6748},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 232, col: 1, offset: 6865},
			expr: &actionExpr{
				pos: position{line: 233, col: 5, offset: 6883},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 233, col: 5, offset: 6883},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 6883},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 11, offset: 6889},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 5, offset: 6907},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 234, col: 10, offset: 6912},
								expr: &actionExpr{
									pos: position{line: 234, col: 11, offset: 6913},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 234, col: 11, offset: 6913},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 234, col: 11, offset: 6913},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 234, col: 14, offset: 6916},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 234, col: 17, offset: 6919},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 234, col: 34, offset: 6936},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 234, col: 37, offset: 6939},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 234, col: 42, offset: 6944},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 238, col: 1, offset: 7061},
			expr: &actionExpr{
				pos: position{line: 239, col: 5, offset: 7079},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 239, col: 5, offset: 7079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 239, col: 5, offset: 7079},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 11, offset: 7085},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 240, col: 5, offset: 7104},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 240, col: 10, offset: 7109},
								expr: &actionExpr{
									pos: position{line: 240, col: 11, offset: 7110},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 240, col: 11, offset: 7110},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 240, col: 11, offset: 7110},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 240, col: 14, offset: 7113},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 240, col: 17, offset: 7116},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 240, col: 40, offset: 7139},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 240, col: 43, offset: 7142},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 240, col: 48, offset: 7147},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 244, col: 1, offset: 7265},
			expr: &choiceExpr{
				pos: position{line: 245, col: 5, offset: 7284},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 245, col: 5, offset: 7284},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 245, col: 5, offset: 7284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 245, col: 5, offset: 7284},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 245, col: 7, offset: 7286},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 245, col: 22, offset: 7301},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 245, col: 25, offset: 7304},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 245, col: 29, offset: 7308},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 245, col: 32, offset: 7311},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 245, col: 36, offset: 7315},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7417},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 250, col: 1, offset: 7433},
			expr: &choiceExpr{
				pos: position{line: 251, col: 5, offset: 7452},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7452},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7466},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 7482},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 7482},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 253, col: 5, offset: 7482},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 11, offset: 7488},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 20, offset: 7497},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 253, col: 25, offset: 7502},
										expr: &ruleRefExpr{
											pos:  position{line: 253, col: 26, offset: 7503},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7575},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7587},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7598},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7608},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 7616},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 7624},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 265, col: 1, offset: 7661},
			expr: &choiceExpr{
				pos: position{line: 266, col: 5, offset: 7677},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7677},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 266, col: 5, offset: 7677},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 266, col: 5, offset: 7677},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 266, col: 15, offset: 7687},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 266, col: 21, offset: 7693},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 266, col: 30, offset: 7702},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 266, col: 35, offset: 7707},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 266, col: 47, offset: 7719},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 266, col: 53, offset: 7725},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 269, col: 5, offset: 7870},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 269, col: 5, offset: 7870},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 269, col: 5, offset: 7870},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 269, col: 15, offset: 7880},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 21, offset: 7886},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 269, col: 30, offset: 7895},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 35, offset: 7900},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 269, col: 50, offset: 7915},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 269, col: 55, offset: 7920},
										expr: &seqExpr{
											pos: position{line: 269, col: 56, offset: 7921},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 269, col: 56, offset: 7921},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 269, col: 58, offset: 7923},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 269, col: 72, offset: 7937},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 78, offset: 7943},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 277, col: 1, offset: 8176},
			expr: &choiceExpr{
				pos: position{line: 277, col: 13, offset: 8188},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 277, col: 13, offset: 8188},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 277, col: 13, offset: 8188},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 277, col: 25, offset: 8200},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 277, col: 29, offset: 8204},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 279, col: 1, offset: 8208},
			expr: &choiceExpr{
				pos: position{line: 280, col: 5, offset: 8221},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 280, col: 5, offset: 8221},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 280, col: 5, offset: 8221},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 280, col: 5, offset: 8221},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 280, col: 14, offset: 8230},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 280, col: 16, offset: 8232},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 280, col: 20, offset: 8236},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 280, col: 29, offset: 8245},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 8271},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 281, col: 5, offset: 8271},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 283, col: 1, offset: 8296},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8312},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8312},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 284, col: 5, offset: 8312},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 13, offset: 8320},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 15, offset: 8322},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 23, offset: 8330},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 286, col: 1, offset: 8371},
			expr: &choiceExpr{
				pos: position{line: 287, col: 5, offset: 8384},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 287, col: 5, offset: 8384},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 287, col: 5, offset: 8384},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 287, col: 5, offset: 8384},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 287, col: 7, offset: 8386},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 287, col: 14, offset: 8393},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 287, col: 16, offset: 8395},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 287, col: 25, offset: 8404},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 287, col: 27, offset: 8406},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 287, col: 33, offset: 8412},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 288, col: 5, offset: 8443},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 288, col: 5, offset: 8443},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 293, col: 1, offset: 8703},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 8722},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8722},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8737},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 295, col: 5, offset: 8737},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 10, offset: 8742},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 297, col: 1, offset: 8834},
			expr: &actionExpr{
				pos: position{line: 298, col: 5, offset: 8854},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 298, col: 5, offset: 8854},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 5, offset: 8854},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 11, offset: 8860},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 26, offset: 8875},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 298, col: 31, offset: 8880},
								expr: &actionExpr{
									pos: position{line: 298, col: 32, offset: 8881},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 298, col: 32, offset: 8881},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 298, col: 32, offset: 8881},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 298, col: 35, offset: 8884},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 298, col: 39, offset: 8888},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 298, col: 42, offset: 8891},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 298, col: 47, offset: 8896},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 302, col: 1, offset: 9018},
			expr: &choiceExpr{
				pos: position{line: 303, col: 5, offset: 9036},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 303, col: 5, offset: 9036},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 303, col: 5, offset: 9036},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 303, col: 5, offset: 9036},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 303, col: 10, offset: 9041},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 15, offset: 9046},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 303, col: 18, offset: 9049},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 22, offset: 9053},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 303, col: 25, offset: 9056},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 303, col: 29, offset: 9060},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 9164},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 306, col: 5, offset: 9164},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 9, offset: 9168},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 310, col: 1, offset: 9268},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9276},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9276},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 311, col: 5, offset: 9276},
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 6, offset: 9277},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 16, offset: 9287},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 19, offset: 9290},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 27, offset: 9298},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 311, col: 30, offset: 9301},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 34, offset: 9305},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 311, col: 37, offset: 9308},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 42, offset: 9313},
								expr: &ruleRefExpr{
									pos:  position{line: 311, col: 42, offset: 9313},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 49, offset: 9320},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 311, col: 52, offset: 9323},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 311, col: 56, offset: 9327},
							expr: &seqExpr{
								pos: position{line: 311, col: 58, offset: 9329},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 311, col: 58, offset: 9329},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 311, col: 61, offset: 9332},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 66, offset: 9337},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 72, offset: 9343},
								expr: &ruleRefExpr{
									pos:  position{line: 311, col: 72, offset: 9343},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 319, col: 1, offset: 9533},
			expr: &choiceExpr{
				pos: position{line: 320, col: 5, offset: 9545},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 320, col: 5, offset: 9545},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 5, offset: 9564},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 5, offset: 9577},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 324, col: 1, offset: 9586},
			expr: &actionExpr{
				pos: position{line: 324, col: 15, offset: 9600},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 324, col: 15, offset: 9600},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 324, col: 15, offset: 9600},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 324, col: 17, offset: 9602},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 25, offset: 9610},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 27, offset: 9612},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 32, offset: 9617},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 326, col: 1, offset: 9653},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 9672},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 327, col: 5, offset: 9672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 327, col: 5, offset: 9672},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 9678},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 25, offset: 9692},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 327, col: 30, offset: 9697},
								expr: &seqExpr{
									pos: position{line: 327, col: 31, offset: 9698},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 327, col: 31, offset: 9698},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 327, col: 34, offset: 9701},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 327, col: 38, offset: 9705},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 327, col: 41, offset: 9708},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 337, col: 1, offset: 9944},
			expr: &choiceExpr{
				pos: position{line: 338, col: 5, offset: 9957},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9957},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 9970},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 9982},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 9994},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 10007},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 10020},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 10033},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 10046},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 5, offset: 10061},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 347, col: 5, offset: 10074},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 5, offset: 10086},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 5, offset: 10101},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 350, col: 5, offset: 10114},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 351, col: 5, offset: 10128},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 352, col: 5, offset: 10141},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 353, col: 5, offset: 10156},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 354, col: 5, offset: 10168},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 355, col: 5, offset: 10181},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 356, col: 5, offset: 10194},
						name: "ExplodeProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 358, col: 1, offset: 10207},
			expr: &actionExpr{
				pos: position{line: 359, col: 5, offset: 10220},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 359, col: 5, offset: 10220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 359, col: 5, offset: 10220},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 359, col: 13, offset: 10228},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 18, offset: 10233},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 27, offset: 10242},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 359, col: 32, offset: 10247},
								expr: &actionExpr{
									pos: position{line: 359, col: 33, offset: 10248},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 359, col: 33, offset: 10248},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 359, col: 33, offset: 10248},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 359, col: 35, offset: 10250},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 359, col: 37, offset: 10252},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 373, col: 1, offset: 10667},
			expr: &actionExpr{
				pos: position{line: 373, col: 12, offset: 10678},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 373, col: 12, offset: 10678},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 373, col: 17, offset: 10683},
						expr: &actionExpr{
							pos: position{line: 373, col: 18, offset: 10684},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 373, col: 18, offset: 10684},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 373, col: 18, offset: 10684},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 373, col: 20, offset: 10686},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 373, col: 22, offset: 10688},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 375, col: 1, offset: 10744},
			expr: &choiceExpr{
				pos: position{line: 376, col: 5, offset: 10756},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 376, col: 5, offset: 10756},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 376, col: 5, offset: 10756},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 377, col: 5, offset: 10831},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 377, col: 5, offset: 10831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 377, col: 5, offset: 10831},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 377, col: 14, offset: 10840},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 377, col: 16, offset: 10842},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 377, col: 23, offset: 10849},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 377, col: 24, offset: 10850},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 377, col: 24, offset: 10850},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 377, col: 34, offset: 10860},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 379, col: 1, offset: 10974},
			expr: &actionExpr{
				pos: position{line: 380, col: 5, offset: 10986},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 380, col: 5, offset: 10986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 380, col: 5, offset: 10986},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 380, col: 12, offset: 10993},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 380, col: 18, offset: 10999},
								expr: &actionExpr{
									pos: position{line: 380, col: 19, offset: 11000},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 380, col: 19, offset: 11000},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 380, col: 19, offset: 11000},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 380, col: 21, offset: 11002},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 380, col: 23, offset: 11004},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 47, offset: 11028},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 380, col: 53, offset: 11034},
								expr: &seqExpr{
									pos: position{line: 380, col: 54, offset: 11035},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 380, col: 54, offset: 11035},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 380, col: 56, offset: 11037},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 67, offset: 11048},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 380, col: 74, offset: 11055},
								expr: &actionExpr{
									pos: position{line: 380, col: 75, offset: 11056},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 380, col: 75, offset: 11056},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 380, col: 75, offset: 11056},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 380, col: 77, offset: 11058},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 380, col: 79, offset: 11060},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 394, col: 1, offset: 11405},
			expr: &actionExpr{
				pos: position{line: 395, col: 5, offset: 11417},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 395, col: 5, offset: 11417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 5, offset: 11417},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 395, col: 12, offset: 11424},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 395, col: 14, offset: 11426},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 19, offset: 11431},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 399, col: 1, offset: 11526},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 11539},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 11539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 5, offset: 11539},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 13, offset: 11547},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 15, offset: 11549},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 20, offset: 11554},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 404, col: 1, offset: 11650},
			expr: &actionExpr{
				pos: position{line: 405, col: 5, offset: 11663},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 405, col: 5, offset: 11663},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 5, offset: 11663},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 405, col: 13, offset: 11671},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 15, offset: 11673},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 20, offset: 11678},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 409, col: 1, offset: 11769},
			expr: &choiceExpr{
				pos: position{line: 410, col: 5, offset: 11782},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 410, col: 5, offset: 11782},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 410, col: 5, offset: 11782},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 410, col: 5, offset: 11782},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 410, col: 13, offset: 11790},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 410, col: 15, offset: 11792},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 410, col: 21, offset: 11798},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 411, col: 5, offset: 11878},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 411, col: 5, offset: 11878},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 413, col: 1, offset: 11954},
			expr: &choiceExpr{
				pos: position{line: 414, col: 5, offset: 11967},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 414, col: 5, offset: 11967},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 414, col: 5, offset: 11967},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 414, col: 5, offset: 11967},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 13, offset: 11975},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 414, col: 15, offset: 11977},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 414, col: 21, offset: 11983},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12063},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 415, col: 5, offset: 12063},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 417, col: 1, offset: 12139},
			expr: &actionExpr{
				pos: position{line: 418, col: 5, offset: 12154},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 418, col: 5, offset: 12154},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 418, col: 5, offset: 12154},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 418, col: 15, offset: 12164},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 418, col: 17, offset: 12166},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 20, offset: 12169},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 422, col: 1, offset: 12206},
			expr: &actionExpr{
				pos: position{line: 423, col: 5, offset: 12217},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 423, col: 5, offset: 12217},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 423, col: 10, offset: 12222},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 427, col: 1, offset: 12318},
			expr: &choiceExpr{
				pos: position{line: 428, col: 5, offset: 12331},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 428, col: 5, offset: 12331},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 428, col: 5, offset: 12331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 428, col: 5, offset: 12331},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 428, col: 13, offset: 12339},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 428, col: 15, offset: 12341},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 431, col: 5, offset: 12430},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 431, col: 5, offset: 12430},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 435, col: 1, offset: 12520},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 12532},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 12532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 436, col: 5, offset: 12532},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 12, offset: 12539},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 14, offset: 12541},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 19, offset: 12546},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 440, col: 1, offset: 12641},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 12656},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 12656},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 5, offset: 12656},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 441, col: 15, offset: 12666},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 17, offset: 12668},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 23, offset: 12674},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 34, offset: 12685},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 441, col: 39, offset: 12690},
								expr: &actionExpr{
									pos: position{line: 441, col: 40, offset: 12691},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 441, col: 40, offset: 12691},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 441, col: 40, offset: 12691},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 441, col: 43, offset: 12694},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 441, col: 47, offset: 12698},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 441, col: 50, offset: 12701},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 441, col: 53, offset: 12704},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 449, col: 1, offset: 13113},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 13126},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 450, col: 5, offset: 13126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 450, col: 5, offset: 13126},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 450, col: 13, offset: 13134},
							expr: &seqExpr{
								pos: position{line: 450, col: 15, offset: 13136},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 450, col: 15, offset: 13136},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 450, col: 18, offset: 13139},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 454, col: 1, offset: 13210},
			expr: &actionExpr{
				pos: position{line: 455, col: 5, offset: 13224},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 455, col: 5, offset: 13224},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 459, col: 1, offset: 13300},
			expr: &choiceExpr{
				pos: position{line: 460, col: 5, offset: 13313},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 13313},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 460, col: 5, offset: 13313},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 460, col: 5, offset: 13313},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 460, col: 11, offset: 13319},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 460, col: 21, offset: 13329},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 460, col: 29, offset: 13337},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 460, col: 31, offset: 13339},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 460, col: 39, offset: 13347},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 460, col: 47, offset: 13355},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 460, col: 50, offset: 13358},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 460, col: 54, offset: 13362},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 460, col: 57, offset: 13365},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 460, col: 66, offset: 13374},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 460, col: 74, offset: 13382},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 460, col: 82, offset: 13390},
										expr: &seqExpr{
											pos: position{line: 460, col: 83, offset: 13391},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 460, col: 83, offset: 13391},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 460, col: 85, offset: 13393},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 13659},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 467, col: 5, offset: 13659},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 467, col: 5, offset: 13659},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 11, offset: 13665},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 467, col: 22, offset: 13676},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 467, col: 30, offset: 13684},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 467, col: 32, offset: 13686},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 36, offset: 13690},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 467, col: 44, offset: 13698},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 467, col: 52, offset: 13706},
										expr: &seqExpr{
											pos: position{line: 467, col: 53, offset: 13707},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 467, col: 53, offset: 13707},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 467, col: 55, offset: 13709},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 475, col: 1, offset: 13963},
			expr: &choiceExpr{
				pos: position{line: 476, col: 5, offset: 13977},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 476, col: 5, offset: 13977},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 476, col: 5, offset: 13977},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 476, col: 5, offset: 13977},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 476, col: 14, offset: 13986},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 477, col: 5, offset: 14016},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 477, col: 5, offset: 14016},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 477, col: 5, offset: 14016},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 477, col: 14, offset: 14025},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 14054},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 478, col: 5, offset: 14054},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 478, col: 5, offset: 14054},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 478, col: 14, offset: 14063},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 479, col: 5, offset: 14093},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 479, col: 5, offset: 14093},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 481, col: 1, offset: 14129},
			expr: &choiceExpr{
				pos: position{line: 482, col: 5, offset: 14141},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 482, col: 5, offset: 14141},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 483, col: 5, offset: 14150},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 483, col: 5, offset: 14150},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 483, col: 5, offset: 14150},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 483, col: 9, offset: 14154},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 14, offset: 14159},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 483, col: 19, offset: 14164},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 485, col: 1, offset: 14190},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14205},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 14205},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 486, col: 5, offset: 14205},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 486, col: 15, offset: 14215},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 17, offset: 14217},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 523, col: 1, offset: 15512},
			expr: &choiceExpr{
				pos: position{line: 524, col: 5, offset: 15527},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 524, col: 5, offset: 15527},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 524, col: 5, offset: 15527},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 524, col: 5, offset: 15527},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 524, col: 7, offset: 15529},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 12, offset: 15534},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 525, col: 5, offset: 15563},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 525, col: 5, offset: 15563},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 527, col: 1, offset: 15621},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 15634},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 528, col: 5, offset: 15634},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 528, col: 12, offset: 15641},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 532, col: 1, offset: 15797},
			expr: &choiceExpr{
				pos: position{line: 533, col: 5, offset: 15809},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 533, col: 5, offset: 15809},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 534, col: 5, offset: 15822},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 535, col: 5, offset: 15835},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 537, col: 1, offset: 15845},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15858},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15858},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 5, offset: 15858},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 13, offset: 15866},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 15, offset: 15868},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 20, offset: 15873},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 25, offset: 15878},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 32, offset: 15885},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 42, offset: 15895},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 49, offset: 15902},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 542, col: 1, offset: 16030},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 16043},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 16043},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 5, offset: 16043},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 13, offset: 16051},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 15, offset: 16053},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 20, offset: 16058},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 545, col: 1, offset: 16089},
			expr: &actionExpr{
				pos: position{line: 546, col: 5, offset: 16102},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 546, col: 5, offset: 16102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 5, offset: 16102},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 10, offset: 16107},
								name: "PoolName",
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 19, offset: 16116},
							label: "at",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 22, offset: 16119},
								name: "PoolAt",
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 29, offset: 16126},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 34, offset: 16131},
								name: "PoolRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 44, offset: 16141},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 50, offset: 16147},
								name: "OrderArg",
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 550, col: 1, offset: 16282},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16295},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 551, col: 5, offset: 16295},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 551, col: 12, offset: 16302},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 14, offset: 16304},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 18, offset: 16308},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 22, offset: 16312},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 29, offset: 16319},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 39, offset: 16329},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 46, offset: 16336},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 555, col: 1, offset: 16461},
			expr: &actionExpr{
				pos: position{line: 555, col: 7, offset: 16467},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 555, col: 7, offset: 16467},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 555, col: 8, offset: 16468},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 555, col: 8, offset: 16468},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 555, col: 18, offset: 16478},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 555, col: 28, offset: 16488},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 557, col: 1, offset: 16525},
			expr: &choiceExpr{
				pos: position{line: 558, col: 5, offset: 16534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 558, col: 5, offset: 16534},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 558, col: 5, offset: 16534},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 7, offset: 16536},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 559, col: 5, offset: 16571},
						run: (*parser).callonPath5,
						expr: &seqExpr{
							pos: position{line: 559, col: 5, offset: 16571},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 559, col: 5, offset: 16571},
									expr: &charClassMatcher{
										pos:        position{line: 559, col: 5, offset: 16571},
										val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?;:[\\]{}~|+-]",
										chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ';', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
										ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 559, col: 46, offset: 16612},
									expr: &ruleRefExpr{
										pos:  position{line: 559, col: 47, offset: 16613},
										name: "EOT",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 561, col: 1, offset: 16649},
			expr: &choiceExpr{
				pos: position{line: 562, col: 5, offset: 16660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 16660},
						run: (*parser).callonPoolAt2,
						expr: &seqExpr{
							pos: position{line: 562, col: 5, offset: 16660},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 562, col: 5, offset: 16660},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 562, col: 7, offset: 16662},
									val:        "at",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 562, col: 13, offset: 16668},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 562, col: 15, offset: 16670},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 562, col: 18, offset: 16673},
										name: "KSUID",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 16702},
						run: (*parser).callonPoolAt9,
						expr: &litMatcher{
							pos:        position{line: 563, col: 5, offset: 16702},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 565, col: 1, offset: 16726},
			expr: &actionExpr{
				pos: position{line: 565, col: 9, offset: 16734},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 565, col: 9, offset: 16734},
					expr: &charClassMatcher{
						pos:        position{line: 565, col: 10, offset: 16735},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 567, col: 1, offset: 16781},
			expr: &choiceExpr{
				pos: position{line: 568, col: 5, offset: 16795},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16795},
						run: (*parser).callonPoolRange2,
						expr: &seqExpr{
							pos: position{line: 568, col: 5, offset: 16795},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 568, col: 5, offset: 16795},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 568, col: 7, offset: 16797},
									val:        "over",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 15, offset: 16805},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 568, col: 17, offset: 16807},
									label: "lower",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 23, offset: 16813},
										name: "Literal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 31, offset: 16821},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 568, col: 33, offset: 16823},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 39, offset: 16829},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 568, col: 41, offset: 16831},
									label: "upper",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 47, offset: 16837},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 16945},
						run: (*parser).callonPoolRange14,
						expr: &litMatcher{
							pos:        position{line: 571, col: 5, offset: 16945},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolTo",
			pos:  position{line: 573, col: 1, offset: 16969},
			expr: &choiceExpr{
				pos: position{line: 574, col: 5, offset: 16980},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 16980},
						run: (*parser).callonPoolTo2,
						expr: &seqExpr{
							pos: position{line: 574, col: 5, offset: 16980},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 574, col: 5, offset: 16980},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 574, col: 7, offset: 16982},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 13, offset: 16988},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 574, col: 15, offset: 16990},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 574, col: 19, offset: 16994},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 17026},
						run: (*parser).callonPoolTo9,
						expr: &litMatcher{
							pos:        position{line: 575, col: 5, offset: 17026},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 577, col: 1, offset: 17050},
			expr: &choiceExpr{
				pos: position{line: 578, col: 5, offset: 17063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 578, col: 5, offset: 17063},
						run: (*parser).callonPoolName2,
						expr: &labeledExpr{
							pos:   position{line: 578, col: 5, offset: 17063},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 10, offset: 17068},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 579, col: 5, offset: 17108},
						run: (*parser).callonPoolName5,
						expr: &labeledExpr{
							pos:   position{line: 579, col: 5, offset: 17108},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 8, offset: 17111},
								name: "KSUID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 580, col: 5, offset: 17140},
						run: (*parser).callonPoolName8,
						expr: &labeledExpr{
							pos:   position{line: 580, col: 5, offset: 17140},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 7, offset: 17142},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 582, col: 1, offset: 17174},
			expr: &choiceExpr{
				pos: position{line: 583, col: 5, offset: 17188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 583, col: 5, offset: 17188},
						run: (*parser).callonLayoutArg2,
						expr: &seqExpr{
							pos: position{line: 583, col: 5, offset: 17188},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 583, col: 5, offset: 17188},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 583, col: 7, offset: 17190},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 16, offset: 17199},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 583, col: 18, offset: 17201},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 583, col: 23, offset: 17206},
										name: "FieldExprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 583, col: 34, offset: 17217},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 583, col: 40, offset: 17223},
										name: "OrderSuffix",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 17336},
						run: (*parser).callonLayoutArg11,
						expr: &litMatcher{
							pos:        position{line: 586, col: 5, offset: 17336},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 588, col: 1, offset: 17360},
			expr: &choiceExpr{
				pos: position{line: 589, col: 5, offset: 17374},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 17374},
						run: (*parser).callonFormatArg2,
						expr: &seqExpr{
							pos: position{line: 589, col: 5, offset: 17374},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 589, col: 5, offset: 17374},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 589, col: 7, offset: 17376},
									val:        "format",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 589, col: 17, offset: 17386},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 589, col: 19, offset: 17388},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 589, col: 23, offset: 17392},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 5, offset: 17431},
						run: (*parser).callonFormatArg9,
						expr: &litMatcher{
							pos:        position{line: 590, col: 5, offset: 17431},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 592, col: 1, offset: 17454},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 17470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17470},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 593, col: 5, offset: 17470},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 594, col: 5, offset: 17505},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 594, col: 5, offset: 17505},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 595, col: 5, offset: 17542},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 595, col: 5, offset: 17542},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 597, col: 1, offset: 17568},
			expr: &choiceExpr{
				pos: position{line: 598, col: 5, offset: 17581},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 17581},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 598, col: 5, offset: 17581},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 598, col: 5, offset: 17581},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 598, col: 7, offset: 17583},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 598, col: 16, offset: 17592},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 598, col: 18, offset: 17594},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 599, col: 5, offset: 17628},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 599, col: 5, offset: 17628},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 599, col: 5, offset: 17628},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 599, col: 7, offset: 17630},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 599, col: 16, offset: 17639},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 599, col: 18, offset: 17641},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 600, col: 5, offset: 17677},
						run: (*parser).callonOrderArg14,
						expr: &litMatcher{
							pos:        position{line: 600, col: 5, offset: 17677},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 602, col: 1, offset: 17700},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 17713},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 603, col: 5, offset: 17713},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 609, col: 1, offset: 17908},
			expr: &actionExpr{
				pos: position{line: 610, col: 5, offset: 17924},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 610, col: 5, offset: 17924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 610, col: 5, offset: 17924},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 16, offset: 17935},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 610, col: 18, offset: 17937},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 23, offset: 17942},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 29, offset: 17948},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 33, offset: 17952},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 41, offset: 17960},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 44, offset: 17963},
								name: "AsArg",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 614, col: 1, offset: 18074},
			expr: &actionExpr{
				pos: position{line: 615, col: 5, offset: 18086},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 615, col: 5, offset: 18086},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 615, col: 5, offset: 18086},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 7, offset: 18088},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 10, offset: 18091},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 12, offset: 18093},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 16, offset: 18097},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 617, col: 1, offset: 18122},
			expr: &choiceExpr{
				pos: position{line: 618, col: 5, offset: 18132},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 18132},
						run: (*parser).callonAsArg2,
						expr: &seqExpr{
							pos: position{line: 618, col: 5, offset: 18132},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 618, col: 5, offset: 18132},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 7, offset: 18134},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 10, offset: 18137},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 618, col: 12, offset: 18139},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 16, offset: 18143},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18172},
						run: (*parser).callonAsArg9,
						expr: &litMatcher{
							pos:        position{line: 619, col: 5, offset: 18172},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 623, col: 1, offset: 18220},
			expr: &ruleRefExpr{
				pos:  position{line: 623, col: 8, offset: 18227},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 625, col: 1, offset: 18238},
			expr: &actionExpr{
				pos: position{line: 626, col: 5, offset: 18248},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 626, col: 5, offset: 18248},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 18248},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 18254},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 16, offset: 18259},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 626, col: 21, offset: 18264},
								expr: &actionExpr{
									pos: position{line: 626, col: 22, offset: 18265},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 626, col: 22, offset: 18265},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 626, col: 22, offset: 18265},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 626, col: 25, offset: 18268},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 626, col: 29, offset: 18272},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 32, offset: 18275},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 626, col: 37, offset: 18280},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 630, col: 1, offset: 18392},
			expr: &ruleRefExpr{
				pos:  position{line: 630, col: 13, offset: 18404},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 632, col: 1, offset: 18410},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18425},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 18425},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 11, offset: 18431},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 21, offset: 18441},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 633, col: 26, offset: 18446},
								expr: &seqExpr{
									pos: position{line: 633, col: 27, offset: 18447},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 633, col: 27, offset: 18447},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 633, col: 30, offset: 18450},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 633, col: 34, offset: 18454},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 633, col: 37, offset: 18457},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 643, col: 1, offset: 18656},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 18671},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 644, col: 5, offset: 18671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 18671},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 9, offset: 18675},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 14, offset: 18680},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 644, col: 17, offset: 18683},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 21, offset: 18687},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 24, offset: 18690},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 28, offset: 18694},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 646, col: 1, offset: 18785},
			expr: &ruleRefExpr{
				pos:  position{line: 646, col: 8, offset: 18792},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 648, col: 1, offset: 18809},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 18829},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 18829},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 18829},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 18829},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 15, offset: 18839},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 649, col: 29, offset: 18853},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 649, col: 32, offset: 18856},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 649, col: 36, offset: 18860},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 649, col: 39, offset: 18863},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 50, offset: 18874},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 649, col: 55, offset: 18879},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 649, col: 58, offset: 18882},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 649, col: 62, offset: 18886},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 649, col: 65, offset: 18889},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 76, offset: 18900},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 652, col: 5, offset: 19040},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 654, col: 1, offset: 19055},
			expr: &actionExpr{
				pos: position{line: 655, col: 5, offset: 19073},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 655, col: 5, offset: 19073},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 19073},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 11, offset: 19079},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19098},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 656, col: 10, offset: 19103},
								expr: &actionExpr{
									pos: position{line: 656, col: 11, offset: 19104},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 656, col: 11, offset: 19104},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 656, col: 11, offset: 19104},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 14, offset: 19107},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 17, offset: 19110},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 656, col: 25, offset: 19118},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 28, offset: 19121},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 33, offset: 19126},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 660, col: 1, offset: 19244},
			expr: &actionExpr{
				pos: position{line: 661, col: 5, offset: 19263},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 661, col: 5, offset: 19263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 19263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 11, offset: 19269},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 19293},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 662, col: 10, offset: 19298},
								expr: &actionExpr{
									pos: position{line: 662, col: 11, offset: 19299},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 662, col: 11, offset: 19299},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 662, col: 11, offset: 19299},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 662, col: 14, offset: 19302},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 17, offset: 19305},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 662, col: 26, offset: 19314},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 662, col: 29, offset: 19317},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 34, offset: 19322},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 666, col: 1, offset: 19445},
			expr: &actionExpr{
				pos: position{line: 667, col: 5, offset: 19469},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 667, col: 5, offset: 19469},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 19469},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 19475},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 19492},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 10, offset: 19497},
								expr: &actionExpr{
									pos: position{line: 668, col: 11, offset: 19498},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 668, col: 11, offset: 19498},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 668, col: 11, offset: 19498},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 14, offset: 19501},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 19, offset: 19506},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 668, col: 38, offset: 19525},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 41, offset: 19528},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 46, offset: 19533},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 672, col: 1, offset: 19651},
			expr: &actionExpr{
				pos: position{line: 673, col: 5, offset: 19672},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 673, col: 6, offset: 19673},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 673, col: 6, offset: 19673},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 673, col: 12, offset: 19679},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 675, col: 1, offset: 19717},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 19740},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 676, col: 5, offset: 19740},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 19761},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 677, col: 5, offset: 19761},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 679, col: 1, offset: 19798},
			expr: &actionExpr{
				pos: position{line: 680, col: 5, offset: 19815},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 680, col: 5, offset: 19815},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 19815},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 11, offset: 19821},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 5, offset: 19838},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 681, col: 10, offset: 19843},
								expr: &actionExpr{
									pos: position{line: 681, col: 11, offset: 19844},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 681, col: 11, offset: 19844},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 681, col: 11, offset: 19844},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 681, col: 14, offset: 19847},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 681, col: 17, offset: 19850},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 681, col: 34, offset: 19867},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 681, col: 37, offset: 19870},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 681, col: 42, offset: 19875},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 685, col: 1, offset: 19991},
			expr: &actionExpr{
				pos: position{line: 685, col: 20, offset: 20010},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 685, col: 21, offset: 20011},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 685, col: 21, offset: 20011},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 685, col: 28, offset: 20018},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 685, col: 34, offset: 20024},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 685, col: 41, offset: 20031},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 687, col: 1, offset: 20068},
			expr: &actionExpr{
				pos: position{line: 688, col: 5, offset: 20085},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 688, col: 5, offset: 20085},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 5, offset: 20085},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 11, offset: 20091},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 20114},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 10, offset: 20119},
								expr: &actionExpr{
									pos: position{line: 689, col: 11, offset: 20120},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 689, col: 11, offset: 20120},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 689, col: 11, offset: 20120},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 689, col: 14, offset: 20123},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 17, offset: 20126},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 689, col: 34, offset: 20143},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 689, col: 37, offset: 20146},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 42, offset: 20151},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 693, col: 1, offset: 20273},
			expr: &actionExpr{
				pos: position{line: 693, col: 20, offset: 20292},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 693, col: 21, offset: 20293},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 693, col: 21, offset: 20293},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 693, col: 27, offset: 20299},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 695, col: 1, offset: 20336},
			expr: &actionExpr{
				pos: position{line: 696, col: 5, offset: 20359},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 696, col: 5, offset: 20359},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 20359},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 11, offset: 20365},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 697, col: 5, offset: 20377},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 697, col: 10, offset: 20382},
								expr: &actionExpr{
									pos: position{line: 697, col: 11, offset: 20383},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 697, col: 11, offset: 20383},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 697, col: 11, offset: 20383},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 697, col: 14, offset: 20386},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 697, col: 17, offset: 20389},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 697, col: 40, offset: 20412},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 697, col: 43, offset: 20415},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 697, col: 48, offset: 20420},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 701, col: 1, offset: 20531},
			expr: &actionExpr{
				pos: position{line: 701, col: 26, offset: 20556},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 701, col: 27, offset: 20557},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 701, col: 27, offset: 20557},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 701, col: 33, offset: 20563},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 703, col: 1, offset: 20600},
			expr: &choiceExpr{
				pos: position{line: 704, col: 5, offset: 20612},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 20612},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 704, col: 5, offset: 20612},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 704, col: 5, offset: 20612},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 704, col: 9, offset: 20616},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 704, col: 12, offset: 20619},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 704, col: 14, offset: 20621},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 707, col: 5, offset: 20730},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 709, col: 1, offset: 20740},
			expr: &choiceExpr{
				pos: position{line: 710, col: 5, offset: 20753},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 710, col: 5, offset: 20753},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 711, col: 5, offset: 20768},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20782},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20782},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 712, col: 5, offset: 20782},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 9, offset: 20786},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 712, col: 21, offset: 20798},
									expr: &seqExpr{
										pos: position{line: 712, col: 23, offset: 20800},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 712, col: 23, offset: 20800},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 712, col: 26, offset: 20803},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20832},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 20832},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 713, col: 5, offset: 20832},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 11, offset: 20838},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 713, col: 16, offset: 20843},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 713, col: 21, offset: 20848},
										expr: &ruleRefExpr{
											pos:  position{line: 713, col: 22, offset: 20849},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20920},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 20920},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 716, col: 5, offset: 20920},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 11, offset: 20926},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 716, col: 20, offset: 20935},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 716, col: 25, offset: 20940},
										expr: &ruleRefExpr{
											pos:  position{line: 716, col: 26, offset: 20941},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 21012},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 21026},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 722, col: 1, offset: 21035},
			expr: &seqExpr{
				pos: position{line: 722, col: 13, offset: 21047},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 722, col: 13, offset: 21047},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 22, offset: 21056},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 722, col: 25, offset: 21059},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 724, col: 1, offset: 21064},
			expr: &choiceExpr{
				pos: position{line: 725, col: 5, offset: 21077},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 725, col: 5, offset: 21077},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 726, col: 5, offset: 21087},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 727, col: 5, offset: 21099},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 728, col: 5, offset: 21112},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 730, col: 1, offset: 21120},
			expr: &actionExpr{
				pos: position{line: 731, col: 5, offset: 21134},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 731, col: 5, offset: 21134},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 731, col: 5, offset: 21134},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 13, offset: 21142},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 731, col: 16, offset: 21145},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 731, col: 20, offset: 21149},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 25, offset: 21154},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 731, col: 39, offset: 21168},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 733, col: 1, offset: 21194},
			expr: &actionExpr{
				pos: position{line: 734, col: 5, offset: 21209},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 734, col: 5, offset: 21209},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 734, col: 5, offset: 21209},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 14, offset: 21218},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 734, col: 17, offset: 21221},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 21, offset: 21225},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 24, offset: 21228},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 29, offset: 21233},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 35, offset: 21239},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 734, col: 38, offset: 21242},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 734, col: 42, offset: 21246},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 50, offset: 21254},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 742, col: 1, offset: 21652},
			expr: &choiceExpr{
				pos: position{line: 743, col: 5, offset: 21664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21664},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 743, col: 5, offset: 21664},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 743, col: 13, offset: 21672},
								expr: &ruleRefExpr{
									pos:  position{line: 743, col: 13, offset: 21672},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21708},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 744, col: 5, offset: 21708},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 746, col: 1, offset: 21732},
			expr: &actionExpr{
				pos: position{line: 747, col: 5, offset: 21743},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 747, col: 5, offset: 21743},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 747, col: 5, offset: 21743},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 747, col: 8, offset: 21746},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 12, offset: 21750},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 15, offset: 21753},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 17, offset: 21755},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 749, col: 1, offset: 21783},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 21792},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 750, col: 5, offset: 21792},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 750, col: 5, offset: 21792},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 9, offset: 21796},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 18, offset: 21805},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 750, col: 21, offset: 21808},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 25, offset: 21812},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 750, col: 28, offset: 21815},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 33, offset: 21820},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 38, offset: 21825},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 750, col: 41, offset: 21828},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 754, col: 1, offset: 21925},
			expr: &actionExpr{
				pos: position{line: 755, col: 5, offset: 21938},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 755, col: 5, offset: 21938},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 755, col: 5, offset: 21938},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 6, offset: 21939},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 755, col: 16, offset: 21949},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 19, offset: 21952},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 34, offset: 21967},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 37, offset: 21970},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 41, offset: 21974},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 44, offset: 21977},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 49, offset: 21982},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 63, offset: 21996},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 66, offset: 21999},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 759, col: 1, offset: 22095},
			expr: &choiceExpr{
				pos: position{line: 760, col: 5, offset: 22113},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 760, col: 5, offset: 22113},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 761, col: 5, offset: 22123},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 761, col: 5, offset: 22123},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 763, col: 1, offset: 22159},
			expr: &actionExpr{
				pos: position{line: 764, col: 5, offset: 22169},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 764, col: 5, offset: 22169},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 764, col: 5, offset: 22169},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 11, offset: 22175},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 764, col: 16, offset: 22180},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 764, col: 21, offset: 22185},
								expr: &actionExpr{
									pos: position{line: 764, col: 22, offset: 22186},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 764, col: 22, offset: 22186},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 764, col: 22, offset: 22186},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 764, col: 25, offset: 22189},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 764, col: 29, offset: 22193},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 764, col: 32, offset: 22196},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 764, col: 34, offset: 22198},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 768, col: 1, offset: 22307},
			expr: &choiceExpr{
				pos: position{line: 769, col: 5, offset: 22321},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22321},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 769, col: 5, offset: 22321},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 769, col: 5, offset: 22321},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 11, offset: 22327},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 769, col: 17, offset: 22333},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 769, col: 22, offset: 22338},
										expr: &ruleRefExpr{
											pos:  position{line: 769, col: 23, offset: 22339},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 22410},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 772, col: 5, offset: 22410},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 772, col: 5, offset: 22410},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 22416},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 772, col: 22, offset: 22427},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 772, col: 27, offset: 22432},
										expr: &ruleRefExpr{
											pos:  position{line: 772, col: 28, offset: 22433},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 22504},
						run: (*parser).callonDerefExpr16,
						expr: &seqExpr{
							pos: position{line: 775, col: 5, offset: 22504},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 775, col: 5, offset: 22504},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 22510},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 775, col: 22, offset: 22521},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 775, col: 27, offset: 22526},
										expr: &ruleRefExpr{
											pos:  position{line: 775, col: 28, offset: 22527},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22598},
						run: (*parser).callonDerefExpr23,
						expr: &litMatcher{
							pos:        position{line: 778, col: 5, offset: 22598},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 782, col: 1, offset: 22667},
			expr: &actionExpr{
				pos: position{line: 782, col: 14, offset: 22680},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 782, col: 14, offset: 22680},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 784, col: 1, offset: 22742},
			expr: &choiceExpr{
				pos: position{line: 785, col: 5, offset: 22752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 22752},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 22752},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 785, col: 5, offset: 22752},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 785, col: 9, offset: 22756},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 15, offset: 22762},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 794, col: 5, offset: 22978},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 794, col: 5, offset: 22978},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 794, col: 5, offset: 22978},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 794, col: 9, offset: 22982},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 794, col: 13, offset: 22986},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 794, col: 18, offset: 22991},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 794, col: 23, offset: 22996},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 804, col: 1, offset: 23201},
			expr: &choiceExpr{
				pos: position{line: 805, col: 5, offset: 23211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 23211},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 805, col: 5, offset: 23211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 805, col: 5, offset: 23211},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 805, col: 9, offset: 23215},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 14, offset: 23220},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 27, offset: 23233},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 805, col: 30, offset: 23236},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 34, offset: 23240},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 805, col: 37, offset: 23243},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 40, offset: 23246},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 805, col: 53, offset: 23259},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 811, col: 5, offset: 23430},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 811, col: 5, offset: 23430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 811, col: 5, offset: 23430},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 811, col: 9, offset: 23434},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 811, col: 12, offset: 23437},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 811, col: 16, offset: 23441},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 811, col: 19, offset: 23444},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 811, col: 22, offset: 23447},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 811, col: 35, offset: 23460},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 23631},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 817, col: 5, offset: 23631},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 817, col: 5, offset: 23631},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 817, col: 9, offset: 23635},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 14, offset: 23640},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 27, offset: 23653},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 817, col: 30, offset: 23656},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 34, offset: 23660},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 817, col: 37, offset: 23663},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 23836},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 23836},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 823, col: 5, offset: 23836},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 823, col: 9, offset: 23840},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 14, offset: 23845},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 823, col: 19, offset: 23850},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 23899},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 824, col: 5, offset: 23899},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 824, col: 5, offset: 23899},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 824, col: 9, offset: 23903},
									expr: &litMatcher{
										pos:        position{line: 824, col: 11, offset: 23905},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 824, col: 16, offset: 23910},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 824, col: 19, offset: 23913},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 826, col: 1, offset: 23964},
			expr: &choiceExpr{
				pos: position{line: 827, col: 5, offset: 23976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 827, col: 5, offset: 23976},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 23988},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 829, col: 5, offset: 23999},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 830, col: 5, offset: 24009},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 831, col: 5, offset: 24017},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 24025},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 24025},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 832, col: 5, offset: 24025},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 832, col: 9, offset: 24029},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 832, col: 12, offset: 24032},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 17, offset: 24037},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 832, col: 22, offset: 24042},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 832, col: 25, offset: 24045},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 834, col: 1, offset: 24071},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 24082},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 835, col: 5, offset: 24082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 835, col: 5, offset: 24082},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 835, col: 9, offset: 24086},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 835, col: 12, offset: 24089},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 19, offset: 24096},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 835, col: 26, offset: 24103},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 835, col: 29, offset: 24106},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 839, col: 1, offset: 24199},
			expr: &actionExpr{
				pos: position{line: 840, col: 5, offset: 24210},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 840, col: 5, offset: 24210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 840, col: 5, offset: 24210},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 840, col: 11, offset: 24216},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 840, col: 17, offset: 24222},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 840, col: 22, offset: 24227},
								expr: &ruleRefExpr{
									pos:  position{line: 840, col: 22, offset: 24227},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 844, col: 1, offset: 24318},
			expr: &actionExpr{
				pos: position{line: 844, col: 13, offset: 24330},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 844, col: 13, offset: 24330},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 844, col: 13, offset: 24330},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 844, col: 16, offset: 24333},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 844, col: 20, offset: 24337},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 844, col: 23, offset: 24340},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 25, offset: 24342},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 846, col: 1, offset: 24367},
			expr: &actionExpr{
				pos: position{line: 847, col: 5, offset: 24377},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 847, col: 5, offset: 24377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 847, col: 5, offset: 24377},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 10, offset: 24382},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 847, col: 20, offset: 24392},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 847, col: 23, offset: 24395},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 847, col: 27, offset: 24399},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 847, col: 30, offset: 24402},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 36, offset: 24408},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 851, col: 1, offset: 24493},
			expr: &actionExpr{
				pos: position{line: 852, col: 5, offset: 24503},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 852, col: 5, offset: 24503},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 852, col: 5, offset: 24503},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 852, col: 9, offset: 24507},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 852, col: 12, offset: 24510},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 18, offset: 24516},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 852, col: 32, offset: 24530},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 852, col: 35, offset: 24533},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 856, col: 1, offset: 24623},
			expr: &actionExpr{
				pos: position{line: 857, col: 5, offset: 24631},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 857, col: 5, offset: 24631},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 857, col: 5, offset: 24631},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 10, offset: 24636},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 857, col: 13, offset: 24639},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 19, offset: 24645},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 33, offset: 24659},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 857, col: 36, offset: 24662},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 861, col: 1, offset: 24751},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 24759},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 24759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 862, col: 5, offset: 24759},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 10, offset: 24764},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 862, col: 13, offset: 24767},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 19, offset: 24773},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 27, offset: 24781},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 862, col: 30, offset: 24784},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 866, col: 1, offset: 24875},
			expr: &choiceExpr{
				pos: position{line: 867, col: 5, offset: 24887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 24887},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 24887},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 867, col: 5, offset: 24887},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 867, col: 11, offset: 24893},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 867, col: 17, offset: 24899},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 867, col: 22, offset: 24904},
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 22, offset: 24904},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 24998},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 870, col: 5, offset: 24998},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 873, col: 1, offset: 25035},
			expr: &actionExpr{
				pos: position{line: 873, col: 13, offset: 25047},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 873, col: 13, offset: 25047},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 873, col: 13, offset: 25047},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 873, col: 16, offset: 25050},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 873, col: 20, offset: 25054},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 873, col: 23, offset: 25057},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 25, offset: 25059},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 875, col: 1, offset: 25084},
			expr: &actionExpr{
				pos: position{line: 876, col: 5, offset: 25094},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 876, col: 5, offset: 25094},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 876, col: 5, offset: 25094},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 9, offset: 25098},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 14, offset: 25103},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 876, col: 17, offset: 25106},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 21, offset: 25110},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 24, offset: 25113},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 30, offset: 25119},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 882, col: 1, offset: 25226},
			expr: &actionExpr{
				pos: position{line: 883, col: 5, offset: 25238},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 883, col: 5, offset: 25238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 25238},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 15, offset: 25248},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 25262},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 10, offset: 25267},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 25279},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 11, offset: 25285},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 886, col: 5, offset: 25298},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 11, offset: 25304},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 887, col: 5, offset: 25317},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 13, offset: 25325},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 5, offset: 25340},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 12, offset: 25347},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 889, col: 5, offset: 25361},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 889, col: 13, offset: 25369},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 25384},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 11, offset: 25390},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 914, col: 1, offset: 25757},
			expr: &choiceExpr{
				pos: position{line: 915, col: 5, offset: 25771},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 25771},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 25771},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 915, col: 5, offset: 25771},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 915, col: 12, offset: 25778},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 915, col: 14, offset: 25780},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 25808},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 25808},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 916, col: 5, offset: 25808},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 916, col: 12, offset: 25815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 916, col: 14, offset: 25817},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 26, offset: 25829},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 918, col: 1, offset: 25873},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 25891},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 25891},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 25891},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 5, offset: 25891},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 9, offset: 25895},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 14, offset: 25900},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 16, offset: 25902},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 19, offset: 25905},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 919, col: 21, offset: 25907},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 25, offset: 25911},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 26005},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 920, col: 5, offset: 26005},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 920, col: 10, offset: 26010},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 922, col: 1, offset: 26102},
			expr: &actionExpr{
				pos: position{line: 923, col: 5, offset: 26121},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 923, col: 5, offset: 26121},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 923, col: 5, offset: 26121},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 26127},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 25, offset: 26141},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 923, col: 30, offset: 26146},
								expr: &actionExpr{
									pos: position{line: 923, col: 31, offset: 26147},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 923, col: 31, offset: 26147},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 923, col: 31, offset: 26147},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 923, col: 34, offset: 26150},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 923, col: 38, offset: 26154},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 923, col: 41, offset: 26157},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 923, col: 46, offset: 26162},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 927, col: 1, offset: 26283},
			expr: &choiceExpr{
				pos: position{line: 928, col: 5, offset: 26295},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 928, col: 5, offset: 26295},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 928, col: 5, offset: 26295},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 928, col: 5, offset: 26295},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 928, col: 7, offset: 26297},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 928, col: 12, offset: 26302},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 928, col: 14, offset: 26304},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 20, offset: 26310},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 928, col: 29, offset: 26319},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 35, offset: 26325},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 26419},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 26419},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 931, col: 5, offset: 26419},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 931, col: 7, offset: 26421},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 931, col: 12, offset: 26426},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 931, col: 14, offset: 26428},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 26456},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 932, col: 5, offset: 26456},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 934, col: 1, offset: 26480},
			expr: &choiceExpr{
				pos: position{line: 935, col: 5, offset: 26493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 26493},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 935, col: 5, offset: 26493},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 935, col: 5, offset: 26493},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 7, offset: 26495},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 10, offset: 26498},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 935, col: 12, offset: 26500},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 15, offset: 26503},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 26531},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 26531},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 936, col: 5, offset: 26531},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 7, offset: 26533},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 10, offset: 26536},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 26564},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 937, col: 5, offset: 26564},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 939, col: 1, offset: 26588},
			expr: &ruleRefExpr{
				pos:  position{line: 940, col: 5, offset: 26601},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 942, col: 1, offset: 26607},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 26620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 26620},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 26620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 943, col: 5, offset: 26620},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 11, offset: 26626},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 943, col: 19, offset: 26634},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 943, col: 24, offset: 26639},
										expr: &actionExpr{
											pos: position{line: 943, col: 25, offset: 26640},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 943, col: 25, offset: 26640},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 943, col: 30, offset: 26645},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 26763},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 946, col: 5, offset: 26763},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 948, col: 1, offset: 26787},
			expr: &actionExpr{
				pos: position{line: 949, col: 5, offset: 26799},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 949, col: 5, offset: 26799},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 949, col: 5, offset: 26799},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 11, offset: 26805},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 24, offset: 26818},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 26, offset: 26820},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 31, offset: 26825},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 949, col: 33, offset: 26827},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 39, offset: 26833},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 949, col: 48, offset: 26842},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 54, offset: 26848},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 63, offset: 26857},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 65, offset: 26859},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 68, offset: 26862},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 949, col: 70, offset: 26864},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 78, offset: 26872},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 86, offset: 26880},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 949, col: 89, offset: 26883},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 93, offset: 26887},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 949, col: 96, offset: 26890},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 105, offset: 26899},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 968, col: 1, offset: 27134},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 27151},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27151},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 27151},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 969, col: 5, offset: 27151},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 969, col: 7, offset: 27153},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 969, col: 14, offset: 27160},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 969, col: 14, offset: 27160},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 969, col: 21, offset: 27167},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 969, col: 29, offset: 27175},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 27208},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 970, col: 5, offset: 27208},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 972, col: 1, offset: 27244},
			expr: &choiceExpr{
				pos: position{line: 973, col: 5, offset: 27257},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 27257},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 27257},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 973, col: 5, offset: 27257},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 973, col: 7, offset: 27259},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 973, col: 13, offset: 27265},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 973, col: 15, offset: 27267},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 20, offset: 27272},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 974, col: 5, offset: 27311},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 974, col: 5, offset: 27311},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 976, col: 1, offset: 27335},
			expr: &choiceExpr{
				pos: position{line: 977, col: 5, offset: 27350},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 977, col: 5, offset: 27350},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 977, col: 5, offset: 27350},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 977, col: 5, offset: 27350},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 977, col: 7, offset: 27352},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 977, col: 13, offset: 27358},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 977, col: 15, offset: 27360},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 977, col: 18, offset: 27363},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 977, col: 20, offset: 27365},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 28, offset: 27373},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 978, col: 5, offset: 27412},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 978, col: 5, offset: 27412},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 980, col: 1, offset: 27436},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 27450},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 27450},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 27450},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 981, col: 5, offset: 27450},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 981, col: 7, offset: 27452},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 981, col: 14, offset: 27459},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 16, offset: 27461},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 21, offset: 27466},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 27505},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 982, col: 5, offset: 27505},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 984, col: 1, offset: 27529},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 27544},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 27544},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 985, col: 5, offset: 27544},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 985, col: 5, offset: 27544},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 985, col: 7, offset: 27546},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 985, col: 13, offset: 27552},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 985, col: 15, offset: 27554},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 985, col: 18, offset: 27557},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 985, col: 20, offset: 27559},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 25, offset: 27564},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 985, col: 31, offset: 27570},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 37, offset: 27576},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 988, col: 5, offset: 27689},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 988, col: 5, offset: 27689},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 990, col: 1, offset: 27713},
			expr: &choiceExpr{
				pos: position{line: 991, col: 5, offset: 27726},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 27726},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 991, col: 5, offset: 27726},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 991, col: 5, offset: 27726},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 991, col: 7, offset: 27728},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 991, col: 12, offset: 27733},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 991, col: 12, offset: 27733},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 991, col: 18, offset: 27739},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 27769},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 992, col: 5, offset: 27769},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 994, col: 1, offset: 27795},
			expr: &choiceExpr{
				pos: position{line: 995, col: 5, offset: 27808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 995, col: 5, offset: 27808},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 995, col: 5, offset: 27808},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 995, col: 5, offset: 27808},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 7, offset: 27810},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 13, offset: 27816},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 995, col: 15, offset: 27818},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 995, col: 21, offset: 27824},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 996, col: 5, offset: 27855},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 996, col: 5, offset: 27855},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 998, col: 1, offset: 27877},
			expr: &actionExpr{
				pos: position{line: 998, col: 10, offset: 27886},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 998, col: 10, offset: 27886},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 999, col: 1, offset: 27921},
			expr: &actionExpr{
				pos: position{line: 999, col: 6, offset: 27926},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 999, col: 6, offset: 27926},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 1000, col: 1, offset: 27953},
			expr: &actionExpr{
				pos: position{line: 1000, col: 8, offset: 27960},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 1000, col: 8, offset: 27960},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 1001, col: 1, offset: 27991},
			expr: &actionExpr{
				pos: position{line: 1001, col: 8, offset: 27998},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 1001, col: 8, offset: 27998},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1002, col: 1, offset: 28029},
			expr: &actionExpr{
				pos: position{line: 1002, col: 9, offset: 28037},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1002, col: 9, offset: 28037},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1003, col: 1, offset: 28070},
			expr: &actionExpr{
				pos: position{line: 1003, col: 9, offset: 28078},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1003, col: 9, offset: 28078},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1004, col: 1, offset: 28111},
			expr: &ruleRefExpr{
				pos:  position{line: 1004, col: 6, offset: 28116},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1005, col: 1, offset: 28124},
			expr: &actionExpr{
				pos: position{line: 1005, col: 10, offset: 28133},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1005, col: 10, offset: 28133},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1006, col: 1, offset: 28168},
			expr: &actionExpr{
				pos: position{line: 1006, col: 9, offset: 28176},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 9, offset: 28176},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1007, col: 1, offset: 28209},
			expr: &actionExpr{
				pos: position{line: 1007, col: 6, offset: 28214},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1007, col: 6, offset: 28214},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1008, col: 1, offset: 28241},
			expr: &actionExpr{
				pos: position{line: 1008, col: 9, offset: 28249},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1008, col: 9, offset: 28249},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1009, col: 1, offset: 28282},
			expr: &actionExpr{
				pos: position{line: 1009, col: 7, offset: 28288},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1009, col: 7, offset: 28288},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1010, col: 1, offset: 28317},
			expr: &actionExpr{
				pos: position{line: 1010, col: 8, offset: 28324},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1010, col: 8, offset: 28324},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1011, col: 1, offset: 28355},
			expr: &actionExpr{
				pos: position{line: 1011, col: 8, offset: 28362},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1011, col: 8, offset: 28362},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1012, col: 1, offset: 28393},
			expr: &actionExpr{
				pos: position{line: 1012, col: 9, offset: 28401},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1012, col: 9, offset: 28401},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1013, col: 1, offset: 28434},
			expr: &actionExpr{
				pos: position{line: 1013, col: 9, offset: 28442},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1013, col: 9, offset: 28442},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1015, col: 1, offset: 28476},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 5, offset: 28498},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1016, col: 5, offset: 28498},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 14, offset: 28507},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 19, offset: 28512},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 27, offset: 28520},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 34, offset: 28527},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 42, offset: 28535},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 50, offset: 28543},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 59, offset: 28552},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 67, offset: 28560},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 75, offset: 28568},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1020, col: 1, offset: 28594},
			expr: &choiceExpr{
				pos: position{line: 1021, col: 5, offset: 28606},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1021, col: 5, offset: 28606},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 5, offset: 28622},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 5, offset: 28640},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 5, offset: 28658},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 28677},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 5, offset: 28690},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 5, offset: 28699},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 5, offset: 28716},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 5, offset: 28735},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 5, offset: 28754},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1032, col: 1, offset: 28767},
			expr: &actionExpr{
				pos: position{line: 1033, col: 5, offset: 28785},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1033, col: 5, offset: 28785},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1033, col: 7, offset: 28787},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1037, col: 1, offset: 28900},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 28918},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1038, col: 5, offset: 28918},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1038, col: 5, offset: 28918},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1038, col: 5, offset: 28918},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1038, col: 7, offset: 28920},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1038, col: 14, offset: 28927},
									expr: &ruleRefExpr{
										pos:  position{line: 1038, col: 15, offset: 28928},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1041, col: 5, offset: 29043},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1041, col: 5, offset: 29043},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 7, offset: 29045},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1045, col: 1, offset: 29149},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 5, offset: 29168},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 29168},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1046, col: 5, offset: 29168},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1046, col: 5, offset: 29168},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 7, offset: 29170},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1046, col: 11, offset: 29174},
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 12, offset: 29175},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1049, col: 5, offset: 29289},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1049, col: 5, offset: 29289},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 7, offset: 29291},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1053, col: 1, offset: 29390},
			expr: &actionExpr{
				pos: position{line: 1054, col: 5, offset: 29407},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1054, col: 5, offset: 29407},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1054, col: 7, offset: 29409},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1058, col: 1, offset: 29522},
			expr: &actionExpr{
				pos: position{line: 1059, col: 5, offset: 29541},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1059, col: 5, offset: 29541},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1059, col: 7, offset: 29543},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1063, col: 1, offset: 29652},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 5, offset: 29671},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1064, col: 5, offset: 29671},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1064, col: 5, offset: 29671},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 29784},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1065, col: 5, offset: 29784},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1067, col: 1, offset: 29895},
			expr: &actionExpr{
				pos: position{line: 1068, col: 5, offset: 29911},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1068, col: 5, offset: 29911},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1070, col: 1, offset: 30017},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 30033},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1071, col: 5, offset: 30033},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1071, col: 5, offset: 30033},
							expr: &seqExpr{
								pos: position{line: 1071, col: 7, offset: 30035},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1071, col: 7, offset: 30035},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 1071, col: 25, offset: 30053},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1071, col: 30, offset: 30058},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1071, col: 34, offset: 30062},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1075, col: 1, offset: 30160},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 30173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1076, col: 5, offset: 30173},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 5, offset: 30190},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 1079, col: 1, offset: 30205},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 30222},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1080, col: 5, offset: 30222},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 5, offset: 30239},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 30263},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 1082, col: 5, offset: 30263},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1082, col: 5, offset: 30263},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 9, offset: 30267},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 1082, col: 31, offset: 30289},
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 32, offset: 30290},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1084, col: 1, offset: 30326},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 5, offset: 30335},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1085, col: 5, offset: 30335},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 5, offset: 30352},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 5, offset: 30370},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 1089, col: 1, offset: 30383},
			expr: &choiceExpr{
				pos: position{line: 1090, col: 5, offset: 30400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1090, col: 5, offset: 30400},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 1090, col: 5, offset: 30400},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1090, col: 5, offset: 30400},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1090, col: 12, offset: 30407},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1090, col: 15, offset: 30410},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1090, col: 19, offset: 30414},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1090, col: 22, offset: 30417},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1090, col: 26, offset: 30421},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1090, col: 31, offset: 30426},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1090, col: 34, offset: 30429},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1091, col: 5, offset: 30456},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 1091, col: 5, offset: 30456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 5, offset: 30456},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 12, offset: 30463},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1091, col: 15, offset: 30466},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 19, offset: 30470},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 22, offset: 30473},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 26, offset: 30477},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 36, offset: 30487},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1091, col: 39, offset: 30490},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1093, col: 1, offset: 30515},
			expr: &choiceExpr{
				pos: position{line: 1094, col: 5, offset: 30533},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 30533},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 30533},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1094, col: 5, offset: 30533},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 10, offset: 30538},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1094, col: 24, offset: 30552},
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 25, offset: 30553},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1095, col: 5, offset: 30593},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1095, col: 5, offset: 30593},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1095, col: 5, offset: 30593},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 10, offset: 30598},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 25, offset: 30613},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1095, col: 28, offset: 30616},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 32, offset: 30620},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1095, col: 35, offset: 30623},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 39, offset: 30627},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 42, offset: 30630},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 46, offset: 30634},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 51, offset: 30639},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1095, col: 54, offset: 30642},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 30743},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1098, col: 5, offset: 30743},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 10, offset: 30748},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1101, col: 5, offset: 30850},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1101, col: 5, offset: 30850},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1101, col: 5, offset: 30850},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1101, col: 9, offset: 30854},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 12, offset: 30857},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 14, offset: 30859},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 25, offset: 30870},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1103, col: 1, offset: 30893},
			expr: &actionExpr{
				pos: position{line: 1104, col: 5, offset: 30907},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1104, col: 5, offset: 30907},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1104, col: 11, offset: 30913},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1108, col: 1, offset: 31009},
			expr: &actionExpr{
				pos: position{line: 1109, col: 5, offset: 31022},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 5, offset: 31022},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1109, col: 5, offset: 31022},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 11, offset: 31028},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1109, col: 16, offset: 31033},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1109, col: 21, offset: 31038},
								expr: &ruleRefExpr{
									pos:  position{line: 1109, col: 21, offset: 31038},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1113, col: 1, offset: 31132},
			expr: &actionExpr{
				pos: position{line: 1113, col: 16, offset: 31147},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 16, offset: 31147},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1113, col: 16, offset: 31147},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1113, col: 19, offset: 31150},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1113, col: 23, offset: 31154},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1113, col: 26, offset: 31157},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1113, col: 30, offset: 31161},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1115, col: 1, offset: 31187},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 5, offset: 31203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 31203},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1116, col: 5, offset: 31203},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1116, col: 5, offset: 31203},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 9, offset: 31207},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 12, offset: 31210},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 19, offset: 31217},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 33, offset: 31231},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1116, col: 36, offset: 31234},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1119, col: 5, offset: 31329},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1119, col: 5, offset: 31329},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1119, col: 5, offset: 31329},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1119, col: 9, offset: 31333},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1119, col: 12, offset: 31336},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1119, col: 16, offset: 31340},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1119, col: 21, offset: 31345},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1119, col: 24, offset: 31348},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1122, col: 5, offset: 31437},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1122, col: 5, offset: 31437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1122, col: 5, offset: 31437},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 10, offset: 31442},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 14, offset: 31446},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1122, col: 18, offset: 31450},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 23, offset: 31455},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1122, col: 26, offset: 31458},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 31546},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1125, col: 5, offset: 31546},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1125, col: 5, offset: 31546},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 10, offset: 31551},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1125, col: 13, offset: 31554},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1125, col: 21, offset: 31562},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 26, offset: 31567},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1125, col: 29, offset: 31570},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 33, offset: 31574},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1125, col: 36, offset: 31577},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1125, col: 44, offset: 31585},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 49, offset: 31590},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1125, col: 52, offset: 31593},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1129, col: 1, offset: 31707},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 5, offset: 31731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 31731},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 31731},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1130, col: 5, offset: 31731},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1130, col: 9, offset: 31735},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 12, offset: 31738},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1130, col: 19, offset: 31745},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1130, col: 33, offset: 31759},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1130, col: 36, offset: 31762},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 31857},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1133, col: 5, offset: 31857},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1133, col: 5, offset: 31857},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 9, offset: 31861},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1133, col: 12, offset: 31864},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 16, offset: 31868},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 29, offset: 31881},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1133, col: 32, offset: 31884},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 31973},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1136, col: 5, offset: 31973},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1136, col: 5, offset: 31973},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 10, offset: 31978},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 13, offset: 31981},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 17, offset: 31985},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 30, offset: 31998},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1136, col: 33, offset: 32001},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 32089},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 32089},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 5, offset: 32089},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 10, offset: 32094},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 13, offset: 32097},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 21, offset: 32105},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 34, offset: 32118},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1139, col: 37, offset: 32121},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 41, offset: 32125},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 44, offset: 32128},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 52, offset: 32136},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 65, offset: 32149},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1139, col: 68, offset: 32152},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1143, col: 1, offset: 32266},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 32284},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 5, offset: 32284},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 5, offset: 32310},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1151, col: 1, offset: 32569},
			expr: &actionExpr{
				pos: position{line: 1152, col: 5, offset: 32595},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1152, col: 9, offset: 32599},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1152, col: 9, offset: 32599},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 19, offset: 32609},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 30, offset: 32620},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 41, offset: 32631},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1153, col: 9, offset: 32648},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1153, col: 18, offset: 32657},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1153, col: 28, offset: 32667},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1153, col: 38, offset: 32677},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1154, col: 9, offset: 32693},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1155, col: 9, offset: 32711},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1155, col: 18, offset: 32720},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1166, col: 1, offset: 33361},
			expr: &actionExpr{
				pos: position{line: 1167, col: 5, offset: 33387},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1167, col: 9, offset: 33391},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 9, offset: 33391},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1167, col: 22, offset: 33404},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1168, col: 9, offset: 33419},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 9, offset: 33435},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 9, offset: 33453},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 16, offset: 33460},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 9, offset: 33474},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 18, offset: 33483},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 28, offset: 33493},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1175, col: 1, offset: 33609},
			expr: &actionExpr{
				pos: position{line: 1176, col: 5, offset: 33627},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1176, col: 5, offset: 33627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1176, col: 5, offset: 33627},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1176, col: 11, offset: 33633},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1176, col: 21, offset: 33643},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1176, col: 26, offset: 33648},
								expr: &ruleRefExpr{
									pos:  position{line: 1176, col: 26, offset: 33648},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1180, col: 1, offset: 33747},
			expr: &actionExpr{
				pos: position{line: 1180, col: 21, offset: 33767},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 21, offset: 33767},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1180, col: 21, offset: 33767},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1180, col: 24, offset: 33770},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 28, offset: 33774},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 31, offset: 33777},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 35, offset: 33781},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1182, col: 1, offset: 33812},
			expr: &actionExpr{
				pos: position{line: 1183, col: 5, offset: 33826},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 5, offset: 33826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1183, col: 5, offset: 33826},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1183, col: 10, offset: 33831},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 20, offset: 33841},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1183, col: 23, offset: 33844},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 27, offset: 33848},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1183, col: 30, offset: 33851},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1183, col: 34, offset: 33855},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1187, col: 1, offset: 33937},
			expr: &actionExpr{
				pos: position{line: 1188, col: 5, offset: 33963},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 5, offset: 33963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 5, offset: 33963},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1188, col: 11, offset: 33969},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 21, offset: 33979},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1188, col: 26, offset: 33984},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 26, offset: 33984},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1192, col: 1, offset: 34091},
			expr: &actionExpr{
				pos: position{line: 1192, col: 29, offset: 34119},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 29, offset: 34119},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1192, col: 29, offset: 34119},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1192, col: 32, offset: 34122},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1192, col: 36, offset: 34126},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 39, offset: 34129},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 43, offset: 34133},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1194, col: 1, offset: 34172},
			expr: &actionExpr{
				pos: position{line: 1195, col: 5, offset: 34194},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 5, offset: 34194},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1195, col: 5, offset: 34194},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 10, offset: 34199},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 20, offset: 34209},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1195, col: 23, offset: 34212},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 27, offset: 34216},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 30, offset: 34219},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 34, offset: 34223},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1199, col: 1, offset: 34313},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 5, offset: 34327},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1200, col: 5, offset: 34327},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 5, offset: 34346},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1203, col: 1, offset: 34360},
			expr: &choiceExpr{
				pos: position{line: 1204, col: 5, offset: 34378},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1204, col: 5, offset: 34378},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 24, offset: 34397},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1206, col: 1, offset: 34415},
			expr: &actionExpr{
				pos: position{line: 1206, col: 12, offset: 34426},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 12, offset: 34426},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1206, col: 12, offset: 34426},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1206, col: 19, offset: 34433},
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 20, offset: 34434},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1207, col: 1, offset: 34471},
			expr: &actionExpr{
				pos: position{line: 1207, col: 11, offset: 34481},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 11, offset: 34481},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1207, col: 11, offset: 34481},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1207, col: 17, offset: 34487},
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 18, offset: 34488},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1208, col: 1, offset: 34524},
			expr: &actionExpr{
				pos: position{line: 1208, col: 11, offset: 34534},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 11, offset: 34534},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1208, col: 11, offset: 34534},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1208, col: 17, offset: 34540},
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 18, offset: 34541},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1209, col: 1, offset: 34577},
			expr: &actionExpr{
				pos: position{line: 1209, col: 12, offset: 34588},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 12, offset: 34588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1209, col: 12, offset: 34588},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1209, col: 19, offset: 34595},
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 20, offset: 34596},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1210, col: 1, offset: 34633},
			expr: &actionExpr{
				pos: position{line: 1210, col: 11, offset: 34643},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 11, offset: 34643},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1210, col: 11, offset: 34643},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1210, col: 17, offset: 34649},
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 18, offset: 34650},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1212, col: 1, offset: 34687},
			expr: &charClassMatcher{
				pos:        position{line: 1212, col: 19, offset: 34705},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1214, col: 1, offset: 34717},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 18, offset: 34734},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1214, col: 18, offset: 34734},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1214, col: 36, offset: 34752},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1216, col: 1, offset: 34759},
			expr: &actionExpr{
				pos: position{line: 1217, col: 5, offset: 34774},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1217, col: 5, offset: 34774},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1217, col: 8, offset: 34777},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1219, col: 1, offset: 34858},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 5, offset: 34877},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1220, col: 5, offset: 34877},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1220, col: 5, offset: 34877},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1220, col: 5, offset: 34877},
									expr: &seqExpr{
										pos: position{line: 1220, col: 7, offset: 34879},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1220, col: 7, offset: 34879},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1220, col: 15, offset: 34887},
												expr: &ruleRefExpr{
													pos:  position{line: 1220, col: 16, offset: 34888},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1220, col: 32, offset: 34904},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1220, col: 48, offset: 34920},
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 48, offset: 34920},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 34972},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1221, col: 5, offset: 34972},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1222, col: 5, offset: 35011},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1222, col: 5, offset: 35011},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1222, col: 5, offset: 35011},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1222, col: 10, offset: 35016},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1222, col: 13, offset: 35019},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1224, col: 5, offset: 35110},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1224, col: 5, offset: 35110},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1225, col: 5, offset: 35152},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1225, col: 5, offset: 35152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1225, col: 5, offset: 35152},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 8, offset: 35155},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1225, col: 26, offset: 35173},
									expr: &seqExpr{
										pos: position{line: 1225, col: 28, offset: 35175},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1225, col: 28, offset: 35175},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1225, col: 31, offset: 35178},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1227, col: 1, offset: 35203},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 5, offset: 35215},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1228, col: 5, offset: 35215},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 5, offset: 35234},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 5, offset: 35250},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 5, offset: 35267},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1233, col: 1, offset: 35280},
			expr: &actionExpr{
				pos: position{line: 1234, col: 5, offset: 35289},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 5, offset: 35289},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1234, col: 5, offset: 35289},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1234, col: 14, offset: 35298},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1234, col: 18, offset: 35302},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1238, col: 1, offset: 35422},
			expr: &seqExpr{
				pos: position{line: 1238, col: 12, offset: 35433},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1238, col: 12, offset: 35433},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1238, col: 15, offset: 35436},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 19, offset: 35440},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1238, col: 22, offset: 35443},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 26, offset: 35447},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1240, col: 1, offset: 35451},
			expr: &seqExpr{
				pos: position{line: 1240, col: 6, offset: 35456},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1240, col: 6, offset: 35456},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1240, col: 11, offset: 35461},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1240, col: 16, offset: 35466},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1240, col: 21, offset: 35471},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1241, col: 1, offset: 35477},
			expr: &seqExpr{
				pos: position{line: 1241, col: 6, offset: 35482},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1241, col: 6, offset: 35482},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1241, col: 11, offset: 35487},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1243, col: 1, offset: 35494},
			expr: &seqExpr{
				pos: position{line: 1243, col: 12, offset: 35505},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1243, col: 12, offset: 35505},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 24, offset: 35517},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1245, col: 1, offset: 35529},
			expr: &seqExpr{
				pos: position{line: 1245, col: 15, offset: 35543},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1245, col: 15, offset: 35543},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1245, col: 18, offset: 35546},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 22, offset: 35550},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1245, col: 25, offset: 35553},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 29, offset: 35557},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1245, col: 32, offset: 35560},
						expr: &seqExpr{
							pos: position{line: 1245, col: 33, offset: 35561},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1245, col: 33, offset: 35561},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1245, col: 37, offset: 35565},
									expr: &charClassMatcher{
										pos:        position{line: 1245, col: 37, offset: 35565},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1247, col: 1, offset: 35575},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 5, offset: 35590},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1248, col: 5, offset: 35590},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1249, col: 5, offset: 35598},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1249, col: 6, offset: 35599},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1249, col: 6, offset: 35599},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1249, col: 12, offset: 35605},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1249, col: 17, offset: 35610},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1249, col: 20, offset: 35613},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1249, col: 24, offset: 35617},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1249, col: 27, offset: 35620},
								expr: &seqExpr{
									pos: position{line: 1249, col: 28, offset: 35621},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1249, col: 28, offset: 35621},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1249, col: 32, offset: 35625},
											expr: &charClassMatcher{
												pos:        position{line: 1249, col: 32, offset: 35625},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1251, col: 1, offset: 35635},
			expr: &actionExpr{
				pos: position{line: 1252, col: 5, offset: 35648},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 5, offset: 35648},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1252, col: 5, offset: 35648},
							expr: &litMatcher{
								pos:        position{line: 1252, col: 5, offset: 35648},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1252, col: 10, offset: 35653},
							expr: &seqExpr{
								pos: position{line: 1252, col: 11, offset: 35654},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1252, col: 11, offset: 35654},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 19, offset: 35662},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1256, col: 1, offset: 35788},
			expr: &seqExpr{
				pos: position{line: 1256, col: 11, offset: 35798},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 35798},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1256, col: 16, offset: 35803},
						expr: &seqExpr{
							pos: position{line: 1256, col: 17, offset: 35804},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1256, col: 17, offset: 35804},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1256, col: 21, offset: 35808},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1258, col: 1, offset: 35816},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 5, offset: 35829},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1259, col: 5, offset: 35829},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 35839},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1261, col: 5, offset: 35849},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1262, col: 5, offset: 35859},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1263, col: 5, offset: 35868},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1264, col: 5, offset: 35877},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1265, col: 5, offset: 35886},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1266, col: 5, offset: 35895},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1267, col: 5, offset: 35904},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1269, col: 1, offset: 35910},
			expr: &actionExpr{
				pos: position{line: 1270, col: 5, offset: 35917},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 5, offset: 35917},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1270, col: 5, offset: 35917},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1270, col: 10, offset: 35922},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1270, col: 14, offset: 35926},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1270, col: 19, offset: 35931},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1270, col: 23, offset: 35935},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1270, col: 28, offset: 35940},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1270, col: 32, offset: 35944},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1272, col: 1, offset: 35981},
			expr: &actionExpr{
				pos: position{line: 1273, col: 5, offset: 35989},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1273, col: 5, offset: 35989},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1273, col: 5, offset: 35989},
							expr: &seqExpr{
								pos: position{line: 1273, col: 8, offset: 35992},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1273, col: 8, offset: 35992},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1273, col: 12, offset: 35996},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 16, offset: 36000},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1273, col: 20, offset: 36004},
										expr: &choiceExpr{
											pos: position{line: 1273, col: 22, offset: 36006},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1273, col: 22, offset: 36006},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1273, col: 33, offset: 36017},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 39, offset: 36023},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 41, offset: 36025},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1277, col: 1, offset: 36189},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 5, offset: 36207},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1278, col: 5, offset: 36207},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1278, col: 5, offset: 36207},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1278, col: 5, offset: 36207},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1278, col: 7, offset: 36209},
										expr: &ruleRefExpr{
											pos:  position{line: 1278, col: 7, offset: 36209},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 17, offset: 36219},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1278, col: 19, offset: 36221},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1281, col: 5, offset: 36285},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1281, col: 5, offset: 36285},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1281, col: 5, offset: 36285},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 7, offset: 36287},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 11, offset: 36291},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1281, col: 13, offset: 36293},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 13, offset: 36293},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 23, offset: 36303},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 28, offset: 36308},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1281, col: 30, offset: 36310},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 30, offset: 36310},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 40, offset: 36320},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 42, offset: 36322},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1284, col: 5, offset: 36421},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1284, col: 5, offset: 36421},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1284, col: 5, offset: 36421},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1284, col: 10, offset: 36426},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1284, col: 12, offset: 36428},
										expr: &ruleRefExpr{
											pos:  position{line: 1284, col: 12, offset: 36428},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1284, col: 22, offset: 36438},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 24, offset: 36440},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 36511},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1287, col: 5, offset: 36511},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1287, col: 5, offset: 36511},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1287, col: 7, offset: 36513},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1287, col: 11, offset: 36517},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1287, col: 13, offset: 36519},
										expr: &ruleRefExpr{
											pos:  position{line: 1287, col: 13, offset: 36519},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 23, offset: 36529},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1290, col: 5, offset: 36597},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1290, col: 5, offset: 36597},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1294, col: 1, offset: 36634},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 5, offset: 36646},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1295, col: 5, offset: 36646},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 5, offset: 36653},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1298, col: 1, offset: 36658},
			expr: &actionExpr{
				pos: position{line: 1298, col: 12, offset: 36669},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 12, offset: 36669},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1298, col: 12, offset: 36669},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1298, col: 16, offset: 36673},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 18, offset: 36675},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1300, col: 1, offset: 36713},
			expr: &actionExpr{
				pos: position{line: 1300, col: 12, offset: 36724},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 12, offset: 36724},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1300, col: 12, offset: 36724},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 14, offset: 36726},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1300, col: 18, offset: 36730},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1302, col: 1, offset: 36768},
			expr: &actionExpr{
				pos: position{line: 1303, col: 5, offset: 36779},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1303, col: 5, offset: 36779},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1303, col: 5, offset: 36779},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1303, col: 7, offset: 36781},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1303, col: 10, offset: 36784},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1303, col: 14, offset: 36788},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1303, col: 16, offset: 36790},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1307, col: 1, offset: 36863},
			expr: &actionExpr{
				pos: position{line: 1308, col: 5, offset: 36874},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 5, offset: 36874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1308, col: 5, offset: 36874},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 7, offset: 36876},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1308, col: 11, offset: 36880},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 15, offset: 36884},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 17, offset: 36886},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1312, col: 1, offset: 36949},
			expr: &actionExpr{
				pos: position{line: 1313, col: 4, offset: 36957},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1313, col: 4, offset: 36957},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1313, col: 6, offset: 36959},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1315, col: 1, offset: 36999},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 5, offset: 37013},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1316, col: 5, offset: 37013},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 5, offset: 37028},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1319, col: 1, offset: 37044},
			expr: &actionExpr{
				pos: position{line: 1319, col: 14, offset: 37057},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1319, col: 14, offset: 37057},
					expr: &charClassMatcher{
						pos:        position{line: 1319, col: 14, offset: 37057},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1321, col: 1, offset: 37096},
			expr: &actionExpr{
				pos: position{line: 1322, col: 5, offset: 37115},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 5, offset: 37115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1322, col: 5, offset: 37115},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1322, col: 9, offset: 37119},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1324, col: 1, offset: 37162},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 5, offset: 37178},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1325, col: 5, offset: 37178},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1325, col: 5, offset: 37178},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1325, col: 5, offset: 37178},
									expr: &litMatcher{
										pos:        position{line: 1325, col: 5, offset: 37178},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1325, col: 10, offset: 37183},
									expr: &charClassMatcher{
										pos:        position{line: 1325, col: 10, offset: 37183},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1325, col: 17, offset: 37190},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1325, col: 21, offset: 37194},
									expr: &charClassMatcher{
										pos:        position{line: 1325, col: 21, offset: 37194},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1325, col: 28, offset: 37201},
									expr: &ruleRefExpr{
										pos:  position{line: 1325, col: 28, offset: 37201},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1328, col: 5, offset: 37260},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1328, col: 5, offset: 37260},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1328, col: 5, offset: 37260},
									expr: &litMatcher{
										pos:        position{line: 1328, col: 5, offset: 37260},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1328, col: 10, offset: 37265},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1328, col: 14, offset: 37269},
									expr: &charClassMatcher{
										pos:        position{line: 1328, col: 14, offset: 37269},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1328, col: 21, offset: 37276},
									expr: &ruleRefExpr{
										pos:  position{line: 1328, col: 21, offset: 37276},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1332, col: 1, offset: 37332},
			expr: &seqExpr{
				pos: position{line: 1332, col: 16, offset: 37347},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1332, col: 16, offset: 37347},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1332, col: 21, offset: 37352},
						expr: &charClassMatcher{
							pos:        position{line: 1332, col: 21, offset: 37352},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 27, offset: 37358},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1334, col: 1, offset: 37370},
			expr: &actionExpr{
				pos: position{line: 1334, col: 7, offset: 37376},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1334, col: 7, offset: 37376},
					expr: &ruleRefExpr{
						pos:  position{line: 1334, col: 7, offset: 37376},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1336, col: 1, offset: 37418},
			expr: &charClassMatcher{
				pos:        position{line: 1336, col: 12, offset: 37429},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1339, col: 1, offset: 37443},
			expr: &choiceExpr{
				pos: position{line: 1340, col: 5, offset: 37460},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1340, col: 5, offset: 37460},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1340, col: 5, offset: 37460},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1340, col: 5, offset: 37460},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 9, offset: 37464},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1340, col: 11, offset: 37466},
										expr: &ruleRefExpr{
											pos:  position{line: 1340, col: 11, offset: 37466},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 29, offset: 37484},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1341, col: 5, offset: 37521},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1341, col: 5, offset: 37521},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1341, col: 5, offset: 37521},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1341, col: 9, offset: 37525},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1341, col: 11, offset: 37527},
										expr: &ruleRefExpr{
											pos:  position{line: 1341, col: 11, offset: 37527},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1341, col: 29, offset: 37545},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1343, col: 1, offset: 37579},
			expr: &choiceExpr{
				pos: position{line: 1344, col: 5, offset: 37600},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1344, col: 5, offset: 37600},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1344, col: 5, offset: 37600},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1344, col: 5, offset: 37600},
									expr: &choiceExpr{
										pos: position{line: 1344, col: 7, offset: 37602},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1344, col: 7, offset: 37602},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1344, col: 13, offset: 37608},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1344, col: 26, offset: 37621,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1345, col: 5, offset: 37658},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1345, col: 5, offset: 37658},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1345, col: 5, offset: 37658},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1345, col: 10, offset: 37663},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1345, col: 12, offset: 37665},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1347, col: 1, offset: 37699},
			expr: &actionExpr{
				pos: position{line: 1348, col: 5, offset: 37711},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1348, col: 5, offset: 37711},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1348, col: 5, offset: 37711},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1348, col: 10, offset: 37716},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1348, col: 23, offset: 37729},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1348, col: 28, offset: 37734},
								expr: &ruleRefExpr{
									pos:  position{line: 1348, col: 28, offset: 37734},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1350, col: 1, offset: 37796},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 5, offset: 37813},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1351, col: 5, offset: 37813},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 5, offset: 37830},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1354, col: 1, offset: 37842},
			expr: &actionExpr{
				pos: position{line: 1354, col: 16, offset: 37857},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1354, col: 16, offset: 37857},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1356, col: 1, offset: 37906},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 5, offset: 37922},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1357, col: 5, offset: 37922},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1358, col: 5, offset: 37939},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1360, col: 1, offset: 37946},
			expr: &actionExpr{
				pos: position{line: 1360, col: 14, offset: 37959},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 14, offset: 37959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1360, col: 14, offset: 37959},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 19, offset: 37964},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1360, col: 22, offset: 37967},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1360, col: 22, offset: 37967},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 38, offset: 37983},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1362, col: 1, offset: 38019},
			expr: &actionExpr{
				pos: position{line: 1363, col: 5, offset: 38028},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 5, offset: 38028},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1363, col: 5, offset: 38028},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 6, offset: 38029},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1363, col: 22, offset: 38045},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 23, offset: 38046},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 35, offset: 38058},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 40, offset: 38063},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 50, offset: 38073},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1363, col: 55, offset: 38078},
								expr: &ruleRefExpr{
									pos:  position{line: 1363, col: 55, offset: 38078},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1367, col: 1, offset: 38162},
			expr: &seqExpr{
				pos: position{line: 1367, col: 19, offset: 38180},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1367, col: 19, offset: 38180},
						expr: &litMatcher{
							pos:        position{line: 1367, col: 19, offset: 38180},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 24, offset: 38185},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1368, col: 1, offset: 38198},
			expr: &seqExpr{
				pos: position{line: 1368, col: 15, offset: 38212},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1368, col: 15, offset: 38212},
						expr: &ruleRefExpr{
							pos:  position{line: 1368, col: 15, offset: 38212},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1368, col: 28, offset: 38225},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1370, col: 1, offset: 38230},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 5, offset: 38244},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1371, col: 5, offset: 38244},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 5, offset: 38261},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1373, col: 5, offset: 38273},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1373, col: 5, offset: 38273},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1375, col: 1, offset: 38297},
			expr: &choiceExpr{
				pos: position{line: 1376, col: 5, offset: 38310},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1376, col: 5, offset: 38310},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1377, col: 5, offset: 38324},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1379, col: 1, offset: 38331},
			expr: &actionExpr{
				pos: position{line: 1379, col: 11, offset: 38341},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 11, offset: 38341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1379, col: 11, offset: 38341},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 16, offset: 38346},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1379, col: 19, offset: 38349},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1379, col: 19, offset: 38349},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1379, col: 32, offset: 38362},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1381, col: 1, offset: 38398},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 38413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1382, col: 5, offset: 38413},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1382, col: 5, offset: 38413},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1383, col: 5, offset: 38441},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1383, col: 5, offset: 38441},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1384, col: 5, offset: 38471},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1387, col: 1, offset: 38478},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 5, offset: 38499},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1388, col: 5, offset: 38499},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1388, col: 5, offset: 38499},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1388, col: 5, offset: 38499},
									expr: &choiceExpr{
										pos: position{line: 1388, col: 7, offset: 38501},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1388, col: 7, offset: 38501},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1388, col: 13, offset: 38507},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1388, col: 26, offset: 38520,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 38557},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1389, col: 5, offset: 38557},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1389, col: 5, offset: 38557},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1389, col: 10, offset: 38562},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1389, col: 12, offset: 38564},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1391, col: 1, offset: 38598},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 5, offset: 38617},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1392, col: 5, offset: 38617},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1392, col: 5, offset: 38617},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1392, col: 5, offset: 38617},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1392, col: 9, offset: 38621},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1392, col: 18, offset: 38630},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 5, offset: 38681},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 5, offset: 38702},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1396, col: 1, offset: 38717},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 5, offset: 38738},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1397, col: 5, offset: 38738},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1398, col: 5, offset: 38746},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1398, col: 5, offset: 38746},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 38786},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38795},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38795},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1401, col: 5, offset: 38824},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1401, col: 5, offset: 38824},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 38853},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1402, col: 5, offset: 38853},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1403, col: 5, offset: 38882},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1403, col: 5, offset: 38882},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1404, col: 5, offset: 38911},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1404, col: 5, offset: 38911},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1405, col: 5, offset: 38940},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1405, col: 5, offset: 38940},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1407, col: 1, offset: 38966},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 5, offset: 38984},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1408, col: 5, offset: 38984},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1408, col: 5, offset: 38984},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 39012},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 39012},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 39040},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1412, col: 1, offset: 39046},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 5, offset: 39064},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1413, col: 5, offset: 39064},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1413, col: 5, offset: 39064},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1413, col: 5, offset: 39064},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 9, offset: 39068},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1413, col: 16, offset: 39075},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1413, col: 16, offset: 39075},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 25, offset: 39084},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 34, offset: 39093},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 43, offset: 39102},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 39165},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 39165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1416, col: 5, offset: 39165},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1416, col: 9, offset: 39169},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 13, offset: 39173},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1416, col: 20, offset: 39180},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1416, col: 20, offset: 39180},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 29, offset: 39189},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 29, offset: 39189},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 39, offset: 39199},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 39, offset: 39199},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 49, offset: 39209},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 49, offset: 39209},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 59, offset: 39219},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 59, offset: 39219},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 69, offset: 39229},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 69, offset: 39229},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 80, offset: 39240},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1420, col: 1, offset: 39294},
			expr: &actionExpr{
				pos: position{line: 1421, col: 5, offset: 39305},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 5, offset: 39305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1421, col: 5, offset: 39305},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1421, col: 9, offset: 39309},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 14, offset: 39314},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1421, col: 25, offset: 39325},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1421, col: 29, offset: 39329},
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 30, offset: 39330},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1423, col: 1, offset: 39365},
			expr: &actionExpr{
				pos: position{line: 1424, col: 5, offset: 39380},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1424, col: 5, offset: 39380},
					expr: &choiceExpr{
						pos: position{line: 1424, col: 6, offset: 39381},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1424, col: 6, offset: 39381},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1424, col: 13, offset: 39388},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1426, col: 1, offset: 39428},
			expr: &charClassMatcher{
				pos:        position{line: 1427, col: 5, offset: 39444},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1429, col: 1, offset: 39459},
			expr: &oneOrMoreExpr{
				pos: position{line: 1429, col: 6, offset: 39464},
				expr: &ruleRefExpr{
					pos:  position{line: 1429, col: 6, offset: 39464},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1431, col: 1, offset: 39475},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1431, col: 6, offset: 39480},
				expr: &ruleRefExpr{
					pos:  position{line: 1431, col: 6, offset: 39480},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1433, col: 1, offset: 39491},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 5, offset: 39504},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1434, col: 5, offset: 39504},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 5, offset: 39519},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 5, offset: 39538},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1438, col: 1, offset: 39547},
			expr: &anyMatcher{
				line: 1439, col: 5, offset: 39567,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1441, col: 1, offset: 39570},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 5, offset: 39598},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1442, col: 5, offset: 39598},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1443, col: 5, offset: 39607},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1444, col: 5, offset: 39616},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1445, col: 5, offset: 39625},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1446, col: 5, offset: 39633},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1447, col: 5, offset: 39646},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1449, col: 1, offset: 39656},
			expr: &charClassMatcher{
				pos:        position{line: 1450, col: 5, offset: 39675},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1456, col: 1, offset: 40005},
			expr: &ruleRefExpr{
				pos:  position{line: 1459, col: 5, offset: 40076},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1461, col: 1, offset: 40095},
			expr: &seqExpr{
				pos: position{line: 1462, col: 5, offset: 40116},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1462, col: 5, offset: 40116},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1462, col: 10, offset: 40121},
						expr: &seqExpr{
							pos: position{line: 1462, col: 11, offset: 40122},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1462, col: 11, offset: 40122},
									expr: &litMatcher{
										pos:        position{line: 1462, col: 12, offset: 40123},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1462, col: 17, offset: 40128},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1462, col: 35, offset: 40146},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1464, col: 1, offset: 40152},
			expr: &seqExpr{
				pos: position{line: 1465, col: 5, offset: 40174},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 5, offset: 40174},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1465, col: 10, offset: 40179},
						expr: &seqExpr{
							pos: position{line: 1465, col: 11, offset: 40180},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1465, col: 11, offset: 40180},
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 12, offset: 40181},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1465, col: 27, offset: 40196},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1467, col: 1, offset: 40215},
			expr: &seqExpr{
				pos: position{line: 1467, col: 7, offset: 40221},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1467, col: 7, offset: 40221},
						expr: &ruleRefExpr{
							pos:  position{line: 1467, col: 7, offset: 40221},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 19, offset: 40233},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1469, col: 1, offset: 40249},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 7, offset: 40255},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1469, col: 7, offset: 40255},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 11, offset: 40259},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1471, col: 1, offset: 40264},
			expr: &notExpr{
				pos: position{line: 1471, col: 7, offset: 40270},
				expr: &anyMatcher{
					line: 1471, col: 8, offset: 40271,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onFromTrunks2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFromTrunks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks2(stack["first"], stack["rest"])
}

func (c *current) onFromTrunks9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonFromTrunks9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks9(stack["first"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq2(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq2(stack["seq"])
}

func (c *current) onFromTrunkSeq9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonFromTrunkSeq9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq9()
}

func (c *current) onFromTrunkTail1(trunk interface{}) (interface{}, error) {
	return trunk, nil
}

func (p *parser) callonFromTrunkTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkTail1(stack["trunk"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation24(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation24(stack["trunks"])
}

func (c *current) onOperation38(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation38(stack["f"])
}

func (c *current) onOperation44(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation44(stack["a"])
}

func (c *current) onOperation50(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation50(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["match"])
}

func (c *current) onShortCut8(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut8(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut20(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut20(stack["v"])
}

func (c *current) onShortCut28(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonShortCut28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut28(stack["search"])
}

func (c *current) onShortCut36(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut36(stack["v"])
}

func (c *current) onShortCut46() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonShortCut46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut46()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch2(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch2(stack["f"], stack["pattern"])
}

func (c *current) onPatternMatch17(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!",

		"operand": map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}}, nil

}

func (p *parser) callonPatternMatch17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch17(stack["f"], stack["pattern"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(name, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "name": name, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["name"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt2(stack["id"])
}

func (c *current) onPoolAt9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolAt9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt9()
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange2(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange2(stack["lower"], stack["upper"])
}

func (c *current) onPoolRange14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolRange14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange14()
}

func (c *current) onPoolTo2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonPoolTo2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo2(stack["val"])
}

func (c *current) onPoolTo9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolTo9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo9()
}

func (c *current) onPoolName2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonPoolName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName2(stack["name"])
}

func (c *current) onPoolName5(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolName5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName5(stack["id"])
}

func (c *current) onPoolName8(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonPoolName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName8(stack["s"])
}

func (c *current) onLayoutArg2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg2(stack["keys"], stack["order"])
}

func (c *current) onLayoutArg11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonLayoutArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg11()
}

func (c *current) onFormatArg2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg2(stack["val"])
}

func (c *current) onFormatArg9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonFormatArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg9()
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onOrderArg14() (interface{}, error) {
	return "", nil
}

func (p *parser) callonOrderArg14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg14()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg2(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg2(stack["lhs"])
}

func (c *current) onAsArg9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAsArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg9()
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
