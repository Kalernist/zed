// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 351},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 431},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 431},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 431},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 431},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 437},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 437},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 452},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 467},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 467},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 740},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 752},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 759},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 759},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 759},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 762},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 764},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 791},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 803},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 803},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 803},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 803},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 811},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 813},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 816},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 831},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 834},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 838},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 841},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 846},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 853},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 853},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 853},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 856},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 862},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 960},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 960},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 960},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 967},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 969},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 972},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 987},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 990},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 994},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 997},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1001},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1008},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1008},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1008},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1011},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1017},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1114},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1129},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1129},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1129},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1129},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1135},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1145},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1150},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1150},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1308},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1308},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1311},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1421},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1438},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1438},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1438},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1441},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1446},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1449},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1451},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1480},
			expr: &actionExpr{
				pos: position{line: 45, col: 5, offset: 1493},
				run: (*parser).callonParallel1,
				expr: &seqExpr{
					pos: position{line: 45, col: 5, offset: 1493},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 5, offset: 1493},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 8, offset: 1496},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 13, offset: 1501},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 16, offset: 1504},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 18, offset: 1506},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 29, offset: 1517},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 32, offset: 1520},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 47, col: 1, offset: 1543},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1557},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1557},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 48, col: 5, offset: 1557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 8, offset: 1560},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 15, offset: 1567},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 27, offset: 1579},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 31, offset: 1583},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 31, offset: 1583},
									name: "FromTrunkSeq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 45, offset: 1597},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 48, col: 48, offset: 1600},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 52, col: 1, offset: 1701},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1718},
				run: (*parser).callonFromTrunkSeq1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1718},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1718},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1721},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1726},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1729},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 20, offset: 1733},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 55, col: 1, offset: 1765},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1780},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 56, col: 5, offset: 1780},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 5, offset: 1793},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 5, offset: 1806},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 5, offset: 1819},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 61, col: 1, offset: 1829},
			expr: &choiceExpr{
				pos: position{line: 62, col: 5, offset: 1843},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1843},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1843},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1843},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 13, offset: 1851},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 16, offset: 1854},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 20, offset: 1858},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 30, offset: 1868},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 30, offset: 1868},
											name: "Parallel",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 40, offset: 1878},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 43, offset: 1881},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1978},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1978},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 5, offset: 1978},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 14, offset: 1987},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 65, col: 16, offset: 1989},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 65, col: 21, offset: 1994},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 26, offset: 1999},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 65, col: 28, offset: 2001},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 65, col: 32, offset: 2005},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 38, offset: 2011},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 38, offset: 2011},
											name: "SwitchLiteralClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 59, offset: 2032},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 62, offset: 2035},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2140},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 2140},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 14, offset: 2149},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 17, offset: 2152},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 68, col: 21, offset: 2156},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 68, col: 27, offset: 2162},
										expr: &ruleRefExpr{
											pos:  position{line: 68, col: 27, offset: 2162},
											name: "SwitchSearchBooleanClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 54, offset: 2189},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 57, offset: 2192},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 2296},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 2296},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 71, col: 5, offset: 2296},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 12, offset: 2303},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 15, offset: 2306},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 71, col: 19, offset: 2310},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 71, col: 26, offset: 2317},
										expr: &ruleRefExpr{
											pos:  position{line: 71, col: 26, offset: 2317},
											name: "FromTrunk",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 37, offset: 2328},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 40, offset: 2331},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 5, offset: 2422},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2435},
						run: (*parser).callonOperation46,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2435},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2435},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 7, offset: 2437},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 75, col: 16, offset: 2446},
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 17, offset: 2447},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2477},
						run: (*parser).callonOperation52,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2477},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 2477},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 7, offset: 2479},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 76, col: 20, offset: 2492},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 21, offset: 2493},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2523},
						run: (*parser).callonOperation58,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2523},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 77, col: 5, offset: 2523},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 7, offset: 2525},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 77, col: 19, offset: 2537},
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 20, offset: 2538},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2569},
						run: (*parser).callonOperation64,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2569},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 78, col: 5, offset: 2569},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 10, offset: 2574},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 78, col: 24, offset: 2588},
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 25, offset: 2589},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLiteralClause",
			pos:  position{line: 82, col: 1, offset: 2680},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2704},
				run: (*parser).callonSwitchLiteralClause1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2704},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 83, col: 5, offset: 2704},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 8, offset: 2707},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 83, col: 14, offset: 2713},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 83, col: 14, offset: 2713},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 29, offset: 2728},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 39, offset: 2738},
										name: "Identifier",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 51, offset: 2750},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 54, offset: 2753},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 59, offset: 2758},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 62, offset: 2761},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 67, offset: 2766},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 78, offset: 2777},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 81, offset: 2780},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SwitchSearchBooleanClause",
			pos:  position{line: 87, col: 1, offset: 2862},
			expr: &actionExpr{
				pos: position{line: 88, col: 5, offset: 2892},
				run: (*parser).callonSwitchSearchBooleanClause1,
				expr: &seqExpr{
					pos: position{line: 88, col: 5, offset: 2892},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 5, offset: 2892},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 8, offset: 2895},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 88, col: 14, offset: 2901},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 88, col: 14, offset: 2901},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 29, offset: 2916},
										name: "SearchBoolean",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 44, offset: 2931},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 47, offset: 2934},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 52, offset: 2939},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 55, offset: 2942},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 60, offset: 2947},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 71, offset: 2958},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 74, offset: 2961},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 92, col: 1, offset: 3043},
			expr: &actionExpr{
				pos: position{line: 92, col: 16, offset: 3058},
				run: (*parser).callonDefaultToken1,
				expr: &litMatcher{
					pos:        position{line: 92, col: 16, offset: 3058},
					val:        "default",
					ignoreCase: true,
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 94, col: 1, offset: 3090},
			expr: &seqExpr{
				pos: position{line: 94, col: 11, offset: 3100},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 94, col: 11, offset: 3100},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 94, col: 15, offset: 3104},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 15, offset: 3104},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 94, col: 22, offset: 3111},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 94, col: 29, offset: 3118},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 36, offset: 3125},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 95, col: 1, offset: 3130},
			expr: &seqExpr{
				pos: position{line: 95, col: 8, offset: 3137},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 95, col: 8, offset: 3137},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 95, col: 12, offset: 3141},
						expr: &choiceExpr{
							pos: position{line: 95, col: 14, offset: 3143},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 95, col: 14, offset: 3143},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 95, col: 20, offset: 3149},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 97, col: 1, offset: 3155},
			expr: &seqExpr{
				pos: position{line: 97, col: 13, offset: 3167},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 97, col: 13, offset: 3167},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 97, col: 17, offset: 3171},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 97, col: 18, offset: 3172},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 97, col: 18, offset: 3172},
										expr: &litMatcher{
											pos:        position{line: 97, col: 19, offset: 3173},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 3178},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 38, offset: 3192},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 57, offset: 3211},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 97, col: 82, offset: 3236},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 88, offset: 3242},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 94, offset: 3248},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 100, offset: 3254},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 99, col: 1, offset: 3266},
			expr: &actionExpr{
				pos: position{line: 99, col: 14, offset: 3279},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 99, col: 15, offset: 3280},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 15, offset: 3280},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 22, offset: 3287},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 29, offset: 3294},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 36, offset: 3301},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 43, offset: 3308},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 49, offset: 3314},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 56, offset: 3321},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 101, col: 1, offset: 3358},
			expr: &choiceExpr{
				pos: position{line: 101, col: 12, offset: 3369},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 101, col: 13, offset: 3370},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 101, col: 13, offset: 3370},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 101, col: 16, offset: 3373},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 101, col: 16, offset: 3373},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 101, col: 26, offset: 3383},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 101, col: 35, offset: 3392},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 101, col: 43, offset: 3400},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 101, col: 43, offset: 3400},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 101, col: 46, offset: 3403},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 103, col: 1, offset: 3409},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3427},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3427},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3427},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 11, offset: 3433},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 21, offset: 3443},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 26, offset: 3448},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 26, offset: 3448},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 108, col: 1, offset: 3522},
			expr: &actionExpr{
				pos: position{line: 108, col: 16, offset: 3537},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 108, col: 16, offset: 3537},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 108, col: 16, offset: 3537},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 18, offset: 3539},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 26, offset: 3547},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 28, offset: 3549},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 30, offset: 3551},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 110, col: 1, offset: 3601},
			expr: &actionExpr{
				pos: position{line: 111, col: 5, offset: 3615},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 111, col: 5, offset: 3615},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 111, col: 5, offset: 3615},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 11, offset: 3621},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 3638},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 10, offset: 3643},
								expr: &actionExpr{
									pos: position{line: 112, col: 11, offset: 3644},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 112, col: 11, offset: 3644},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 112, col: 11, offset: 3644},
												expr: &seqExpr{
													pos: position{line: 112, col: 12, offset: 3645},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 112, col: 12, offset: 3645},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 112, col: 14, offset: 3647},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 25, offset: 3658},
												name: "_",
											},
											&notExpr{
												pos: position{line: 112, col: 27, offset: 3660},
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 28, offset: 3661},
													name: "OrToken",
												},
											},
											&labeledExpr{
												pos:   position{line: 112, col: 36, offset: 3669},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 41, offset: 3674},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 116, col: 1, offset: 3790},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 3807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3807},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3807},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 117, col: 6, offset: 3808},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 117, col: 6, offset: 3808},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 117, col: 6, offset: 3808},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 15, offset: 3817},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 117, col: 19, offset: 3821},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 117, col: 19, offset: 3821},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 23, offset: 3825},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 117, col: 27, offset: 3829},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 29, offset: 3831},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3943},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3943},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 5, offset: 3943},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 9, offset: 3947},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 120, col: 12, offset: 3950},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 17, offset: 3955},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 31, offset: 3969},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 120, col: 34, offset: 3972},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 121, col: 5, offset: 4001},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 124, col: 1, offset: 4014},
			expr: &choiceExpr{
				pos: position{line: 125, col: 5, offset: 4029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 4029},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 125, col: 5, offset: 4029},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 12, offset: 4036},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 126, col: 5, offset: 4077},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 126, col: 5, offset: 4077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 126, col: 5, offset: 4077},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 7, offset: 4079},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 126, col: 19, offset: 4091},
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 20, offset: 4092},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 129, col: 5, offset: 4209},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 129, col: 5, offset: 4209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 129, col: 5, offset: 4209},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 129, col: 9, offset: 4213},
									expr: &ruleRefExpr{
										pos:  position{line: 129, col: 10, offset: 4214},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 132, col: 5, offset: 4330},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 134, col: 1, offset: 4351},
			expr: &choiceExpr{
				pos: position{line: 135, col: 5, offset: 4367},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 135, col: 5, offset: 4367},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 4379},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 4379},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 136, col: 5, offset: 4379},
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 6, offset: 4380},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 13, offset: 4387},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 15, offset: 4389},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 140, col: 1, offset: 4497},
			expr: &actionExpr{
				pos: position{line: 141, col: 5, offset: 4515},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 141, col: 5, offset: 4515},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 141, col: 13, offset: 4523},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 145, col: 1, offset: 4625},
			expr: &actionExpr{
				pos: position{line: 146, col: 5, offset: 4642},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 146, col: 5, offset: 4642},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 146, col: 5, offset: 4642},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 7, offset: 4644},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 12, offset: 4649},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 146, col: 14, offset: 4651},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 25, offset: 4662},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4665},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 36, offset: 4673},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 150, col: 1, offset: 4785},
			expr: &choiceExpr{
				pos: position{line: 150, col: 11, offset: 4795},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 150, col: 11, offset: 4795},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 150, col: 20, offset: 4804},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 154, col: 1, offset: 4836},
			expr: &choiceExpr{
				pos: position{line: 155, col: 5, offset: 4852},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 155, col: 5, offset: 4852},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 155, col: 5, offset: 4852},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 155, col: 5, offset: 4852},
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 5, offset: 4852},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 155, col: 16, offset: 4863},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 155, col: 22, offset: 4869},
										expr: &ruleRefExpr{
											pos:  position{line: 155, col: 22, offset: 4869},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 155, col: 32, offset: 4879},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 37, offset: 4884},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 155, col: 49, offset: 4896},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 55, offset: 4902},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 5047},
						run: (*parser).callonAggregation13,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 5047},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 5047},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 5, offset: 5047},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 158, col: 16, offset: 5058},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 158, col: 22, offset: 5064},
										expr: &ruleRefExpr{
											pos:  position{line: 158, col: 22, offset: 5064},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 158, col: 32, offset: 5074},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 37, offset: 5079},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 158, col: 52, offset: 5094},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 158, col: 57, offset: 5099},
										expr: &seqExpr{
											pos: position{line: 158, col: 58, offset: 5100},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 158, col: 58, offset: 5100},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 158, col: 60, offset: 5102},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 158, col: 74, offset: 5116},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 80, offset: 5122},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 166, col: 1, offset: 5355},
			expr: &seqExpr{
				pos: position{line: 166, col: 13, offset: 5367},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 166, col: 13, offset: 5367},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 166, col: 25, offset: 5379},
						name: "_",
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 168, col: 1, offset: 5382},
			expr: &actionExpr{
				pos: position{line: 169, col: 5, offset: 5395},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 169, col: 5, offset: 5395},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 5, offset: 5395},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 14, offset: 5404},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 16, offset: 5406},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 20, offset: 5410},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 29, offset: 5419},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 171, col: 1, offset: 5442},
			expr: &actionExpr{
				pos: position{line: 172, col: 5, offset: 5458},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 172, col: 5, offset: 5458},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 172, col: 5, offset: 5458},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 13, offset: 5466},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 15, offset: 5468},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 23, offset: 5476},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 174, col: 1, offset: 5517},
			expr: &choiceExpr{
				pos: position{line: 175, col: 5, offset: 5530},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 175, col: 5, offset: 5530},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 175, col: 5, offset: 5530},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 175, col: 5, offset: 5530},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 175, col: 7, offset: 5532},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 175, col: 14, offset: 5539},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 175, col: 16, offset: 5541},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 175, col: 25, offset: 5550},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 175, col: 27, offset: 5552},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 33, offset: 5558},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5589},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 176, col: 5, offset: 5589},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 181, col: 1, offset: 5849},
			expr: &choiceExpr{
				pos: position{line: 182, col: 5, offset: 5868},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 182, col: 5, offset: 5868},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 5883},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 183, col: 5, offset: 5883},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 10, offset: 5888},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 185, col: 1, offset: 5980},
			expr: &actionExpr{
				pos: position{line: 186, col: 5, offset: 6000},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 186, col: 5, offset: 6000},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 186, col: 5, offset: 6000},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 11, offset: 6006},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 186, col: 26, offset: 6021},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 186, col: 31, offset: 6026},
								expr: &actionExpr{
									pos: position{line: 186, col: 32, offset: 6027},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 186, col: 32, offset: 6027},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 186, col: 32, offset: 6027},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 186, col: 35, offset: 6030},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 186, col: 39, offset: 6034},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 186, col: 42, offset: 6037},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 186, col: 47, offset: 6042},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 190, col: 1, offset: 6164},
			expr: &choiceExpr{
				pos: position{line: 191, col: 5, offset: 6182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 5, offset: 6182},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 191, col: 5, offset: 6182},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 191, col: 5, offset: 6182},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 10, offset: 6187},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 15, offset: 6192},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 191, col: 18, offset: 6195},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 23, offset: 6200},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 26, offset: 6203},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 6207},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 6311},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 194, col: 5, offset: 6311},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 9, offset: 6315},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 198, col: 1, offset: 6415},
			expr: &actionExpr{
				pos: position{line: 199, col: 5, offset: 6423},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 199, col: 5, offset: 6423},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 199, col: 5, offset: 6423},
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 6, offset: 6424},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 16, offset: 6434},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 19, offset: 6437},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 27, offset: 6445},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 199, col: 30, offset: 6448},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 34, offset: 6452},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 199, col: 37, offset: 6455},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 199, col: 42, offset: 6460},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 42, offset: 6460},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 49, offset: 6467},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 199, col: 52, offset: 6470},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 199, col: 56, offset: 6474},
							expr: &seqExpr{
								pos: position{line: 199, col: 58, offset: 6476},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 199, col: 58, offset: 6476},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 199, col: 61, offset: 6479},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 66, offset: 6484},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 199, col: 72, offset: 6490},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 72, offset: 6490},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 207, col: 1, offset: 6680},
			expr: &choiceExpr{
				pos: position{line: 208, col: 5, offset: 6692},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6692},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 5, offset: 6711},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6724},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 212, col: 1, offset: 6733},
			expr: &actionExpr{
				pos: position{line: 212, col: 15, offset: 6747},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 212, col: 15, offset: 6747},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 212, col: 15, offset: 6747},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 212, col: 17, offset: 6749},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 25, offset: 6757},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 27, offset: 6759},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 32, offset: 6764},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 214, col: 1, offset: 6800},
			expr: &actionExpr{
				pos: position{line: 215, col: 5, offset: 6819},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 215, col: 5, offset: 6819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 215, col: 5, offset: 6819},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 11, offset: 6825},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 215, col: 25, offset: 6839},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 215, col: 30, offset: 6844},
								expr: &seqExpr{
									pos: position{line: 215, col: 31, offset: 6845},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 215, col: 31, offset: 6845},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 215, col: 34, offset: 6848},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 215, col: 38, offset: 6852},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 215, col: 41, offset: 6855},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 225, col: 1, offset: 7091},
			expr: &choiceExpr{
				pos: position{line: 226, col: 5, offset: 7104},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 7104},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 7117},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 7129},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 7141},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 7154},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 7167},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 7180},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 7195},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 7208},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 7220},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 7235},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 7248},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 7262},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7275},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 7290},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 7302},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 7315},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7328},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7344},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7357},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 247, col: 1, offset: 7368},
			expr: &actionExpr{
				pos: position{line: 248, col: 5, offset: 7381},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 248, col: 5, offset: 7381},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 5, offset: 7381},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 13, offset: 7389},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 18, offset: 7394},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 27, offset: 7403},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 32, offset: 7408},
								expr: &actionExpr{
									pos: position{line: 248, col: 33, offset: 7409},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 248, col: 33, offset: 7409},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 248, col: 33, offset: 7409},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 248, col: 35, offset: 7411},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 248, col: 37, offset: 7413},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 262, col: 1, offset: 7832},
			expr: &actionExpr{
				pos: position{line: 262, col: 12, offset: 7843},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 262, col: 12, offset: 7843},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 262, col: 17, offset: 7848},
						expr: &actionExpr{
							pos: position{line: 262, col: 18, offset: 7849},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 262, col: 18, offset: 7849},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 262, col: 18, offset: 7849},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 262, col: 20, offset: 7851},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 22, offset: 7853},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 264, col: 1, offset: 7909},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 7921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 7921},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 265, col: 5, offset: 7921},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7996},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 266, col: 5, offset: 7996},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 266, col: 5, offset: 7996},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 14, offset: 8005},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 266, col: 16, offset: 8007},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 266, col: 23, offset: 8014},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 266, col: 24, offset: 8015},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 266, col: 24, offset: 8015},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 266, col: 34, offset: 8025},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 268, col: 1, offset: 8139},
			expr: &actionExpr{
				pos: position{line: 269, col: 5, offset: 8151},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 269, col: 5, offset: 8151},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 8151},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 269, col: 12, offset: 8158},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 18, offset: 8164},
								expr: &actionExpr{
									pos: position{line: 269, col: 19, offset: 8165},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 269, col: 19, offset: 8165},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 19, offset: 8165},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 21, offset: 8167},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 23, offset: 8169},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 47, offset: 8193},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 53, offset: 8199},
								expr: &seqExpr{
									pos: position{line: 269, col: 54, offset: 8200},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 54, offset: 8200},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 269, col: 56, offset: 8202},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 67, offset: 8213},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 74, offset: 8220},
								expr: &actionExpr{
									pos: position{line: 269, col: 75, offset: 8221},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 269, col: 75, offset: 8221},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 75, offset: 8221},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 77, offset: 8223},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 79, offset: 8225},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 283, col: 1, offset: 8570},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8582},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8582},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 5, offset: 8582},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 12, offset: 8589},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 14, offset: 8591},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 19, offset: 8596},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 288, col: 1, offset: 8691},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 8704},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 8704},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 5, offset: 8704},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 13, offset: 8712},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 15, offset: 8714},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 20, offset: 8719},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 293, col: 1, offset: 8810},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 8823},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 5, offset: 8823},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 294, col: 5, offset: 8823},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 5, offset: 8823},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 13, offset: 8831},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 294, col: 15, offset: 8833},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 21, offset: 8839},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8919},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 295, col: 5, offset: 8919},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 297, col: 1, offset: 8995},
			expr: &choiceExpr{
				pos: position{line: 298, col: 5, offset: 9008},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 9008},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 9008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 5, offset: 9008},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 13, offset: 9016},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 298, col: 15, offset: 9018},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 21, offset: 9024},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 9104},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 299, col: 5, offset: 9104},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 301, col: 1, offset: 9180},
			expr: &actionExpr{
				pos: position{line: 302, col: 5, offset: 9195},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 302, col: 5, offset: 9195},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 9195},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 15, offset: 9205},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 17, offset: 9207},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 20, offset: 9210},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 306, col: 1, offset: 9247},
			expr: &actionExpr{
				pos: position{line: 307, col: 5, offset: 9258},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 307, col: 5, offset: 9258},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 307, col: 10, offset: 9263},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 311, col: 1, offset: 9359},
			expr: &choiceExpr{
				pos: position{line: 312, col: 5, offset: 9372},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 9372},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 312, col: 5, offset: 9372},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 312, col: 5, offset: 9372},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 312, col: 13, offset: 9380},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 312, col: 15, offset: 9382},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 9471},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 315, col: 5, offset: 9471},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 319, col: 1, offset: 9561},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 9573},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 9573},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 9573},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 12, offset: 9580},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 14, offset: 9582},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 19, offset: 9587},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 324, col: 1, offset: 9678},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9693},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9693},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 5, offset: 9693},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 15, offset: 9703},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 17, offset: 9705},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 23, offset: 9711},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 34, offset: 9722},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 39, offset: 9727},
								expr: &actionExpr{
									pos: position{line: 325, col: 40, offset: 9728},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 325, col: 40, offset: 9728},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 325, col: 40, offset: 9728},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 325, col: 43, offset: 9731},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 325, col: 47, offset: 9735},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 325, col: 50, offset: 9738},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 325, col: 53, offset: 9741},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 333, col: 1, offset: 10150},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 10163},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 10163},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 5, offset: 10163},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 334, col: 13, offset: 10171},
							expr: &seqExpr{
								pos: position{line: 334, col: 15, offset: 10173},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 334, col: 15, offset: 10173},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 334, col: 18, offset: 10176},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 338, col: 1, offset: 10247},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 10261},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 339, col: 5, offset: 10261},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 343, col: 1, offset: 10337},
			expr: &choiceExpr{
				pos: position{line: 344, col: 5, offset: 10350},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 344, col: 5, offset: 10350},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 344, col: 5, offset: 10350},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 344, col: 5, offset: 10350},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 11, offset: 10356},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 344, col: 21, offset: 10366},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 29, offset: 10374},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 31, offset: 10376},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 34, offset: 10379},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 36, offset: 10381},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 44, offset: 10389},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 52, offset: 10397},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 344, col: 55, offset: 10400},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 59, offset: 10404},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 62, offset: 10407},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 71, offset: 10416},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 344, col: 79, offset: 10424},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 344, col: 87, offset: 10432},
										expr: &seqExpr{
											pos: position{line: 344, col: 88, offset: 10433},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 344, col: 88, offset: 10433},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 344, col: 90, offset: 10435},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10701},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 10701},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 11, offset: 10707},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 351, col: 22, offset: 10718},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 30, offset: 10726},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 32, offset: 10728},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 35, offset: 10731},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 37, offset: 10733},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 41, offset: 10737},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 351, col: 49, offset: 10745},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 351, col: 57, offset: 10753},
										expr: &seqExpr{
											pos: position{line: 351, col: 58, offset: 10754},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 351, col: 58, offset: 10754},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 351, col: 60, offset: 10756},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 359, col: 1, offset: 11010},
			expr: &choiceExpr{
				pos: position{line: 360, col: 5, offset: 11024},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 11024},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 360, col: 5, offset: 11024},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 360, col: 5, offset: 11024},
									val:        "anti",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 360, col: 13, offset: 11032},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 11062},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 11062},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 361, col: 5, offset: 11062},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 361, col: 14, offset: 11071},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 11101},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 362, col: 5, offset: 11101},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 362, col: 5, offset: 11101},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 362, col: 14, offset: 11110},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 11139},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 363, col: 5, offset: 11139},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 363, col: 5, offset: 11139},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 14, offset: 11148},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 11178},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 364, col: 5, offset: 11178},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 366, col: 1, offset: 11214},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 11226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 367, col: 5, offset: 11226},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 11235},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 11235},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 11235},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 368, col: 9, offset: 11239},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 368, col: 14, offset: 11244},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 368, col: 19, offset: 11249},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 370, col: 1, offset: 11275},
			expr: &actionExpr{
				pos: position{line: 371, col: 5, offset: 11290},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 371, col: 5, offset: 11290},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 5, offset: 11290},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 15, offset: 11300},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 17, offset: 11302},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 415, col: 1, offset: 12908},
			expr: &actionExpr{
				pos: position{line: 416, col: 5, offset: 12925},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 5, offset: 12925},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 416, col: 7, offset: 12927},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 420, col: 1, offset: 13027},
			expr: &choiceExpr{
				pos: position{line: 421, col: 5, offset: 13042},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 13042},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 421, col: 5, offset: 13042},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 421, col: 5, offset: 13042},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 421, col: 7, offset: 13044},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 421, col: 12, offset: 13049},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 13078},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 422, col: 5, offset: 13078},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 424, col: 1, offset: 13136},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 13149},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 425, col: 5, offset: 13149},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 425, col: 12, offset: 13156},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 429, col: 1, offset: 13312},
			expr: &choiceExpr{
				pos: position{line: 430, col: 5, offset: 13324},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 430, col: 5, offset: 13324},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 431, col: 5, offset: 13337},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 5, offset: 13350},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 434, col: 1, offset: 13360},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 13373},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 435, col: 5, offset: 13373},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 5, offset: 13373},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 13, offset: 13381},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 435, col: 15, offset: 13383},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 20, offset: 13388},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 25, offset: 13393},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 435, col: 32, offset: 13400},
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 32, offset: 13400},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 43, offset: 13411},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 435, col: 50, offset: 13418},
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 50, offset: 13418},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 439, col: 1, offset: 13547},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 13560},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 13560},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13560},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 13, offset: 13568},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 15, offset: 13570},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 20, offset: 13575},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 442, col: 1, offset: 13606},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13619},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13619},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 443, col: 5, offset: 13619},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 10, offset: 13624},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 19, offset: 13633},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 22, offset: 13636},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 22, offset: 13636},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 30, offset: 13644},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 35, offset: 13649},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 35, offset: 13649},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 46, offset: 13660},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 52, offset: 13666},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 52, offset: 13666},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 447, col: 1, offset: 13802},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 13815},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 13815},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 448, col: 5, offset: 13815},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 12, offset: 13822},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 14, offset: 13824},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 18, offset: 13828},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 22, offset: 13832},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 29, offset: 13839},
								expr: &ruleRefExpr{
									pos:  position{line: 448, col: 29, offset: 13839},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 40, offset: 13850},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 47, offset: 13857},
								expr: &ruleRefExpr{
									pos:  position{line: 448, col: 47, offset: 13857},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 452, col: 1, offset: 13983},
			expr: &actionExpr{
				pos: position{line: 452, col: 7, offset: 13989},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 452, col: 7, offset: 13989},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 452, col: 8, offset: 13990},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 452, col: 8, offset: 13990},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 452, col: 18, offset: 14000},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 28, offset: 14010},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 454, col: 1, offset: 14047},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 14056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 14056},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 455, col: 5, offset: 14056},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 455, col: 7, offset: 14058},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 14093},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 456, col: 5, offset: 14093},
							expr: &charClassMatcher{
								pos:        position{line: 456, col: 5, offset: 14093},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 459, col: 1, offset: 14198},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 14209},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 460, col: 5, offset: 14209},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 460, col: 5, offset: 14209},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 460, col: 7, offset: 14211},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 13, offset: 14217},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 460, col: 15, offset: 14219},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 18, offset: 14222},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 463, col: 1, offset: 14288},
			expr: &actionExpr{
				pos: position{line: 463, col: 9, offset: 14296},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 463, col: 9, offset: 14296},
					expr: &charClassMatcher{
						pos:        position{line: 463, col: 10, offset: 14297},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 465, col: 1, offset: 14343},
			expr: &actionExpr{
				pos: position{line: 466, col: 5, offset: 14357},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 466, col: 5, offset: 14357},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 466, col: 5, offset: 14357},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 466, col: 7, offset: 14359},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 16, offset: 14368},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 18, offset: 14370},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 24, offset: 14376},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 32, offset: 14384},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 466, col: 34, offset: 14386},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 40, offset: 14392},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 42, offset: 14394},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 48, offset: 14400},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 470, col: 1, offset: 14505},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 14518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 14518},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 471, col: 5, offset: 14518},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 471, col: 5, offset: 14518},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 471, col: 10, offset: 14523},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 471, col: 19, offset: 14532},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 471, col: 26, offset: 14539},
										expr: &ruleRefExpr{
											pos:  position{line: 471, col: 26, offset: 14539},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 471, col: 38, offset: 14551},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 471, col: 43, offset: 14556},
										expr: &ruleRefExpr{
											pos:  position{line: 471, col: 43, offset: 14556},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 5, offset: 14665},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 5, offset: 14665},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 10, offset: 14670},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 478, col: 1, offset: 14771},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 14786},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 479, col: 5, offset: 14786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 479, col: 5, offset: 14786},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 479, col: 9, offset: 14790},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 16, offset: 14797},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 481, col: 1, offset: 14830},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14843},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14843},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 5, offset: 14843},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 482, col: 9, offset: 14847},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 14, offset: 14852},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 484, col: 1, offset: 14889},
			expr: &choiceExpr{
				pos: position{line: 485, col: 5, offset: 14902},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 485, col: 5, offset: 14902},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 486, col: 5, offset: 14921},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 5, offset: 14931},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 489, col: 1, offset: 14945},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 14964},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 14964},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 490, col: 6, offset: 14965},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 490, col: 6, offset: 14965},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 490, col: 24, offset: 14983},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 490, col: 29, offset: 14988},
							expr: &choiceExpr{
								pos: position{line: 490, col: 30, offset: 14989},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 490, col: 30, offset: 14989},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 490, col: 47, offset: 15006},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 492, col: 1, offset: 15045},
			expr: &actionExpr{
				pos: position{line: 493, col: 5, offset: 15059},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 493, col: 5, offset: 15059},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 493, col: 5, offset: 15059},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 493, col: 7, offset: 15061},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 493, col: 16, offset: 15070},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 18, offset: 15072},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 23, offset: 15077},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 34, offset: 15088},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 40, offset: 15094},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 497, col: 1, offset: 15204},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 15218},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 15218},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 498, col: 5, offset: 15218},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 498, col: 7, offset: 15220},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 17, offset: 15230},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 19, offset: 15232},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 23, offset: 15236},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 500, col: 1, offset: 15272},
			expr: &choiceExpr{
				pos: position{line: 501, col: 5, offset: 15288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 15288},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 501, col: 5, offset: 15288},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 15323},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 502, col: 5, offset: 15323},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 503, col: 5, offset: 15360},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 503, col: 5, offset: 15360},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 505, col: 1, offset: 15386},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 15399},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 15399},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 15399},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 506, col: 5, offset: 15399},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 7, offset: 15401},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 16, offset: 15410},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 18, offset: 15412},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 15446},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 507, col: 5, offset: 15446},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 507, col: 5, offset: 15446},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 7, offset: 15448},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 16, offset: 15457},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 18, offset: 15459},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 509, col: 1, offset: 15492},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 15505},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 510, col: 5, offset: 15505},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 516, col: 1, offset: 15700},
			expr: &actionExpr{
				pos: position{line: 517, col: 5, offset: 15716},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 517, col: 5, offset: 15716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 517, col: 5, offset: 15716},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 517, col: 16, offset: 15727},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 18, offset: 15729},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 23, offset: 15734},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 29, offset: 15740},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 33, offset: 15744},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 41, offset: 15752},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 517, col: 44, offset: 15755},
								expr: &ruleRefExpr{
									pos:  position{line: 517, col: 44, offset: 15755},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 521, col: 1, offset: 15867},
			expr: &actionExpr{
				pos: position{line: 522, col: 5, offset: 15880},
				run: (*parser).callonOverProc1,
				expr: &seqExpr{
					pos: position{line: 522, col: 5, offset: 15880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 522, col: 5, offset: 15880},
							val:        "over",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 522, col: 13, offset: 15888},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 15, offset: 15890},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 21, offset: 15896},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "WithProc",
			pos:  position{line: 526, col: 1, offset: 15979},
			expr: &actionExpr{
				pos: position{line: 527, col: 5, offset: 15992},
				run: (*parser).callonWithProc1,
				expr: &seqExpr{
					pos: position{line: 527, col: 5, offset: 15992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 527, col: 5, offset: 15992},
							val:        "with",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 13, offset: 16000},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 15, offset: 16002},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 22, offset: 16009},
								name: "FlexAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 38, offset: 16025},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 527, col: 41, offset: 16028},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 46, offset: 16033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 527, col: 49, offset: 16036},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 53, offset: 16040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 56, offset: 16043},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 60, offset: 16047},
								name: "Sequential",
							},
						},
						&litMatcher{
							pos:        position{line: 527, col: 71, offset: 16058},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 531, col: 1, offset: 16153},
			expr: &actionExpr{
				pos: position{line: 532, col: 5, offset: 16167},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 532, col: 5, offset: 16167},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 532, col: 5, offset: 16167},
							val:        "yield",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 532, col: 14, offset: 16176},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 16, offset: 16178},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 22, offset: 16184},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 536, col: 1, offset: 16268},
			expr: &actionExpr{
				pos: position{line: 537, col: 5, offset: 16280},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 537, col: 5, offset: 16280},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 537, col: 5, offset: 16280},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 7, offset: 16282},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 10, offset: 16285},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 12, offset: 16287},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 16, offset: 16291},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 539, col: 1, offset: 16316},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 16326},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 16326},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 540, col: 5, offset: 16326},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 7, offset: 16328},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 10, offset: 16331},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 12, offset: 16333},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 16, offset: 16337},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 544, col: 1, offset: 16388},
			expr: &ruleRefExpr{
				pos:  position{line: 544, col: 8, offset: 16395},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 546, col: 1, offset: 16406},
			expr: &actionExpr{
				pos: position{line: 547, col: 5, offset: 16416},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 547, col: 5, offset: 16416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 5, offset: 16416},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 11, offset: 16422},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 16, offset: 16427},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 547, col: 21, offset: 16432},
								expr: &actionExpr{
									pos: position{line: 547, col: 22, offset: 16433},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 547, col: 22, offset: 16433},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 547, col: 22, offset: 16433},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 547, col: 25, offset: 16436},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 547, col: 29, offset: 16440},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 547, col: 32, offset: 16443},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 547, col: 37, offset: 16448},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 551, col: 1, offset: 16560},
			expr: &ruleRefExpr{
				pos:  position{line: 551, col: 13, offset: 16572},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 553, col: 1, offset: 16578},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16593},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 16593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16593},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 11, offset: 16599},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 21, offset: 16609},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 554, col: 26, offset: 16614},
								expr: &seqExpr{
									pos: position{line: 554, col: 27, offset: 16615},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 554, col: 27, offset: 16615},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 554, col: 30, offset: 16618},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 554, col: 34, offset: 16622},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 554, col: 37, offset: 16625},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 564, col: 1, offset: 16824},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16840},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16840},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 16840},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 11, offset: 16846},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 22, offset: 16857},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 565, col: 27, offset: 16862},
								expr: &actionExpr{
									pos: position{line: 565, col: 28, offset: 16863},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 565, col: 28, offset: 16863},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 565, col: 28, offset: 16863},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 565, col: 31, offset: 16866},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 565, col: 35, offset: 16870},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 565, col: 38, offset: 16873},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 565, col: 40, offset: 16875},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 569, col: 1, offset: 16986},
			expr: &actionExpr{
				pos: position{line: 570, col: 5, offset: 17001},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 570, col: 5, offset: 17001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 570, col: 5, offset: 17001},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 9, offset: 17005},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 14, offset: 17010},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 570, col: 17, offset: 17013},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 22, offset: 17018},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 25, offset: 17021},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 29, offset: 17025},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 572, col: 1, offset: 17116},
			expr: &ruleRefExpr{
				pos:  position{line: 572, col: 8, offset: 17123},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 574, col: 1, offset: 17140},
			expr: &choiceExpr{
				pos: position{line: 575, col: 5, offset: 17160},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 17160},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 575, col: 5, offset: 17160},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 575, col: 5, offset: 17160},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 15, offset: 17170},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 29, offset: 17184},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 575, col: 32, offset: 17187},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 36, offset: 17191},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 575, col: 39, offset: 17194},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 50, offset: 17205},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 55, offset: 17210},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 575, col: 58, offset: 17213},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 62, offset: 17217},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 575, col: 65, offset: 17220},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 76, offset: 17231},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 5, offset: 17371},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 580, col: 1, offset: 17386},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 17404},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 17404},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 5, offset: 17404},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 17410},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 5, offset: 17429},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 582, col: 10, offset: 17434},
								expr: &actionExpr{
									pos: position{line: 582, col: 11, offset: 17435},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 582, col: 11, offset: 17435},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 582, col: 11, offset: 17435},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 582, col: 14, offset: 17438},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 582, col: 17, offset: 17441},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 582, col: 25, offset: 17449},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 582, col: 28, offset: 17452},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 582, col: 33, offset: 17457},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 586, col: 1, offset: 17575},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 17594},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 17594},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 587, col: 5, offset: 17594},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 17600},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 17624},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 588, col: 10, offset: 17629},
								expr: &actionExpr{
									pos: position{line: 588, col: 11, offset: 17630},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 588, col: 11, offset: 17630},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 588, col: 11, offset: 17630},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 14, offset: 17633},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 17, offset: 17636},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 588, col: 26, offset: 17645},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 29, offset: 17648},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 34, offset: 17653},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 592, col: 1, offset: 17776},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 17800},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 593, col: 5, offset: 17800},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 594, col: 5, offset: 17817},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 594, col: 5, offset: 17817},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 594, col: 5, offset: 17817},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 11, offset: 17823},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 595, col: 5, offset: 17840},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 595, col: 10, offset: 17845},
										expr: &actionExpr{
											pos: position{line: 595, col: 11, offset: 17846},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 595, col: 11, offset: 17846},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 595, col: 11, offset: 17846},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 595, col: 14, offset: 17849},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 595, col: 19, offset: 17854},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 595, col: 38, offset: 17873},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 595, col: 41, offset: 17876},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 595, col: 46, offset: 17881},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 599, col: 1, offset: 17999},
			expr: &choiceExpr{
				pos: position{line: 600, col: 5, offset: 18020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 600, col: 5, offset: 18020},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 600, col: 5, offset: 18020},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 601, col: 5, offset: 18049},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 601, col: 5, offset: 18049},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 603, col: 1, offset: 18086},
			expr: &choiceExpr{
				pos: position{line: 604, col: 5, offset: 18109},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 604, col: 5, offset: 18109},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 605, col: 5, offset: 18130},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 605, col: 5, offset: 18130},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 605, col: 5, offset: 18130},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 605, col: 10, offset: 18135},
									expr: &ruleRefExpr{
										pos:  position{line: 605, col: 11, offset: 18136},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 607, col: 1, offset: 18183},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 18200},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 18200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 608, col: 5, offset: 18200},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 11, offset: 18206},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 18223},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 609, col: 10, offset: 18228},
								expr: &actionExpr{
									pos: position{line: 609, col: 11, offset: 18229},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 609, col: 11, offset: 18229},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 609, col: 11, offset: 18229},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 609, col: 14, offset: 18232},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 609, col: 17, offset: 18235},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 609, col: 34, offset: 18252},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 609, col: 37, offset: 18255},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 609, col: 42, offset: 18260},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 613, col: 1, offset: 18376},
			expr: &actionExpr{
				pos: position{line: 613, col: 20, offset: 18395},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 613, col: 21, offset: 18396},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 613, col: 21, offset: 18396},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 613, col: 28, offset: 18403},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 613, col: 34, offset: 18409},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 613, col: 41, offset: 18416},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 615, col: 1, offset: 18453},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 18470},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 18470},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 18470},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 11, offset: 18476},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 18499},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 617, col: 10, offset: 18504},
								expr: &actionExpr{
									pos: position{line: 617, col: 11, offset: 18505},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 617, col: 11, offset: 18505},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 617, col: 11, offset: 18505},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 617, col: 14, offset: 18508},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 617, col: 17, offset: 18511},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 617, col: 34, offset: 18528},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 617, col: 37, offset: 18531},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 617, col: 42, offset: 18536},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 621, col: 1, offset: 18658},
			expr: &actionExpr{
				pos: position{line: 621, col: 20, offset: 18677},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 621, col: 21, offset: 18678},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 621, col: 21, offset: 18678},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 621, col: 27, offset: 18684},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 623, col: 1, offset: 18721},
			expr: &actionExpr{
				pos: position{line: 624, col: 5, offset: 18744},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 624, col: 5, offset: 18744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 624, col: 5, offset: 18744},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 11, offset: 18750},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 18762},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 625, col: 10, offset: 18767},
								expr: &actionExpr{
									pos: position{line: 625, col: 11, offset: 18768},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 625, col: 11, offset: 18768},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 625, col: 11, offset: 18768},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 625, col: 14, offset: 18771},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 625, col: 17, offset: 18774},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 625, col: 40, offset: 18797},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 625, col: 43, offset: 18800},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 625, col: 48, offset: 18805},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 629, col: 1, offset: 18916},
			expr: &actionExpr{
				pos: position{line: 629, col: 26, offset: 18941},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 629, col: 27, offset: 18942},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 629, col: 27, offset: 18942},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 629, col: 33, offset: 18948},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 629, col: 39, offset: 18954},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 631, col: 1, offset: 18991},
			expr: &choiceExpr{
				pos: position{line: 632, col: 5, offset: 19003},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 632, col: 5, offset: 19003},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 632, col: 5, offset: 19003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 632, col: 5, offset: 19003},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 632, col: 9, offset: 19007},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 632, col: 12, offset: 19010},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 632, col: 14, offset: 19012},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 635, col: 5, offset: 19121},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 637, col: 1, offset: 19131},
			expr: &choiceExpr{
				pos: position{line: 638, col: 5, offset: 19144},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 638, col: 5, offset: 19144},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 19158},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 639, col: 5, offset: 19158},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 639, col: 5, offset: 19158},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 639, col: 11, offset: 19164},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 639, col: 16, offset: 19169},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 639, col: 21, offset: 19174},
										expr: &ruleRefExpr{
											pos:  position{line: 639, col: 22, offset: 19175},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 642, col: 5, offset: 19246},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 642, col: 5, offset: 19246},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 642, col: 5, offset: 19246},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 19252},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 642, col: 20, offset: 19261},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 642, col: 25, offset: 19266},
										expr: &ruleRefExpr{
											pos:  position{line: 642, col: 26, offset: 19267},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 645, col: 5, offset: 19338},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 646, col: 5, offset: 19352},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 648, col: 1, offset: 19361},
			expr: &seqExpr{
				pos: position{line: 648, col: 13, offset: 19373},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 648, col: 13, offset: 19373},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 648, col: 22, offset: 19382},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 648, col: 25, offset: 19385},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 650, col: 1, offset: 19390},
			expr: &choiceExpr{
				pos: position{line: 651, col: 5, offset: 19403},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 651, col: 5, offset: 19403},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 652, col: 5, offset: 19413},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 653, col: 5, offset: 19425},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 654, col: 5, offset: 19438},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 656, col: 1, offset: 19446},
			expr: &actionExpr{
				pos: position{line: 657, col: 5, offset: 19460},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 657, col: 5, offset: 19460},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 657, col: 5, offset: 19460},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 657, col: 13, offset: 19468},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 657, col: 16, offset: 19471},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 657, col: 20, offset: 19475},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 25, offset: 19480},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 657, col: 39, offset: 19494},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 659, col: 1, offset: 19520},
			expr: &actionExpr{
				pos: position{line: 660, col: 5, offset: 19529},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 660, col: 5, offset: 19529},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 19529},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 9, offset: 19533},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 660, col: 18, offset: 19542},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 660, col: 21, offset: 19545},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 660, col: 25, offset: 19549},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 660, col: 28, offset: 19552},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 33, offset: 19557},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 660, col: 38, offset: 19562},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 660, col: 41, offset: 19565},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 664, col: 1, offset: 19662},
			expr: &actionExpr{
				pos: position{line: 665, col: 5, offset: 19675},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 665, col: 5, offset: 19675},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 665, col: 5, offset: 19675},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 6, offset: 19676},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 665, col: 16, offset: 19686},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 19, offset: 19689},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 665, col: 34, offset: 19704},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 665, col: 37, offset: 19707},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 665, col: 41, offset: 19711},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 665, col: 44, offset: 19714},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 49, offset: 19719},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 665, col: 63, offset: 19733},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 665, col: 66, offset: 19736},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 665, col: 70, offset: 19740},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 665, col: 76, offset: 19746},
								expr: &ruleRefExpr{
									pos:  position{line: 665, col: 76, offset: 19746},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 669, col: 1, offset: 19867},
			expr: &choiceExpr{
				pos: position{line: 670, col: 5, offset: 19885},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 670, col: 5, offset: 19885},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 19895},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 671, col: 5, offset: 19895},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 673, col: 1, offset: 19931},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 19941},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 19941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 19941},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 19947},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 16, offset: 19952},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 674, col: 21, offset: 19957},
								expr: &actionExpr{
									pos: position{line: 674, col: 22, offset: 19958},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 674, col: 22, offset: 19958},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 674, col: 22, offset: 19958},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 674, col: 25, offset: 19961},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 674, col: 29, offset: 19965},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 674, col: 32, offset: 19968},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 674, col: 34, offset: 19970},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 678, col: 1, offset: 20079},
			expr: &actionExpr{
				pos: position{line: 678, col: 13, offset: 20091},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 678, col: 13, offset: 20091},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 678, col: 13, offset: 20091},
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 14, offset: 20092},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 678, col: 18, offset: 20096},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 20, offset: 20098},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 680, col: 1, offset: 20134},
			expr: &choiceExpr{
				pos: position{line: 681, col: 5, offset: 20155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 20155},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 20155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 681, col: 5, offset: 20155},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 20161},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 681, col: 17, offset: 20167},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 681, col: 22, offset: 20172},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 23, offset: 20173},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 684, col: 5, offset: 20244},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 684, col: 5, offset: 20244},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 684, col: 5, offset: 20244},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 20250},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 684, col: 22, offset: 20261},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 684, col: 27, offset: 20266},
										expr: &ruleRefExpr{
											pos:  position{line: 684, col: 28, offset: 20267},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 20338},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 687, col: 5, offset: 20338},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 687, col: 5, offset: 20338},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 20344},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 687, col: 22, offset: 20355},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 687, col: 27, offset: 20360},
										expr: &ruleRefExpr{
											pos:  position{line: 687, col: 28, offset: 20361},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 690, col: 5, offset: 20432},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 690, col: 5, offset: 20432},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 694, col: 1, offset: 20501},
			expr: &actionExpr{
				pos: position{line: 694, col: 14, offset: 20514},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 694, col: 14, offset: 20514},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 696, col: 1, offset: 20576},
			expr: &choiceExpr{
				pos: position{line: 697, col: 5, offset: 20586},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 20586},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 20586},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 697, col: 5, offset: 20586},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 697, col: 9, offset: 20590},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 15, offset: 20596},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20812},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20812},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 706, col: 5, offset: 20812},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 706, col: 9, offset: 20816},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 706, col: 13, offset: 20820},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 18, offset: 20825},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 706, col: 23, offset: 20830},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 716, col: 1, offset: 21035},
			expr: &choiceExpr{
				pos: position{line: 717, col: 5, offset: 21045},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 21045},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 21045},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 717, col: 5, offset: 21045},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 717, col: 9, offset: 21049},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 14, offset: 21054},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 27, offset: 21067},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 30, offset: 21070},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 34, offset: 21074},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 717, col: 37, offset: 21077},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 40, offset: 21080},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 717, col: 53, offset: 21093},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 723, col: 5, offset: 21264},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 723, col: 5, offset: 21264},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 723, col: 5, offset: 21264},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 723, col: 9, offset: 21268},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 723, col: 12, offset: 21271},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 723, col: 16, offset: 21275},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 723, col: 19, offset: 21278},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 723, col: 22, offset: 21281},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 723, col: 35, offset: 21294},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 729, col: 5, offset: 21465},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 729, col: 5, offset: 21465},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 729, col: 5, offset: 21465},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 729, col: 9, offset: 21469},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 729, col: 14, offset: 21474},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 729, col: 27, offset: 21487},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 729, col: 30, offset: 21490},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 729, col: 34, offset: 21494},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 729, col: 37, offset: 21497},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 735, col: 5, offset: 21670},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 735, col: 5, offset: 21670},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 735, col: 5, offset: 21670},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 735, col: 9, offset: 21674},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 735, col: 14, offset: 21679},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 735, col: 19, offset: 21684},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21733},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 21733},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 736, col: 5, offset: 21733},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 736, col: 9, offset: 21737},
									expr: &litMatcher{
										pos:        position{line: 736, col: 11, offset: 21739},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 736, col: 16, offset: 21744},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 19, offset: 21747},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 738, col: 1, offset: 21798},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 21810},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 739, col: 5, offset: 21810},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 740, col: 5, offset: 21821},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 5, offset: 21831},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 742, col: 5, offset: 21839},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 743, col: 5, offset: 21847},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21859},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 744, col: 5, offset: 21859},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 744, col: 5, offset: 21859},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 9, offset: 21863},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 744, col: 12, offset: 21866},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 17, offset: 21871},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 22, offset: 21876},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 744, col: 25, offset: 21879},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 746, col: 1, offset: 21905},
			expr: &actionExpr{
				pos: position{line: 747, col: 5, offset: 21916},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 747, col: 5, offset: 21916},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 747, col: 5, offset: 21916},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 9, offset: 21920},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 12, offset: 21923},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 19, offset: 21930},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 26, offset: 21937},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 747, col: 29, offset: 21940},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 751, col: 1, offset: 22033},
			expr: &actionExpr{
				pos: position{line: 752, col: 5, offset: 22044},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 752, col: 5, offset: 22044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 752, col: 5, offset: 22044},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 11, offset: 22050},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 752, col: 17, offset: 22056},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 752, col: 22, offset: 22061},
								expr: &ruleRefExpr{
									pos:  position{line: 752, col: 22, offset: 22061},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 756, col: 1, offset: 22152},
			expr: &actionExpr{
				pos: position{line: 756, col: 13, offset: 22164},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 756, col: 13, offset: 22164},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 756, col: 13, offset: 22164},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 756, col: 16, offset: 22167},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 756, col: 20, offset: 22171},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 756, col: 23, offset: 22174},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 25, offset: 22176},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 758, col: 1, offset: 22201},
			expr: &actionExpr{
				pos: position{line: 759, col: 5, offset: 22211},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 759, col: 5, offset: 22211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 759, col: 5, offset: 22211},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 10, offset: 22216},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 759, col: 20, offset: 22226},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 759, col: 23, offset: 22229},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 759, col: 27, offset: 22233},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 759, col: 30, offset: 22236},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 36, offset: 22242},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 763, col: 1, offset: 22327},
			expr: &actionExpr{
				pos: position{line: 764, col: 5, offset: 22337},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 764, col: 5, offset: 22337},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 764, col: 5, offset: 22337},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 9, offset: 22341},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 764, col: 12, offset: 22344},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 18, offset: 22350},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 32, offset: 22364},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 764, col: 35, offset: 22367},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 768, col: 1, offset: 22457},
			expr: &actionExpr{
				pos: position{line: 769, col: 5, offset: 22465},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 769, col: 5, offset: 22465},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 769, col: 5, offset: 22465},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 10, offset: 22470},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 769, col: 13, offset: 22473},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 19, offset: 22479},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 33, offset: 22493},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 769, col: 36, offset: 22496},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 773, col: 1, offset: 22585},
			expr: &actionExpr{
				pos: position{line: 774, col: 5, offset: 22593},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 774, col: 5, offset: 22593},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 774, col: 5, offset: 22593},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 774, col: 10, offset: 22598},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 774, col: 13, offset: 22601},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 19, offset: 22607},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 774, col: 27, offset: 22615},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 774, col: 30, offset: 22618},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 778, col: 1, offset: 22709},
			expr: &choiceExpr{
				pos: position{line: 779, col: 5, offset: 22721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 22721},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 779, col: 5, offset: 22721},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 779, col: 5, offset: 22721},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 22727},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 779, col: 17, offset: 22733},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 779, col: 22, offset: 22738},
										expr: &ruleRefExpr{
											pos:  position{line: 779, col: 22, offset: 22738},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 782, col: 5, offset: 22832},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 782, col: 5, offset: 22832},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 785, col: 1, offset: 22869},
			expr: &actionExpr{
				pos: position{line: 785, col: 13, offset: 22881},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 785, col: 13, offset: 22881},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 785, col: 13, offset: 22881},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 785, col: 16, offset: 22884},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 20, offset: 22888},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 785, col: 23, offset: 22891},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 25, offset: 22893},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 787, col: 1, offset: 22918},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 22928},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 788, col: 5, offset: 22928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 788, col: 5, offset: 22928},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 9, offset: 22932},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 14, offset: 22937},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 788, col: 17, offset: 22940},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 21, offset: 22944},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 788, col: 24, offset: 22947},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 30, offset: 22953},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 794, col: 1, offset: 23060},
			expr: &actionExpr{
				pos: position{line: 795, col: 5, offset: 23072},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 795, col: 5, offset: 23072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 795, col: 5, offset: 23072},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 15, offset: 23082},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 796, col: 5, offset: 23096},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 796, col: 10, offset: 23101},
								expr: &ruleRefExpr{
									pos:  position{line: 796, col: 10, offset: 23101},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 797, col: 5, offset: 23114},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 797, col: 11, offset: 23120},
								expr: &ruleRefExpr{
									pos:  position{line: 797, col: 11, offset: 23120},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 5, offset: 23134},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 798, col: 11, offset: 23140},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 11, offset: 23140},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 799, col: 5, offset: 23154},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 799, col: 13, offset: 23162},
								expr: &ruleRefExpr{
									pos:  position{line: 799, col: 13, offset: 23162},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 800, col: 5, offset: 23178},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 800, col: 12, offset: 23185},
								expr: &ruleRefExpr{
									pos:  position{line: 800, col: 12, offset: 23185},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 5, offset: 23200},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 13, offset: 23208},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 13, offset: 23208},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 802, col: 5, offset: 23224},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 23230},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 826, col: 1, offset: 23597},
			expr: &choiceExpr{
				pos: position{line: 827, col: 5, offset: 23611},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 23611},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 827, col: 5, offset: 23611},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 827, col: 5, offset: 23611},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 827, col: 12, offset: 23618},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 827, col: 14, offset: 23620},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 828, col: 5, offset: 23648},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 828, col: 5, offset: 23648},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 828, col: 5, offset: 23648},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 828, col: 12, offset: 23655},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 828, col: 14, offset: 23657},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 828, col: 26, offset: 23669},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 830, col: 1, offset: 23713},
			expr: &choiceExpr{
				pos: position{line: 831, col: 5, offset: 23731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 23731},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 23731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 831, col: 5, offset: 23731},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 9, offset: 23735},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 14, offset: 23740},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 16, offset: 23742},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 19, offset: 23745},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 831, col: 21, offset: 23747},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 25, offset: 23751},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 23845},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 832, col: 5, offset: 23845},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 832, col: 10, offset: 23850},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 834, col: 1, offset: 23942},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 23961},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 835, col: 5, offset: 23961},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 835, col: 5, offset: 23961},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 11, offset: 23967},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 25, offset: 23981},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 835, col: 30, offset: 23986},
								expr: &actionExpr{
									pos: position{line: 835, col: 31, offset: 23987},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 835, col: 31, offset: 23987},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 835, col: 31, offset: 23987},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 835, col: 34, offset: 23990},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 835, col: 38, offset: 23994},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 835, col: 41, offset: 23997},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 835, col: 46, offset: 24002},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 839, col: 1, offset: 24123},
			expr: &choiceExpr{
				pos: position{line: 840, col: 5, offset: 24135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 24135},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 840, col: 5, offset: 24135},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 840, col: 5, offset: 24135},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 7, offset: 24137},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 12, offset: 24142},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 840, col: 14, offset: 24144},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 20, offset: 24150},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 840, col: 29, offset: 24159},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 840, col: 35, offset: 24165},
										expr: &ruleRefExpr{
											pos:  position{line: 840, col: 35, offset: 24165},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 843, col: 5, offset: 24260},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 843, col: 5, offset: 24260},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 843, col: 5, offset: 24260},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 843, col: 7, offset: 24262},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 843, col: 12, offset: 24267},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 843, col: 14, offset: 24269},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 845, col: 1, offset: 24294},
			expr: &choiceExpr{
				pos: position{line: 846, col: 5, offset: 24307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 846, col: 5, offset: 24307},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 846, col: 5, offset: 24307},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 846, col: 5, offset: 24307},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 846, col: 7, offset: 24309},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 846, col: 10, offset: 24312},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 846, col: 12, offset: 24314},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 846, col: 15, offset: 24317},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 24345},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 847, col: 5, offset: 24345},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 847, col: 5, offset: 24345},
									name: "_",
								},
								&notExpr{
									pos: position{line: 847, col: 7, offset: 24347},
									expr: &seqExpr{
										pos: position{line: 847, col: 9, offset: 24349},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 847, col: 9, offset: 24349},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 847, col: 27, offset: 24367},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 847, col: 30, offset: 24370},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 33, offset: 24373},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 849, col: 1, offset: 24398},
			expr: &ruleRefExpr{
				pos:  position{line: 850, col: 5, offset: 24411},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 852, col: 1, offset: 24417},
			expr: &actionExpr{
				pos: position{line: 853, col: 5, offset: 24430},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 853, col: 5, offset: 24430},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24430},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 11, offset: 24436},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 19, offset: 24444},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 853, col: 24, offset: 24449},
								expr: &actionExpr{
									pos: position{line: 853, col: 25, offset: 24450},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 853, col: 25, offset: 24450},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 853, col: 30, offset: 24455},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 857, col: 1, offset: 24570},
			expr: &actionExpr{
				pos: position{line: 858, col: 5, offset: 24582},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 858, col: 5, offset: 24582},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 858, col: 5, offset: 24582},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 11, offset: 24588},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 24, offset: 24601},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 26, offset: 24603},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 31, offset: 24608},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 858, col: 33, offset: 24610},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 39, offset: 24616},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 858, col: 48, offset: 24625},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 858, col: 54, offset: 24631},
								expr: &ruleRefExpr{
									pos:  position{line: 858, col: 54, offset: 24631},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 64, offset: 24641},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 66, offset: 24643},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 69, offset: 24646},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 858, col: 71, offset: 24648},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 79, offset: 24656},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 87, offset: 24664},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 858, col: 90, offset: 24667},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 94, offset: 24671},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 858, col: 97, offset: 24674},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 106, offset: 24683},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 877, col: 1, offset: 24918},
			expr: &choiceExpr{
				pos: position{line: 878, col: 5, offset: 24935},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 24935},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 878, col: 5, offset: 24935},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 878, col: 5, offset: 24935},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 878, col: 7, offset: 24937},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 878, col: 14, offset: 24944},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 878, col: 14, offset: 24944},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 878, col: 21, offset: 24951},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 878, col: 29, offset: 24959},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 878, col: 36, offset: 24966},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 24999},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 879, col: 5, offset: 24999},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 881, col: 1, offset: 25027},
			expr: &actionExpr{
				pos: position{line: 882, col: 5, offset: 25040},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 882, col: 5, offset: 25040},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 882, col: 5, offset: 25040},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 7, offset: 25042},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 13, offset: 25048},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 882, col: 15, offset: 25050},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 20, offset: 25055},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 884, col: 1, offset: 25091},
			expr: &actionExpr{
				pos: position{line: 885, col: 5, offset: 25106},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 885, col: 5, offset: 25106},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 885, col: 5, offset: 25106},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 885, col: 7, offset: 25108},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 885, col: 13, offset: 25114},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 885, col: 15, offset: 25116},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 885, col: 18, offset: 25119},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 20, offset: 25121},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 28, offset: 25129},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 887, col: 1, offset: 25165},
			expr: &actionExpr{
				pos: position{line: 888, col: 5, offset: 25179},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 888, col: 5, offset: 25179},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 888, col: 5, offset: 25179},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 888, col: 7, offset: 25181},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 888, col: 14, offset: 25188},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 888, col: 16, offset: 25190},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 21, offset: 25195},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 890, col: 1, offset: 25231},
			expr: &actionExpr{
				pos: position{line: 891, col: 5, offset: 25246},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 891, col: 5, offset: 25246},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 891, col: 5, offset: 25246},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 7, offset: 25248},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 13, offset: 25254},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 15, offset: 25256},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 18, offset: 25259},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 891, col: 20, offset: 25261},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 25, offset: 25266},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 31, offset: 25272},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 37, offset: 25278},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 895, col: 1, offset: 25388},
			expr: &choiceExpr{
				pos: position{line: 896, col: 5, offset: 25401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25401},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25401},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 896, col: 5, offset: 25401},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 896, col: 7, offset: 25403},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 896, col: 12, offset: 25408},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 896, col: 12, offset: 25408},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 896, col: 18, offset: 25414},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 25444},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 897, col: 5, offset: 25444},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 899, col: 1, offset: 25470},
			expr: &choiceExpr{
				pos: position{line: 900, col: 5, offset: 25483},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 25483},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 900, col: 5, offset: 25483},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 900, col: 5, offset: 25483},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 900, col: 7, offset: 25485},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 900, col: 13, offset: 25491},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 900, col: 15, offset: 25493},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 21, offset: 25499},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 25530},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 901, col: 5, offset: 25530},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 903, col: 1, offset: 25552},
			expr: &actionExpr{
				pos: position{line: 903, col: 10, offset: 25561},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 903, col: 10, offset: 25561},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 904, col: 1, offset: 25596},
			expr: &actionExpr{
				pos: position{line: 904, col: 6, offset: 25601},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 904, col: 6, offset: 25601},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 905, col: 1, offset: 25628},
			expr: &actionExpr{
				pos: position{line: 905, col: 8, offset: 25635},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 905, col: 8, offset: 25635},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 906, col: 1, offset: 25666},
			expr: &actionExpr{
				pos: position{line: 906, col: 8, offset: 25673},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 906, col: 8, offset: 25673},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 907, col: 1, offset: 25704},
			expr: &actionExpr{
				pos: position{line: 907, col: 9, offset: 25712},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 907, col: 9, offset: 25712},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 908, col: 1, offset: 25745},
			expr: &actionExpr{
				pos: position{line: 908, col: 9, offset: 25753},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 908, col: 9, offset: 25753},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 909, col: 1, offset: 25786},
			expr: &ruleRefExpr{
				pos:  position{line: 909, col: 6, offset: 25791},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 910, col: 1, offset: 25799},
			expr: &actionExpr{
				pos: position{line: 910, col: 10, offset: 25808},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 910, col: 10, offset: 25808},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 911, col: 1, offset: 25843},
			expr: &actionExpr{
				pos: position{line: 911, col: 9, offset: 25851},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 911, col: 9, offset: 25851},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 912, col: 1, offset: 25884},
			expr: &actionExpr{
				pos: position{line: 912, col: 6, offset: 25889},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 912, col: 6, offset: 25889},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 913, col: 1, offset: 25916},
			expr: &actionExpr{
				pos: position{line: 913, col: 9, offset: 25924},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 913, col: 9, offset: 25924},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 914, col: 1, offset: 25957},
			expr: &actionExpr{
				pos: position{line: 914, col: 7, offset: 25963},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 914, col: 7, offset: 25963},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 915, col: 1, offset: 25992},
			expr: &actionExpr{
				pos: position{line: 915, col: 8, offset: 25999},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 915, col: 8, offset: 25999},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 916, col: 1, offset: 26030},
			expr: &actionExpr{
				pos: position{line: 916, col: 8, offset: 26037},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 916, col: 8, offset: 26037},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 917, col: 1, offset: 26068},
			expr: &actionExpr{
				pos: position{line: 917, col: 8, offset: 26075},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 917, col: 8, offset: 26075},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 918, col: 1, offset: 26106},
			expr: &actionExpr{
				pos: position{line: 918, col: 9, offset: 26114},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 918, col: 9, offset: 26114},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 919, col: 1, offset: 26147},
			expr: &actionExpr{
				pos: position{line: 919, col: 9, offset: 26155},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 919, col: 9, offset: 26155},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 921, col: 1, offset: 26189},
			expr: &choiceExpr{
				pos: position{line: 922, col: 5, offset: 26211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 922, col: 5, offset: 26211},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 14, offset: 26220},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 19, offset: 26225},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 27, offset: 26233},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 34, offset: 26240},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 42, offset: 26248},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 50, offset: 26256},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 59, offset: 26265},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 67, offset: 26273},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 75, offset: 26281},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 926, col: 1, offset: 26307},
			expr: &choiceExpr{
				pos: position{line: 927, col: 5, offset: 26319},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 927, col: 5, offset: 26319},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 928, col: 5, offset: 26335},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 929, col: 5, offset: 26353},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 930, col: 5, offset: 26371},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 5, offset: 26390},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 932, col: 5, offset: 26407},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 933, col: 5, offset: 26420},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 934, col: 5, offset: 26429},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 935, col: 5, offset: 26446},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 5, offset: 26465},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 937, col: 5, offset: 26484},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 939, col: 1, offset: 26497},
			expr: &actionExpr{
				pos: position{line: 940, col: 5, offset: 26515},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 940, col: 5, offset: 26515},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 940, col: 7, offset: 26517},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 944, col: 1, offset: 26630},
			expr: &choiceExpr{
				pos: position{line: 945, col: 5, offset: 26648},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 26648},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 945, col: 5, offset: 26648},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 945, col: 5, offset: 26648},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 7, offset: 26650},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 945, col: 14, offset: 26657},
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 15, offset: 26658},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 26773},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 948, col: 5, offset: 26773},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 7, offset: 26775},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 952, col: 1, offset: 26879},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 26898},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 26898},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 953, col: 5, offset: 26898},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 953, col: 5, offset: 26898},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 953, col: 7, offset: 26900},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 953, col: 11, offset: 26904},
									expr: &ruleRefExpr{
										pos:  position{line: 953, col: 12, offset: 26905},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 27019},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 956, col: 5, offset: 27019},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 956, col: 7, offset: 27021},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 960, col: 1, offset: 27120},
			expr: &actionExpr{
				pos: position{line: 961, col: 5, offset: 27137},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 961, col: 5, offset: 27137},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 961, col: 7, offset: 27139},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 965, col: 1, offset: 27252},
			expr: &actionExpr{
				pos: position{line: 966, col: 5, offset: 27271},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 966, col: 5, offset: 27271},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 966, col: 7, offset: 27273},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 970, col: 1, offset: 27382},
			expr: &choiceExpr{
				pos: position{line: 971, col: 5, offset: 27401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 971, col: 5, offset: 27401},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 971, col: 5, offset: 27401},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 27514},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 972, col: 5, offset: 27514},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 974, col: 1, offset: 27625},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 27641},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 975, col: 5, offset: 27641},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 977, col: 1, offset: 27747},
			expr: &actionExpr{
				pos: position{line: 978, col: 5, offset: 27764},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 978, col: 5, offset: 27764},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 978, col: 5, offset: 27764},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 978, col: 10, offset: 27769},
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 10, offset: 27769},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 982, col: 1, offset: 27884},
			expr: &actionExpr{
				pos: position{line: 983, col: 5, offset: 27900},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 983, col: 5, offset: 27900},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 983, col: 5, offset: 27900},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 983, col: 9, offset: 27904},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 983, col: 13, offset: 27908},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 983, col: 18, offset: 27913},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 987, col: 1, offset: 28002},
			expr: &choiceExpr{
				pos: position{line: 988, col: 5, offset: 28015},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 988, col: 5, offset: 28015},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 5, offset: 28031},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 991, col: 1, offset: 28046},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 28055},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 28055},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 5, offset: 28071},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 5, offset: 28089},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 996, col: 1, offset: 28102},
			expr: &choiceExpr{
				pos: position{line: 997, col: 5, offset: 28120},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 997, col: 5, offset: 28120},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 997, col: 5, offset: 28120},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 997, col: 5, offset: 28120},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 10, offset: 28125},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 997, col: 24, offset: 28139},
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 25, offset: 28140},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 998, col: 5, offset: 28180},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 998, col: 5, offset: 28180},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 998, col: 5, offset: 28180},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 998, col: 10, offset: 28185},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 998, col: 25, offset: 28200},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 998, col: 28, offset: 28203},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 998, col: 32, offset: 28207},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 998, col: 35, offset: 28210},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 998, col: 39, offset: 28214},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 998, col: 42, offset: 28217},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 998, col: 46, offset: 28221},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 998, col: 51, offset: 28226},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 998, col: 54, offset: 28229},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1001, col: 5, offset: 28330},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1001, col: 5, offset: 28330},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1001, col: 10, offset: 28335},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28437},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1004, col: 5, offset: 28437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1004, col: 5, offset: 28437},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 9, offset: 28441},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 12, offset: 28444},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 14, offset: 28446},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1004, col: 25, offset: 28457},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1006, col: 1, offset: 28480},
			expr: &actionExpr{
				pos: position{line: 1007, col: 5, offset: 28494},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1007, col: 5, offset: 28494},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1007, col: 11, offset: 28500},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1011, col: 1, offset: 28596},
			expr: &actionExpr{
				pos: position{line: 1012, col: 5, offset: 28609},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1012, col: 5, offset: 28609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1012, col: 5, offset: 28609},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1012, col: 11, offset: 28615},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 16, offset: 28620},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1012, col: 21, offset: 28625},
								expr: &ruleRefExpr{
									pos:  position{line: 1012, col: 21, offset: 28625},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1016, col: 1, offset: 28719},
			expr: &actionExpr{
				pos: position{line: 1016, col: 16, offset: 28734},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 16, offset: 28734},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1016, col: 16, offset: 28734},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1016, col: 19, offset: 28737},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1016, col: 23, offset: 28741},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 26, offset: 28744},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 30, offset: 28748},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1018, col: 1, offset: 28774},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 28790},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28790},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 28790},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1019, col: 5, offset: 28790},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 9, offset: 28794},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 12, offset: 28797},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 19, offset: 28804},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 33, offset: 28818},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1019, col: 36, offset: 28821},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 28916},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 28916},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1022, col: 5, offset: 28916},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 9, offset: 28920},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 12, offset: 28923},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 16, offset: 28927},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 21, offset: 28932},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1022, col: 24, offset: 28935},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 29024},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 29024},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 29024},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 10, offset: 29029},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 14, offset: 29033},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 18, offset: 29037},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 23, offset: 29042},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1025, col: 26, offset: 29045},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 29133},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 29133},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1028, col: 5, offset: 29133},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 10, offset: 29138},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 13, offset: 29141},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 21, offset: 29149},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 26, offset: 29154},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1028, col: 29, offset: 29157},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 33, offset: 29161},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 36, offset: 29164},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 44, offset: 29172},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 49, offset: 29177},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1028, col: 52, offset: 29180},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1032, col: 1, offset: 29294},
			expr: &actionExpr{
				pos: position{line: 1033, col: 5, offset: 29312},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1033, col: 9, offset: 29316},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1033, col: 9, offset: 29316},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1033, col: 19, offset: 29326},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1033, col: 30, offset: 29337},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1033, col: 41, offset: 29348},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1034, col: 9, offset: 29365},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1034, col: 18, offset: 29374},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1034, col: 28, offset: 29384},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1034, col: 38, offset: 29394},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1035, col: 9, offset: 29410},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1035, col: 21, offset: 29422},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1036, col: 9, offset: 29440},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1036, col: 18, offset: 29449},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1037, col: 9, offset: 29466},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1037, col: 22, offset: 29479},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1038, col: 9, offset: 29494},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1039, col: 9, offset: 29510},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1040, col: 9, offset: 29528},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1040, col: 16, offset: 29535},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1041, col: 9, offset: 29549},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1041, col: 18, offset: 29558},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1041, col: 28, offset: 29568},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1045, col: 1, offset: 29684},
			expr: &actionExpr{
				pos: position{line: 1046, col: 5, offset: 29702},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1046, col: 5, offset: 29702},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1046, col: 5, offset: 29702},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 11, offset: 29708},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1046, col: 21, offset: 29718},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1046, col: 26, offset: 29723},
								expr: &ruleRefExpr{
									pos:  position{line: 1046, col: 26, offset: 29723},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1050, col: 1, offset: 29822},
			expr: &actionExpr{
				pos: position{line: 1050, col: 21, offset: 29842},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 21, offset: 29842},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1050, col: 21, offset: 29842},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1050, col: 24, offset: 29845},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1050, col: 28, offset: 29849},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 31, offset: 29852},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 35, offset: 29856},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1052, col: 1, offset: 29887},
			expr: &actionExpr{
				pos: position{line: 1053, col: 5, offset: 29901},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 5, offset: 29901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1053, col: 5, offset: 29901},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 10, offset: 29906},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1053, col: 20, offset: 29916},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1053, col: 23, offset: 29919},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1053, col: 27, offset: 29923},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 30, offset: 29926},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 34, offset: 29930},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1057, col: 1, offset: 30012},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 5, offset: 30026},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1058, col: 5, offset: 30026},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 5, offset: 30045},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1061, col: 1, offset: 30059},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 30077},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1062, col: 5, offset: 30077},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 24, offset: 30096},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1064, col: 1, offset: 30114},
			expr: &actionExpr{
				pos: position{line: 1064, col: 12, offset: 30125},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 12, offset: 30125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1064, col: 12, offset: 30125},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1064, col: 19, offset: 30132},
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 20, offset: 30133},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1065, col: 1, offset: 30170},
			expr: &actionExpr{
				pos: position{line: 1065, col: 11, offset: 30180},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1065, col: 11, offset: 30180},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1065, col: 11, offset: 30180},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1065, col: 17, offset: 30186},
							expr: &ruleRefExpr{
								pos:  position{line: 1065, col: 18, offset: 30187},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1066, col: 1, offset: 30223},
			expr: &actionExpr{
				pos: position{line: 1066, col: 11, offset: 30233},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 11, offset: 30233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1066, col: 11, offset: 30233},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1066, col: 17, offset: 30239},
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 18, offset: 30240},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1067, col: 1, offset: 30276},
			expr: &actionExpr{
				pos: position{line: 1067, col: 12, offset: 30287},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1067, col: 12, offset: 30287},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1067, col: 12, offset: 30287},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1067, col: 19, offset: 30294},
							expr: &ruleRefExpr{
								pos:  position{line: 1067, col: 20, offset: 30295},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1068, col: 1, offset: 30332},
			expr: &actionExpr{
				pos: position{line: 1068, col: 11, offset: 30342},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1068, col: 11, offset: 30342},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1068, col: 11, offset: 30342},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1068, col: 17, offset: 30348},
							expr: &ruleRefExpr{
								pos:  position{line: 1068, col: 18, offset: 30349},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1070, col: 1, offset: 30386},
			expr: &charClassMatcher{
				pos:        position{line: 1070, col: 19, offset: 30404},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1072, col: 1, offset: 30416},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 18, offset: 30433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1072, col: 18, offset: 30433},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1072, col: 36, offset: 30451},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1074, col: 1, offset: 30458},
			expr: &actionExpr{
				pos: position{line: 1075, col: 5, offset: 30473},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1075, col: 5, offset: 30473},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1075, col: 8, offset: 30476},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1077, col: 1, offset: 30557},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 5, offset: 30576},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 30576},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 30576},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1078, col: 5, offset: 30576},
									expr: &seqExpr{
										pos: position{line: 1078, col: 7, offset: 30578},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1078, col: 7, offset: 30578},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1078, col: 15, offset: 30586},
												expr: &ruleRefExpr{
													pos:  position{line: 1078, col: 16, offset: 30587},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1078, col: 32, offset: 30603},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1078, col: 48, offset: 30619},
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 48, offset: 30619},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 30671},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1079, col: 5, offset: 30671},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30710},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30710},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1080, col: 5, offset: 30710},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 10, offset: 30715},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 13, offset: 30718},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 30809},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1082, col: 5, offset: 30809},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 30851},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 30851},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1083, col: 5, offset: 30851},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 8, offset: 30854},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1083, col: 26, offset: 30872},
									expr: &seqExpr{
										pos: position{line: 1083, col: 28, offset: 30874},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1083, col: 28, offset: 30874},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1083, col: 31, offset: 30877},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1085, col: 1, offset: 30902},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 5, offset: 30914},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1086, col: 5, offset: 30914},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 5, offset: 30933},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1089, col: 1, offset: 30946},
			expr: &actionExpr{
				pos: position{line: 1090, col: 5, offset: 30955},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1090, col: 5, offset: 30955},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1090, col: 5, offset: 30955},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1090, col: 14, offset: 30964},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1090, col: 18, offset: 30968},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1094, col: 1, offset: 31088},
			expr: &seqExpr{
				pos: position{line: 1094, col: 12, offset: 31099},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1094, col: 12, offset: 31099},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1094, col: 15, offset: 31102},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 19, offset: 31106},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1094, col: 22, offset: 31109},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 26, offset: 31113},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1096, col: 1, offset: 31117},
			expr: &seqExpr{
				pos: position{line: 1096, col: 6, offset: 31122},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1096, col: 6, offset: 31122},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1096, col: 11, offset: 31127},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1096, col: 16, offset: 31132},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1096, col: 21, offset: 31137},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1097, col: 1, offset: 31143},
			expr: &seqExpr{
				pos: position{line: 1097, col: 6, offset: 31148},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1097, col: 6, offset: 31148},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1097, col: 11, offset: 31153},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1099, col: 1, offset: 31160},
			expr: &seqExpr{
				pos: position{line: 1099, col: 12, offset: 31171},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1099, col: 12, offset: 31171},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 24, offset: 31183},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1101, col: 1, offset: 31195},
			expr: &seqExpr{
				pos: position{line: 1101, col: 15, offset: 31209},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1101, col: 15, offset: 31209},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1101, col: 18, offset: 31212},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 22, offset: 31216},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1101, col: 25, offset: 31219},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 29, offset: 31223},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1101, col: 32, offset: 31226},
						expr: &seqExpr{
							pos: position{line: 1101, col: 33, offset: 31227},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1101, col: 33, offset: 31227},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1101, col: 37, offset: 31231},
									expr: &charClassMatcher{
										pos:        position{line: 1101, col: 37, offset: 31231},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1103, col: 1, offset: 31241},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 5, offset: 31256},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1104, col: 5, offset: 31256},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1105, col: 5, offset: 31264},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1105, col: 6, offset: 31265},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1105, col: 6, offset: 31265},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1105, col: 12, offset: 31271},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1105, col: 17, offset: 31276},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1105, col: 20, offset: 31279},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1105, col: 24, offset: 31283},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1105, col: 27, offset: 31286},
								expr: &seqExpr{
									pos: position{line: 1105, col: 28, offset: 31287},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1105, col: 28, offset: 31287},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1105, col: 32, offset: 31291},
											expr: &charClassMatcher{
												pos:        position{line: 1105, col: 32, offset: 31291},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1107, col: 1, offset: 31301},
			expr: &actionExpr{
				pos: position{line: 1108, col: 5, offset: 31314},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 5, offset: 31314},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1108, col: 5, offset: 31314},
							expr: &litMatcher{
								pos:        position{line: 1108, col: 5, offset: 31314},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1108, col: 10, offset: 31319},
							expr: &seqExpr{
								pos: position{line: 1108, col: 11, offset: 31320},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1108, col: 11, offset: 31320},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1108, col: 19, offset: 31328},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1112, col: 1, offset: 31454},
			expr: &seqExpr{
				pos: position{line: 1112, col: 11, offset: 31464},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1112, col: 11, offset: 31464},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1112, col: 16, offset: 31469},
						expr: &seqExpr{
							pos: position{line: 1112, col: 17, offset: 31470},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 17, offset: 31470},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 21, offset: 31474},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1114, col: 1, offset: 31482},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 5, offset: 31495},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1115, col: 5, offset: 31495},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1116, col: 5, offset: 31505},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1117, col: 5, offset: 31515},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1118, col: 5, offset: 31525},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1119, col: 5, offset: 31534},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1120, col: 5, offset: 31543},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1121, col: 5, offset: 31552},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1122, col: 5, offset: 31561},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1123, col: 5, offset: 31570},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1125, col: 1, offset: 31576},
			expr: &actionExpr{
				pos: position{line: 1126, col: 5, offset: 31583},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 5, offset: 31583},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1126, col: 5, offset: 31583},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1126, col: 10, offset: 31588},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1126, col: 14, offset: 31592},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1126, col: 19, offset: 31597},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1126, col: 23, offset: 31601},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1126, col: 28, offset: 31606},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1126, col: 32, offset: 31610},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1128, col: 1, offset: 31647},
			expr: &actionExpr{
				pos: position{line: 1129, col: 5, offset: 31655},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1129, col: 5, offset: 31655},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1129, col: 5, offset: 31655},
							expr: &seqExpr{
								pos: position{line: 1129, col: 8, offset: 31658},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1129, col: 8, offset: 31658},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1129, col: 12, offset: 31662},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1129, col: 16, offset: 31666},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1129, col: 20, offset: 31670},
										expr: &choiceExpr{
											pos: position{line: 1129, col: 22, offset: 31672},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1129, col: 22, offset: 31672},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1129, col: 33, offset: 31683},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1129, col: 39, offset: 31689},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1129, col: 41, offset: 31691},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1133, col: 1, offset: 31855},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 31873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 31873},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 31873},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1134, col: 5, offset: 31873},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1134, col: 7, offset: 31875},
										expr: &ruleRefExpr{
											pos:  position{line: 1134, col: 7, offset: 31875},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 17, offset: 31885},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1134, col: 19, offset: 31887},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 31951},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 31951},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1137, col: 5, offset: 31951},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 7, offset: 31953},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 11, offset: 31957},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1137, col: 13, offset: 31959},
										expr: &ruleRefExpr{
											pos:  position{line: 1137, col: 13, offset: 31959},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1137, col: 23, offset: 31969},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 28, offset: 31974},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1137, col: 30, offset: 31976},
										expr: &ruleRefExpr{
											pos:  position{line: 1137, col: 30, offset: 31976},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 40, offset: 31986},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 42, offset: 31988},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 5, offset: 32087},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1140, col: 5, offset: 32087},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1140, col: 5, offset: 32087},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 10, offset: 32092},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1140, col: 12, offset: 32094},
										expr: &ruleRefExpr{
											pos:  position{line: 1140, col: 12, offset: 32094},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 22, offset: 32104},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 24, offset: 32106},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 32177},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1143, col: 5, offset: 32177},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 5, offset: 32177},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 7, offset: 32179},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 11, offset: 32183},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1143, col: 13, offset: 32185},
										expr: &ruleRefExpr{
											pos:  position{line: 1143, col: 13, offset: 32185},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 23, offset: 32195},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 32263},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1146, col: 5, offset: 32263},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1150, col: 1, offset: 32300},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 5, offset: 32312},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1151, col: 5, offset: 32312},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 5, offset: 32319},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1154, col: 1, offset: 32324},
			expr: &actionExpr{
				pos: position{line: 1154, col: 12, offset: 32335},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1154, col: 12, offset: 32335},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1154, col: 12, offset: 32335},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 16, offset: 32339},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1154, col: 18, offset: 32341},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1156, col: 1, offset: 32379},
			expr: &actionExpr{
				pos: position{line: 1156, col: 12, offset: 32390},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 12, offset: 32390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1156, col: 12, offset: 32390},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 14, offset: 32392},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1156, col: 18, offset: 32396},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1158, col: 1, offset: 32434},
			expr: &actionExpr{
				pos: position{line: 1159, col: 5, offset: 32445},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 5, offset: 32445},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1159, col: 5, offset: 32445},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1159, col: 7, offset: 32447},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1159, col: 10, offset: 32450},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1159, col: 14, offset: 32454},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1159, col: 16, offset: 32456},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1163, col: 1, offset: 32529},
			expr: &actionExpr{
				pos: position{line: 1164, col: 5, offset: 32540},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 5, offset: 32540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1164, col: 5, offset: 32540},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1164, col: 7, offset: 32542},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1164, col: 11, offset: 32546},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1164, col: 15, offset: 32550},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1164, col: 17, offset: 32552},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1168, col: 1, offset: 32615},
			expr: &actionExpr{
				pos: position{line: 1169, col: 4, offset: 32623},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1169, col: 4, offset: 32623},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1169, col: 6, offset: 32625},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1171, col: 1, offset: 32665},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 5, offset: 32679},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1172, col: 5, offset: 32679},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 5, offset: 32694},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1175, col: 1, offset: 32710},
			expr: &actionExpr{
				pos: position{line: 1175, col: 14, offset: 32723},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1175, col: 14, offset: 32723},
					expr: &charClassMatcher{
						pos:        position{line: 1175, col: 14, offset: 32723},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1177, col: 1, offset: 32762},
			expr: &actionExpr{
				pos: position{line: 1178, col: 5, offset: 32781},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1178, col: 5, offset: 32781},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1178, col: 5, offset: 32781},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1178, col: 9, offset: 32785},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1180, col: 1, offset: 32828},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 32844},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1181, col: 5, offset: 32844},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1181, col: 5, offset: 32844},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1181, col: 5, offset: 32844},
									expr: &litMatcher{
										pos:        position{line: 1181, col: 5, offset: 32844},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1181, col: 10, offset: 32849},
									expr: &charClassMatcher{
										pos:        position{line: 1181, col: 10, offset: 32849},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1181, col: 17, offset: 32856},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1181, col: 21, offset: 32860},
									expr: &charClassMatcher{
										pos:        position{line: 1181, col: 21, offset: 32860},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1181, col: 28, offset: 32867},
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 28, offset: 32867},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 32926},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1184, col: 5, offset: 32926},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1184, col: 5, offset: 32926},
									expr: &litMatcher{
										pos:        position{line: 1184, col: 5, offset: 32926},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1184, col: 10, offset: 32931},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1184, col: 14, offset: 32935},
									expr: &charClassMatcher{
										pos:        position{line: 1184, col: 14, offset: 32935},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1184, col: 21, offset: 32942},
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 21, offset: 32942},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1188, col: 1, offset: 32998},
			expr: &seqExpr{
				pos: position{line: 1188, col: 16, offset: 33013},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1188, col: 16, offset: 33013},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1188, col: 21, offset: 33018},
						expr: &charClassMatcher{
							pos:        position{line: 1188, col: 21, offset: 33018},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 27, offset: 33024},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1190, col: 1, offset: 33036},
			expr: &actionExpr{
				pos: position{line: 1190, col: 7, offset: 33042},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1190, col: 7, offset: 33042},
					expr: &ruleRefExpr{
						pos:  position{line: 1190, col: 7, offset: 33042},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1192, col: 1, offset: 33084},
			expr: &charClassMatcher{
				pos:        position{line: 1192, col: 12, offset: 33095},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1195, col: 1, offset: 33109},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 33126},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 33126},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 33126},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1196, col: 5, offset: 33126},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 9, offset: 33130},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1196, col: 11, offset: 33132},
										expr: &ruleRefExpr{
											pos:  position{line: 1196, col: 11, offset: 33132},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 29, offset: 33150},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 33187},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 33187},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1197, col: 5, offset: 33187},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 9, offset: 33191},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1197, col: 11, offset: 33193},
										expr: &ruleRefExpr{
											pos:  position{line: 1197, col: 11, offset: 33193},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 29, offset: 33211},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1199, col: 1, offset: 33245},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 5, offset: 33266},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1200, col: 5, offset: 33266},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1200, col: 5, offset: 33266},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1200, col: 5, offset: 33266},
									expr: &choiceExpr{
										pos: position{line: 1200, col: 7, offset: 33268},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1200, col: 7, offset: 33268},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1200, col: 13, offset: 33274},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1200, col: 26, offset: 33287,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1201, col: 5, offset: 33324},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1201, col: 5, offset: 33324},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1201, col: 5, offset: 33324},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1201, col: 10, offset: 33329},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 12, offset: 33331},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1203, col: 1, offset: 33365},
			expr: &actionExpr{
				pos: position{line: 1204, col: 5, offset: 33377},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 5, offset: 33377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 5, offset: 33377},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 10, offset: 33382},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 23, offset: 33395},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1204, col: 28, offset: 33400},
								expr: &ruleRefExpr{
									pos:  position{line: 1204, col: 28, offset: 33400},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1206, col: 1, offset: 33462},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 5, offset: 33479},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1207, col: 5, offset: 33479},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 5, offset: 33496},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1210, col: 1, offset: 33508},
			expr: &actionExpr{
				pos: position{line: 1210, col: 16, offset: 33523},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1210, col: 16, offset: 33523},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1212, col: 1, offset: 33572},
			expr: &choiceExpr{
				pos: position{line: 1213, col: 5, offset: 33588},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1213, col: 5, offset: 33588},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1214, col: 5, offset: 33605},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1216, col: 1, offset: 33612},
			expr: &actionExpr{
				pos: position{line: 1216, col: 14, offset: 33625},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 14, offset: 33625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1216, col: 14, offset: 33625},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 19, offset: 33630},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1216, col: 22, offset: 33633},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1216, col: 22, offset: 33633},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1216, col: 38, offset: 33649},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1218, col: 1, offset: 33685},
			expr: &actionExpr{
				pos: position{line: 1219, col: 5, offset: 33694},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 5, offset: 33694},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1219, col: 5, offset: 33694},
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 6, offset: 33695},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1219, col: 22, offset: 33711},
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 23, offset: 33712},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 35, offset: 33724},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 40, offset: 33729},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 50, offset: 33739},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1219, col: 55, offset: 33744},
								expr: &ruleRefExpr{
									pos:  position{line: 1219, col: 55, offset: 33744},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1223, col: 1, offset: 33828},
			expr: &seqExpr{
				pos: position{line: 1223, col: 19, offset: 33846},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1223, col: 19, offset: 33846},
						expr: &litMatcher{
							pos:        position{line: 1223, col: 19, offset: 33846},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 24, offset: 33851},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1224, col: 1, offset: 33864},
			expr: &seqExpr{
				pos: position{line: 1224, col: 15, offset: 33878},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1224, col: 15, offset: 33878},
						expr: &ruleRefExpr{
							pos:  position{line: 1224, col: 15, offset: 33878},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1224, col: 28, offset: 33891},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1226, col: 1, offset: 33896},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 5, offset: 33910},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1227, col: 5, offset: 33910},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 5, offset: 33927},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 33939},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1229, col: 5, offset: 33939},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1231, col: 1, offset: 33963},
			expr: &choiceExpr{
				pos: position{line: 1232, col: 5, offset: 33976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1232, col: 5, offset: 33976},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1233, col: 5, offset: 33990},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1235, col: 1, offset: 33997},
			expr: &actionExpr{
				pos: position{line: 1235, col: 11, offset: 34007},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 11, offset: 34007},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 11, offset: 34007},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 16, offset: 34012},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1235, col: 19, offset: 34015},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1235, col: 19, offset: 34015},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 32, offset: 34028},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1237, col: 1, offset: 34064},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 34079},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1238, col: 5, offset: 34079},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1238, col: 5, offset: 34079},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1239, col: 5, offset: 34107},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1239, col: 5, offset: 34107},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1240, col: 5, offset: 34137},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1243, col: 1, offset: 34144},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 34165},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1244, col: 5, offset: 34165},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1244, col: 5, offset: 34165},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1244, col: 5, offset: 34165},
									expr: &choiceExpr{
										pos: position{line: 1244, col: 7, offset: 34167},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1244, col: 7, offset: 34167},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1244, col: 13, offset: 34173},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1244, col: 26, offset: 34186,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 34223},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 34223},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1245, col: 5, offset: 34223},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 10, offset: 34228},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 12, offset: 34230},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1247, col: 1, offset: 34264},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 5, offset: 34283},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 34283},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 34283},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1248, col: 5, offset: 34283},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1248, col: 9, offset: 34287},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1248, col: 18, offset: 34296},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 5, offset: 34347},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 5, offset: 34368},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1252, col: 1, offset: 34383},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 5, offset: 34404},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1253, col: 5, offset: 34404},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1254, col: 5, offset: 34412},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1254, col: 5, offset: 34412},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1255, col: 5, offset: 34452},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1256, col: 5, offset: 34461},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1256, col: 5, offset: 34461},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1257, col: 5, offset: 34490},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1257, col: 5, offset: 34490},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 34519},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1258, col: 5, offset: 34519},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1259, col: 5, offset: 34548},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1259, col: 5, offset: 34548},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1260, col: 5, offset: 34577},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1260, col: 5, offset: 34577},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 34606},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1261, col: 5, offset: 34606},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1263, col: 1, offset: 34632},
			expr: &choiceExpr{
				pos: position{line: 1264, col: 5, offset: 34650},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1264, col: 5, offset: 34650},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1264, col: 5, offset: 34650},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1265, col: 5, offset: 34678},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1265, col: 5, offset: 34678},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1266, col: 5, offset: 34706},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1268, col: 1, offset: 34712},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 5, offset: 34730},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1269, col: 5, offset: 34730},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1269, col: 5, offset: 34730},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1269, col: 5, offset: 34730},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1269, col: 9, offset: 34734},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1269, col: 16, offset: 34741},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1269, col: 16, offset: 34741},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1269, col: 25, offset: 34750},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1269, col: 34, offset: 34759},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1269, col: 43, offset: 34768},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1272, col: 5, offset: 34831},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1272, col: 5, offset: 34831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1272, col: 5, offset: 34831},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1272, col: 9, offset: 34835},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1272, col: 13, offset: 34839},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1272, col: 20, offset: 34846},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1272, col: 20, offset: 34846},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1272, col: 29, offset: 34855},
												expr: &ruleRefExpr{
													pos:  position{line: 1272, col: 29, offset: 34855},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1272, col: 39, offset: 34865},
												expr: &ruleRefExpr{
													pos:  position{line: 1272, col: 39, offset: 34865},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1272, col: 49, offset: 34875},
												expr: &ruleRefExpr{
													pos:  position{line: 1272, col: 49, offset: 34875},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1272, col: 59, offset: 34885},
												expr: &ruleRefExpr{
													pos:  position{line: 1272, col: 59, offset: 34885},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1272, col: 69, offset: 34895},
												expr: &ruleRefExpr{
													pos:  position{line: 1272, col: 69, offset: 34895},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1272, col: 80, offset: 34906},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1276, col: 1, offset: 34960},
			expr: &actionExpr{
				pos: position{line: 1277, col: 5, offset: 34971},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 5, offset: 34971},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1277, col: 5, offset: 34971},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1277, col: 9, offset: 34975},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 14, offset: 34980},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1277, col: 25, offset: 34991},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1277, col: 29, offset: 34995},
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 30, offset: 34996},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1279, col: 1, offset: 35031},
			expr: &actionExpr{
				pos: position{line: 1280, col: 5, offset: 35046},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1280, col: 5, offset: 35046},
					expr: &choiceExpr{
						pos: position{line: 1280, col: 6, offset: 35047},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1280, col: 6, offset: 35047},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1280, col: 15, offset: 35056},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1280, col: 15, offset: 35056},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1280, col: 20, offset: 35061,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1282, col: 1, offset: 35097},
			expr: &charClassMatcher{
				pos:        position{line: 1283, col: 5, offset: 35113},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1285, col: 1, offset: 35128},
			expr: &oneOrMoreExpr{
				pos: position{line: 1285, col: 6, offset: 35133},
				expr: &ruleRefExpr{
					pos:  position{line: 1285, col: 6, offset: 35133},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1287, col: 1, offset: 35144},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1287, col: 6, offset: 35149},
				expr: &ruleRefExpr{
					pos:  position{line: 1287, col: 6, offset: 35149},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1289, col: 1, offset: 35160},
			expr: &choiceExpr{
				pos: position{line: 1290, col: 5, offset: 35173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1290, col: 5, offset: 35173},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 5, offset: 35188},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 5, offset: 35207},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1294, col: 1, offset: 35216},
			expr: &anyMatcher{
				line: 1295, col: 5, offset: 35236,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1297, col: 1, offset: 35239},
			expr: &choiceExpr{
				pos: position{line: 1298, col: 5, offset: 35267},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1298, col: 5, offset: 35267},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1299, col: 5, offset: 35276},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1300, col: 5, offset: 35285},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1301, col: 5, offset: 35294},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1302, col: 5, offset: 35302},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1303, col: 5, offset: 35315},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1305, col: 1, offset: 35325},
			expr: &charClassMatcher{
				pos:        position{line: 1306, col: 5, offset: 35344},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1312, col: 1, offset: 35674},
			expr: &ruleRefExpr{
				pos:  position{line: 1315, col: 5, offset: 35745},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1317, col: 1, offset: 35764},
			expr: &seqExpr{
				pos: position{line: 1318, col: 5, offset: 35785},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1318, col: 5, offset: 35785},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1318, col: 10, offset: 35790},
						expr: &seqExpr{
							pos: position{line: 1318, col: 11, offset: 35791},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1318, col: 11, offset: 35791},
									expr: &litMatcher{
										pos:        position{line: 1318, col: 12, offset: 35792},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1318, col: 17, offset: 35797},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1318, col: 35, offset: 35815},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1320, col: 1, offset: 35821},
			expr: &seqExpr{
				pos: position{line: 1321, col: 5, offset: 35843},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1321, col: 5, offset: 35843},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1321, col: 10, offset: 35848},
						expr: &seqExpr{
							pos: position{line: 1321, col: 11, offset: 35849},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1321, col: 11, offset: 35849},
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 12, offset: 35850},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1321, col: 27, offset: 35865},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1323, col: 1, offset: 35884},
			expr: &seqExpr{
				pos: position{line: 1323, col: 7, offset: 35890},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1323, col: 7, offset: 35890},
						expr: &ruleRefExpr{
							pos:  position{line: 1323, col: 7, offset: 35890},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 19, offset: 35902},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1325, col: 1, offset: 35918},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 7, offset: 35924},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1325, col: 7, offset: 35924},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 35928},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1327, col: 1, offset: 35933},
			expr: &notExpr{
				pos: position{line: 1327, col: 7, offset: 35939},
				expr: &anyMatcher{
					line: 1327, col: 8, offset: 35940,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonParallel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel1(stack["s"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq1(stack["seq"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation46(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation46(stack["f"])
}

func (c *current) onOperation52(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation52(stack["a"])
}

func (c *current) onOperation58(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation58(stack["a"])
}

func (c *current) onOperation64(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation64(stack["expr"])
}

func (c *current) onSwitchLiteralClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLiteralClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLiteralClause1(stack["expr"], stack["proc"])
}

func (c *current) onSwitchSearchBooleanClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchSearchBooleanClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchSearchBooleanClause1(stack["expr"], stack["proc"])
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation13(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation13(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onOverProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs}, nil

}

func (p *parser) callonOverProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc1(stack["exprs"])
}

func (c *current) onWithProc1(locals, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "locals": locals, "seq": seq}, nil

}

func (p *parser) callonWithProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWithProc1(stack["locals"], stack["seq"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
